
HMI-ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000349e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000349e  00003532  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800068  00800068  0000353a  2**0
                  ALLOC
  3 .stab         00002a3c  00000000  00000000  0000353c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c99  00000000  00000000  00005f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006c11  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006d51  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000099f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a7a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a904  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ab91  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b35f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 c8 0e 	jmp	0x1d90	; 0x1d90 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ab 36       	cpi	r26, 0x6B	; 107
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ee e9       	ldi	r30, 0x9E	; 158
      78:	f4 e3       	ldi	r31, 0x34	; 52
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 4d 1a 	jmp	0x349a	; 0x349a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d1 19 	jmp	0x33a2	; 0x33a2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ed 19 	jmp	0x33da	; 0x33da <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 dd 19 	jmp	0x33ba	; 0x33ba <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f9 19 	jmp	0x33f2	; 0x33f2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 dd 19 	jmp	0x33ba	; 0x33ba <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f9 19 	jmp	0x33f2	; 0x33f2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d1 19 	jmp	0x33a2	; 0x33a2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ed 19 	jmp	0x33da	; 0x33da <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 dd 19 	jmp	0x33ba	; 0x33ba <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f9 19 	jmp	0x33f2	; 0x33f2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 dd 19 	jmp	0x33ba	; 0x33ba <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f9 19 	jmp	0x33f2	; 0x33f2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 dd 19 	jmp	0x33ba	; 0x33ba <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f9 19 	jmp	0x33f2	; 0x33f2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e1 19 	jmp	0x33c2	; 0x33c2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 fd 19 	jmp	0x33fa	; 0x33fa <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:

/*******************************************************************************
 *                      Main Function                                          *
 *******************************************************************************/

int main(void){
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c7 58       	subi	r28, 0x87	; 135
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61

		//initializing local Variables
		uint8 key;
		uint8 compare;
		uint8 check=0;
     b60:	fe 01       	movw	r30, r28
     b62:	e1 58       	subi	r30, 0x81	; 129
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	10 82       	st	Z, r1
		uint8 oldpass[6];

		//initializing modules
		LCD_init();
     b68:	0e 94 19 10 	call	0x2032	; 0x2032 <LCD_init>
		LCD_clearScreen();
     b6c:	0e 94 1b 19 	call	0x3236	; 0x3236 <LCD_clearScreen>
		UART_init();
     b70:	0e 94 25 19 	call	0x324a	; 0x324a <UART_init>

		SREG |= (1<<7);
     b74:	af e5       	ldi	r26, 0x5F	; 95
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	ef e5       	ldi	r30, 0x5F	; 95
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	80 68       	ori	r24, 0x80	; 128
     b80:	8c 93       	st	X, r24

		timer2_init_CTC_mode(250);
     b82:	8a ef       	ldi	r24, 0xFA	; 250
     b84:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <timer2_init_CTC_mode>

loop:	//adding new password operation
     b88:	fe 01       	movw	r30, r28
     b8a:	e5 58       	subi	r30, 0x85	; 133
     b8c:	ff 4f       	sbci	r31, 0xFF	; 255
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	a0 e2       	ldi	r26, 0x20	; 32
     b94:	b1 e4       	ldi	r27, 0x41	; 65
     b96:	80 83       	st	Z, r24
     b98:	91 83       	std	Z+1, r25	; 0x01
     b9a:	a2 83       	std	Z+2, r26	; 0x02
     b9c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b9e:	8e 01       	movw	r16, r28
     ba0:	09 58       	subi	r16, 0x89	; 137
     ba2:	1f 4f       	sbci	r17, 0xFF	; 255
     ba4:	fe 01       	movw	r30, r28
     ba6:	e5 58       	subi	r30, 0x85	; 133
     ba8:	ff 4f       	sbci	r31, 0xFF	; 255
     baa:	60 81       	ld	r22, Z
     bac:	71 81       	ldd	r23, Z+1	; 0x01
     bae:	82 81       	ldd	r24, Z+2	; 0x02
     bb0:	93 81       	ldd	r25, Z+3	; 0x03
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	4a ef       	ldi	r20, 0xFA	; 250
     bb8:	54 e4       	ldi	r21, 0x44	; 68
     bba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bbe:	dc 01       	movw	r26, r24
     bc0:	cb 01       	movw	r24, r22
     bc2:	f8 01       	movw	r30, r16
     bc4:	80 83       	st	Z, r24
     bc6:	91 83       	std	Z+1, r25	; 0x01
     bc8:	a2 83       	std	Z+2, r26	; 0x02
     bca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     bcc:	fe 01       	movw	r30, r28
     bce:	e9 58       	subi	r30, 0x89	; 137
     bd0:	ff 4f       	sbci	r31, 0xFF	; 255
     bd2:	60 81       	ld	r22, Z
     bd4:	71 81       	ldd	r23, Z+1	; 0x01
     bd6:	82 81       	ldd	r24, Z+2	; 0x02
     bd8:	93 81       	ldd	r25, Z+3	; 0x03
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	40 e8       	ldi	r20, 0x80	; 128
     be0:	5f e3       	ldi	r21, 0x3F	; 63
     be2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     be6:	88 23       	and	r24, r24
     be8:	44 f4       	brge	.+16     	; 0xbfa <main+0xb4>
		__ticks = 1;
     bea:	fe 01       	movw	r30, r28
     bec:	eb 58       	subi	r30, 0x8B	; 139
     bee:	ff 4f       	sbci	r31, 0xFF	; 255
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	91 83       	std	Z+1, r25	; 0x01
     bf6:	80 83       	st	Z, r24
     bf8:	64 c0       	rjmp	.+200    	; 0xcc2 <main+0x17c>
	else if (__tmp > 65535)
     bfa:	fe 01       	movw	r30, r28
     bfc:	e9 58       	subi	r30, 0x89	; 137
     bfe:	ff 4f       	sbci	r31, 0xFF	; 255
     c00:	60 81       	ld	r22, Z
     c02:	71 81       	ldd	r23, Z+1	; 0x01
     c04:	82 81       	ldd	r24, Z+2	; 0x02
     c06:	93 81       	ldd	r25, Z+3	; 0x03
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	3f ef       	ldi	r19, 0xFF	; 255
     c0c:	4f e7       	ldi	r20, 0x7F	; 127
     c0e:	57 e4       	ldi	r21, 0x47	; 71
     c10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c14:	18 16       	cp	r1, r24
     c16:	0c f0       	brlt	.+2      	; 0xc1a <main+0xd4>
     c18:	43 c0       	rjmp	.+134    	; 0xca0 <main+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c1a:	fe 01       	movw	r30, r28
     c1c:	e5 58       	subi	r30, 0x85	; 133
     c1e:	ff 4f       	sbci	r31, 0xFF	; 255
     c20:	60 81       	ld	r22, Z
     c22:	71 81       	ldd	r23, Z+1	; 0x01
     c24:	82 81       	ldd	r24, Z+2	; 0x02
     c26:	93 81       	ldd	r25, Z+3	; 0x03
     c28:	20 e0       	ldi	r18, 0x00	; 0
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	40 e2       	ldi	r20, 0x20	; 32
     c2e:	51 e4       	ldi	r21, 0x41	; 65
     c30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c34:	dc 01       	movw	r26, r24
     c36:	cb 01       	movw	r24, r22
     c38:	8e 01       	movw	r16, r28
     c3a:	0b 58       	subi	r16, 0x8B	; 139
     c3c:	1f 4f       	sbci	r17, 0xFF	; 255
     c3e:	bc 01       	movw	r22, r24
     c40:	cd 01       	movw	r24, r26
     c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c46:	dc 01       	movw	r26, r24
     c48:	cb 01       	movw	r24, r22
     c4a:	f8 01       	movw	r30, r16
     c4c:	91 83       	std	Z+1, r25	; 0x01
     c4e:	80 83       	st	Z, r24
     c50:	1f c0       	rjmp	.+62     	; 0xc90 <main+0x14a>
     c52:	fe 01       	movw	r30, r28
     c54:	ed 58       	subi	r30, 0x8D	; 141
     c56:	ff 4f       	sbci	r31, 0xFF	; 255
     c58:	88 ec       	ldi	r24, 0xC8	; 200
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	91 83       	std	Z+1, r25	; 0x01
     c5e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c60:	fe 01       	movw	r30, r28
     c62:	ed 58       	subi	r30, 0x8D	; 141
     c64:	ff 4f       	sbci	r31, 0xFF	; 255
     c66:	80 81       	ld	r24, Z
     c68:	91 81       	ldd	r25, Z+1	; 0x01
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	f1 f7       	brne	.-4      	; 0xc6a <main+0x124>
     c6e:	fe 01       	movw	r30, r28
     c70:	ed 58       	subi	r30, 0x8D	; 141
     c72:	ff 4f       	sbci	r31, 0xFF	; 255
     c74:	91 83       	std	Z+1, r25	; 0x01
     c76:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c78:	de 01       	movw	r26, r28
     c7a:	ab 58       	subi	r26, 0x8B	; 139
     c7c:	bf 4f       	sbci	r27, 0xFF	; 255
     c7e:	fe 01       	movw	r30, r28
     c80:	eb 58       	subi	r30, 0x8B	; 139
     c82:	ff 4f       	sbci	r31, 0xFF	; 255
     c84:	80 81       	ld	r24, Z
     c86:	91 81       	ldd	r25, Z+1	; 0x01
     c88:	01 97       	sbiw	r24, 0x01	; 1
     c8a:	11 96       	adiw	r26, 0x01	; 1
     c8c:	9c 93       	st	X, r25
     c8e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c90:	fe 01       	movw	r30, r28
     c92:	eb 58       	subi	r30, 0x8B	; 139
     c94:	ff 4f       	sbci	r31, 0xFF	; 255
     c96:	80 81       	ld	r24, Z
     c98:	91 81       	ldd	r25, Z+1	; 0x01
     c9a:	00 97       	sbiw	r24, 0x00	; 0
     c9c:	d1 f6       	brne	.-76     	; 0xc52 <main+0x10c>
     c9e:	27 c0       	rjmp	.+78     	; 0xcee <main+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ca0:	8e 01       	movw	r16, r28
     ca2:	0b 58       	subi	r16, 0x8B	; 139
     ca4:	1f 4f       	sbci	r17, 0xFF	; 255
     ca6:	fe 01       	movw	r30, r28
     ca8:	e9 58       	subi	r30, 0x89	; 137
     caa:	ff 4f       	sbci	r31, 0xFF	; 255
     cac:	60 81       	ld	r22, Z
     cae:	71 81       	ldd	r23, Z+1	; 0x01
     cb0:	82 81       	ldd	r24, Z+2	; 0x02
     cb2:	93 81       	ldd	r25, Z+3	; 0x03
     cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cb8:	dc 01       	movw	r26, r24
     cba:	cb 01       	movw	r24, r22
     cbc:	f8 01       	movw	r30, r16
     cbe:	91 83       	std	Z+1, r25	; 0x01
     cc0:	80 83       	st	Z, r24
     cc2:	de 01       	movw	r26, r28
     cc4:	af 58       	subi	r26, 0x8F	; 143
     cc6:	bf 4f       	sbci	r27, 0xFF	; 255
     cc8:	fe 01       	movw	r30, r28
     cca:	eb 58       	subi	r30, 0x8B	; 139
     ccc:	ff 4f       	sbci	r31, 0xFF	; 255
     cce:	80 81       	ld	r24, Z
     cd0:	91 81       	ldd	r25, Z+1	; 0x01
     cd2:	8d 93       	st	X+, r24
     cd4:	9c 93       	st	X, r25
     cd6:	fe 01       	movw	r30, r28
     cd8:	ef 58       	subi	r30, 0x8F	; 143
     cda:	ff 4f       	sbci	r31, 0xFF	; 255
     cdc:	80 81       	ld	r24, Z
     cde:	91 81       	ldd	r25, Z+1	; 0x01
     ce0:	01 97       	sbiw	r24, 0x01	; 1
     ce2:	f1 f7       	brne	.-4      	; 0xce0 <main+0x19a>
     ce4:	fe 01       	movw	r30, r28
     ce6:	ef 58       	subi	r30, 0x8F	; 143
     ce8:	ff 4f       	sbci	r31, 0xFF	; 255
     cea:	91 83       	std	Z+1, r25	; 0x01
     cec:	80 83       	st	Z, r24
		_delay_ms(10);
		LCD_clearScreen();
     cee:	0e 94 1b 19 	call	0x3236	; 0x3236 <LCD_clearScreen>

		Add_password();
     cf2:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <Add_password>
     cf6:	fe 01       	movw	r30, r28
     cf8:	e3 59       	subi	r30, 0x93	; 147
     cfa:	ff 4f       	sbci	r31, 0xFF	; 255
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	a0 e2       	ldi	r26, 0x20	; 32
     d02:	b1 e4       	ldi	r27, 0x41	; 65
     d04:	80 83       	st	Z, r24
     d06:	91 83       	std	Z+1, r25	; 0x01
     d08:	a2 83       	std	Z+2, r26	; 0x02
     d0a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d0c:	8e 01       	movw	r16, r28
     d0e:	07 59       	subi	r16, 0x97	; 151
     d10:	1f 4f       	sbci	r17, 0xFF	; 255
     d12:	fe 01       	movw	r30, r28
     d14:	e3 59       	subi	r30, 0x93	; 147
     d16:	ff 4f       	sbci	r31, 0xFF	; 255
     d18:	60 81       	ld	r22, Z
     d1a:	71 81       	ldd	r23, Z+1	; 0x01
     d1c:	82 81       	ldd	r24, Z+2	; 0x02
     d1e:	93 81       	ldd	r25, Z+3	; 0x03
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	4a ef       	ldi	r20, 0xFA	; 250
     d26:	54 e4       	ldi	r21, 0x44	; 68
     d28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d2c:	dc 01       	movw	r26, r24
     d2e:	cb 01       	movw	r24, r22
     d30:	f8 01       	movw	r30, r16
     d32:	80 83       	st	Z, r24
     d34:	91 83       	std	Z+1, r25	; 0x01
     d36:	a2 83       	std	Z+2, r26	; 0x02
     d38:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d3a:	fe 01       	movw	r30, r28
     d3c:	e7 59       	subi	r30, 0x97	; 151
     d3e:	ff 4f       	sbci	r31, 0xFF	; 255
     d40:	60 81       	ld	r22, Z
     d42:	71 81       	ldd	r23, Z+1	; 0x01
     d44:	82 81       	ldd	r24, Z+2	; 0x02
     d46:	93 81       	ldd	r25, Z+3	; 0x03
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	40 e8       	ldi	r20, 0x80	; 128
     d4e:	5f e3       	ldi	r21, 0x3F	; 63
     d50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d54:	88 23       	and	r24, r24
     d56:	44 f4       	brge	.+16     	; 0xd68 <main+0x222>
		__ticks = 1;
     d58:	fe 01       	movw	r30, r28
     d5a:	e9 59       	subi	r30, 0x99	; 153
     d5c:	ff 4f       	sbci	r31, 0xFF	; 255
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	91 83       	std	Z+1, r25	; 0x01
     d64:	80 83       	st	Z, r24
     d66:	64 c0       	rjmp	.+200    	; 0xe30 <main+0x2ea>
	else if (__tmp > 65535)
     d68:	fe 01       	movw	r30, r28
     d6a:	e7 59       	subi	r30, 0x97	; 151
     d6c:	ff 4f       	sbci	r31, 0xFF	; 255
     d6e:	60 81       	ld	r22, Z
     d70:	71 81       	ldd	r23, Z+1	; 0x01
     d72:	82 81       	ldd	r24, Z+2	; 0x02
     d74:	93 81       	ldd	r25, Z+3	; 0x03
     d76:	20 e0       	ldi	r18, 0x00	; 0
     d78:	3f ef       	ldi	r19, 0xFF	; 255
     d7a:	4f e7       	ldi	r20, 0x7F	; 127
     d7c:	57 e4       	ldi	r21, 0x47	; 71
     d7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d82:	18 16       	cp	r1, r24
     d84:	0c f0       	brlt	.+2      	; 0xd88 <main+0x242>
     d86:	43 c0       	rjmp	.+134    	; 0xe0e <main+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d88:	fe 01       	movw	r30, r28
     d8a:	e3 59       	subi	r30, 0x93	; 147
     d8c:	ff 4f       	sbci	r31, 0xFF	; 255
     d8e:	60 81       	ld	r22, Z
     d90:	71 81       	ldd	r23, Z+1	; 0x01
     d92:	82 81       	ldd	r24, Z+2	; 0x02
     d94:	93 81       	ldd	r25, Z+3	; 0x03
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	40 e2       	ldi	r20, 0x20	; 32
     d9c:	51 e4       	ldi	r21, 0x41	; 65
     d9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     da2:	dc 01       	movw	r26, r24
     da4:	cb 01       	movw	r24, r22
     da6:	8e 01       	movw	r16, r28
     da8:	09 59       	subi	r16, 0x99	; 153
     daa:	1f 4f       	sbci	r17, 0xFF	; 255
     dac:	bc 01       	movw	r22, r24
     dae:	cd 01       	movw	r24, r26
     db0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     db4:	dc 01       	movw	r26, r24
     db6:	cb 01       	movw	r24, r22
     db8:	f8 01       	movw	r30, r16
     dba:	91 83       	std	Z+1, r25	; 0x01
     dbc:	80 83       	st	Z, r24
     dbe:	1f c0       	rjmp	.+62     	; 0xdfe <main+0x2b8>
     dc0:	fe 01       	movw	r30, r28
     dc2:	eb 59       	subi	r30, 0x9B	; 155
     dc4:	ff 4f       	sbci	r31, 0xFF	; 255
     dc6:	88 ec       	ldi	r24, 0xC8	; 200
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	91 83       	std	Z+1, r25	; 0x01
     dcc:	80 83       	st	Z, r24
     dce:	fe 01       	movw	r30, r28
     dd0:	eb 59       	subi	r30, 0x9B	; 155
     dd2:	ff 4f       	sbci	r31, 0xFF	; 255
     dd4:	80 81       	ld	r24, Z
     dd6:	91 81       	ldd	r25, Z+1	; 0x01
     dd8:	01 97       	sbiw	r24, 0x01	; 1
     dda:	f1 f7       	brne	.-4      	; 0xdd8 <main+0x292>
     ddc:	fe 01       	movw	r30, r28
     dde:	eb 59       	subi	r30, 0x9B	; 155
     de0:	ff 4f       	sbci	r31, 0xFF	; 255
     de2:	91 83       	std	Z+1, r25	; 0x01
     de4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     de6:	de 01       	movw	r26, r28
     de8:	a9 59       	subi	r26, 0x99	; 153
     dea:	bf 4f       	sbci	r27, 0xFF	; 255
     dec:	fe 01       	movw	r30, r28
     dee:	e9 59       	subi	r30, 0x99	; 153
     df0:	ff 4f       	sbci	r31, 0xFF	; 255
     df2:	80 81       	ld	r24, Z
     df4:	91 81       	ldd	r25, Z+1	; 0x01
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	11 96       	adiw	r26, 0x01	; 1
     dfa:	9c 93       	st	X, r25
     dfc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dfe:	fe 01       	movw	r30, r28
     e00:	e9 59       	subi	r30, 0x99	; 153
     e02:	ff 4f       	sbci	r31, 0xFF	; 255
     e04:	80 81       	ld	r24, Z
     e06:	91 81       	ldd	r25, Z+1	; 0x01
     e08:	00 97       	sbiw	r24, 0x00	; 0
     e0a:	d1 f6       	brne	.-76     	; 0xdc0 <main+0x27a>
     e0c:	27 c0       	rjmp	.+78     	; 0xe5c <main+0x316>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e0e:	8e 01       	movw	r16, r28
     e10:	09 59       	subi	r16, 0x99	; 153
     e12:	1f 4f       	sbci	r17, 0xFF	; 255
     e14:	fe 01       	movw	r30, r28
     e16:	e7 59       	subi	r30, 0x97	; 151
     e18:	ff 4f       	sbci	r31, 0xFF	; 255
     e1a:	60 81       	ld	r22, Z
     e1c:	71 81       	ldd	r23, Z+1	; 0x01
     e1e:	82 81       	ldd	r24, Z+2	; 0x02
     e20:	93 81       	ldd	r25, Z+3	; 0x03
     e22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e26:	dc 01       	movw	r26, r24
     e28:	cb 01       	movw	r24, r22
     e2a:	f8 01       	movw	r30, r16
     e2c:	91 83       	std	Z+1, r25	; 0x01
     e2e:	80 83       	st	Z, r24
     e30:	de 01       	movw	r26, r28
     e32:	ad 59       	subi	r26, 0x9D	; 157
     e34:	bf 4f       	sbci	r27, 0xFF	; 255
     e36:	fe 01       	movw	r30, r28
     e38:	e9 59       	subi	r30, 0x99	; 153
     e3a:	ff 4f       	sbci	r31, 0xFF	; 255
     e3c:	80 81       	ld	r24, Z
     e3e:	91 81       	ldd	r25, Z+1	; 0x01
     e40:	8d 93       	st	X+, r24
     e42:	9c 93       	st	X, r25
     e44:	fe 01       	movw	r30, r28
     e46:	ed 59       	subi	r30, 0x9D	; 157
     e48:	ff 4f       	sbci	r31, 0xFF	; 255
     e4a:	80 81       	ld	r24, Z
     e4c:	91 81       	ldd	r25, Z+1	; 0x01
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	f1 f7       	brne	.-4      	; 0xe4e <main+0x308>
     e52:	fe 01       	movw	r30, r28
     e54:	ed 59       	subi	r30, 0x9D	; 157
     e56:	ff 4f       	sbci	r31, 0xFF	; 255
     e58:	91 83       	std	Z+1, r25	; 0x01
     e5a:	80 83       	st	Z, r24

		_delay_ms(10);
		LCD_clearScreen();
     e5c:	0e 94 1b 19 	call	0x3236	; 0x3236 <LCD_clearScreen>

		compare = UART_recieveByte();
     e60:	0e 94 56 19 	call	0x32ac	; 0x32ac <UART_recieveByte>
     e64:	fe 01       	movw	r30, r28
     e66:	e0 58       	subi	r30, 0x80	; 128
     e68:	ff 4f       	sbci	r31, 0xFF	; 255
     e6a:	80 83       	st	Z, r24
		if(compare==0){
     e6c:	fe 01       	movw	r30, r28
     e6e:	e0 58       	subi	r30, 0x80	; 128
     e70:	ff 4f       	sbci	r31, 0xFF	; 255
     e72:	80 81       	ld	r24, Z
     e74:	88 23       	and	r24, r24
     e76:	09 f0       	breq	.+2      	; 0xe7a <main+0x334>
     e78:	c0 c0       	rjmp	.+384    	; 0xffa <main+0x4b4>
			Receive_from_control();
     e7a:	0e 94 a5 0c 	call	0x194a	; 0x194a <Receive_from_control>

menu:		//main menu
     e7e:	fe 01       	movw	r30, r28
     e80:	e1 5a       	subi	r30, 0xA1	; 161
     e82:	ff 4f       	sbci	r31, 0xFF	; 255
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	a0 e2       	ldi	r26, 0x20	; 32
     e8a:	b1 e4       	ldi	r27, 0x41	; 65
     e8c:	80 83       	st	Z, r24
     e8e:	91 83       	std	Z+1, r25	; 0x01
     e90:	a2 83       	std	Z+2, r26	; 0x02
     e92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e94:	8e 01       	movw	r16, r28
     e96:	05 5a       	subi	r16, 0xA5	; 165
     e98:	1f 4f       	sbci	r17, 0xFF	; 255
     e9a:	fe 01       	movw	r30, r28
     e9c:	e1 5a       	subi	r30, 0xA1	; 161
     e9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ea0:	60 81       	ld	r22, Z
     ea2:	71 81       	ldd	r23, Z+1	; 0x01
     ea4:	82 81       	ldd	r24, Z+2	; 0x02
     ea6:	93 81       	ldd	r25, Z+3	; 0x03
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	4a ef       	ldi	r20, 0xFA	; 250
     eae:	54 e4       	ldi	r21, 0x44	; 68
     eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	f8 01       	movw	r30, r16
     eba:	80 83       	st	Z, r24
     ebc:	91 83       	std	Z+1, r25	; 0x01
     ebe:	a2 83       	std	Z+2, r26	; 0x02
     ec0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ec2:	fe 01       	movw	r30, r28
     ec4:	e5 5a       	subi	r30, 0xA5	; 165
     ec6:	ff 4f       	sbci	r31, 0xFF	; 255
     ec8:	60 81       	ld	r22, Z
     eca:	71 81       	ldd	r23, Z+1	; 0x01
     ecc:	82 81       	ldd	r24, Z+2	; 0x02
     ece:	93 81       	ldd	r25, Z+3	; 0x03
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	40 e8       	ldi	r20, 0x80	; 128
     ed6:	5f e3       	ldi	r21, 0x3F	; 63
     ed8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     edc:	88 23       	and	r24, r24
     ede:	44 f4       	brge	.+16     	; 0xef0 <main+0x3aa>
		__ticks = 1;
     ee0:	fe 01       	movw	r30, r28
     ee2:	e7 5a       	subi	r30, 0xA7	; 167
     ee4:	ff 4f       	sbci	r31, 0xFF	; 255
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	91 83       	std	Z+1, r25	; 0x01
     eec:	80 83       	st	Z, r24
     eee:	64 c0       	rjmp	.+200    	; 0xfb8 <main+0x472>
	else if (__tmp > 65535)
     ef0:	fe 01       	movw	r30, r28
     ef2:	e5 5a       	subi	r30, 0xA5	; 165
     ef4:	ff 4f       	sbci	r31, 0xFF	; 255
     ef6:	60 81       	ld	r22, Z
     ef8:	71 81       	ldd	r23, Z+1	; 0x01
     efa:	82 81       	ldd	r24, Z+2	; 0x02
     efc:	93 81       	ldd	r25, Z+3	; 0x03
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	3f ef       	ldi	r19, 0xFF	; 255
     f02:	4f e7       	ldi	r20, 0x7F	; 127
     f04:	57 e4       	ldi	r21, 0x47	; 71
     f06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f0a:	18 16       	cp	r1, r24
     f0c:	0c f0       	brlt	.+2      	; 0xf10 <main+0x3ca>
     f0e:	43 c0       	rjmp	.+134    	; 0xf96 <main+0x450>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f10:	fe 01       	movw	r30, r28
     f12:	e1 5a       	subi	r30, 0xA1	; 161
     f14:	ff 4f       	sbci	r31, 0xFF	; 255
     f16:	60 81       	ld	r22, Z
     f18:	71 81       	ldd	r23, Z+1	; 0x01
     f1a:	82 81       	ldd	r24, Z+2	; 0x02
     f1c:	93 81       	ldd	r25, Z+3	; 0x03
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	40 e2       	ldi	r20, 0x20	; 32
     f24:	51 e4       	ldi	r21, 0x41	; 65
     f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f2a:	dc 01       	movw	r26, r24
     f2c:	cb 01       	movw	r24, r22
     f2e:	8e 01       	movw	r16, r28
     f30:	07 5a       	subi	r16, 0xA7	; 167
     f32:	1f 4f       	sbci	r17, 0xFF	; 255
     f34:	bc 01       	movw	r22, r24
     f36:	cd 01       	movw	r24, r26
     f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	f8 01       	movw	r30, r16
     f42:	91 83       	std	Z+1, r25	; 0x01
     f44:	80 83       	st	Z, r24
     f46:	1f c0       	rjmp	.+62     	; 0xf86 <main+0x440>
     f48:	fe 01       	movw	r30, r28
     f4a:	e9 5a       	subi	r30, 0xA9	; 169
     f4c:	ff 4f       	sbci	r31, 0xFF	; 255
     f4e:	88 ec       	ldi	r24, 0xC8	; 200
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	91 83       	std	Z+1, r25	; 0x01
     f54:	80 83       	st	Z, r24
     f56:	fe 01       	movw	r30, r28
     f58:	e9 5a       	subi	r30, 0xA9	; 169
     f5a:	ff 4f       	sbci	r31, 0xFF	; 255
     f5c:	80 81       	ld	r24, Z
     f5e:	91 81       	ldd	r25, Z+1	; 0x01
     f60:	01 97       	sbiw	r24, 0x01	; 1
     f62:	f1 f7       	brne	.-4      	; 0xf60 <main+0x41a>
     f64:	fe 01       	movw	r30, r28
     f66:	e9 5a       	subi	r30, 0xA9	; 169
     f68:	ff 4f       	sbci	r31, 0xFF	; 255
     f6a:	91 83       	std	Z+1, r25	; 0x01
     f6c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f6e:	de 01       	movw	r26, r28
     f70:	a7 5a       	subi	r26, 0xA7	; 167
     f72:	bf 4f       	sbci	r27, 0xFF	; 255
     f74:	fe 01       	movw	r30, r28
     f76:	e7 5a       	subi	r30, 0xA7	; 167
     f78:	ff 4f       	sbci	r31, 0xFF	; 255
     f7a:	80 81       	ld	r24, Z
     f7c:	91 81       	ldd	r25, Z+1	; 0x01
     f7e:	01 97       	sbiw	r24, 0x01	; 1
     f80:	11 96       	adiw	r26, 0x01	; 1
     f82:	9c 93       	st	X, r25
     f84:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f86:	fe 01       	movw	r30, r28
     f88:	e7 5a       	subi	r30, 0xA7	; 167
     f8a:	ff 4f       	sbci	r31, 0xFF	; 255
     f8c:	80 81       	ld	r24, Z
     f8e:	91 81       	ldd	r25, Z+1	; 0x01
     f90:	00 97       	sbiw	r24, 0x00	; 0
     f92:	d1 f6       	brne	.-76     	; 0xf48 <main+0x402>
     f94:	27 c0       	rjmp	.+78     	; 0xfe4 <main+0x49e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f96:	8e 01       	movw	r16, r28
     f98:	07 5a       	subi	r16, 0xA7	; 167
     f9a:	1f 4f       	sbci	r17, 0xFF	; 255
     f9c:	fe 01       	movw	r30, r28
     f9e:	e5 5a       	subi	r30, 0xA5	; 165
     fa0:	ff 4f       	sbci	r31, 0xFF	; 255
     fa2:	60 81       	ld	r22, Z
     fa4:	71 81       	ldd	r23, Z+1	; 0x01
     fa6:	82 81       	ldd	r24, Z+2	; 0x02
     fa8:	93 81       	ldd	r25, Z+3	; 0x03
     faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fae:	dc 01       	movw	r26, r24
     fb0:	cb 01       	movw	r24, r22
     fb2:	f8 01       	movw	r30, r16
     fb4:	91 83       	std	Z+1, r25	; 0x01
     fb6:	80 83       	st	Z, r24
     fb8:	de 01       	movw	r26, r28
     fba:	ab 5a       	subi	r26, 0xAB	; 171
     fbc:	bf 4f       	sbci	r27, 0xFF	; 255
     fbe:	fe 01       	movw	r30, r28
     fc0:	e7 5a       	subi	r30, 0xA7	; 167
     fc2:	ff 4f       	sbci	r31, 0xFF	; 255
     fc4:	80 81       	ld	r24, Z
     fc6:	91 81       	ldd	r25, Z+1	; 0x01
     fc8:	8d 93       	st	X+, r24
     fca:	9c 93       	st	X, r25
     fcc:	fe 01       	movw	r30, r28
     fce:	eb 5a       	subi	r30, 0xAB	; 171
     fd0:	ff 4f       	sbci	r31, 0xFF	; 255
     fd2:	80 81       	ld	r24, Z
     fd4:	91 81       	ldd	r25, Z+1	; 0x01
     fd6:	01 97       	sbiw	r24, 0x01	; 1
     fd8:	f1 f7       	brne	.-4      	; 0xfd6 <main+0x490>
     fda:	fe 01       	movw	r30, r28
     fdc:	eb 5a       	subi	r30, 0xAB	; 171
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	91 83       	std	Z+1, r25	; 0x01
     fe2:	80 83       	st	Z, r24
			_delay_ms(10);
			LCD_clearScreen();
     fe4:	0e 94 1b 19 	call	0x3236	; 0x3236 <LCD_clearScreen>

			Receive_from_control();
     fe8:	0e 94 a5 0c 	call	0x194a	; 0x194a <Receive_from_control>
			LCD_goToRowColumn(1,0);
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	60 e0       	ldi	r22, 0x00	; 0
     ff0:	0e 94 9d 18 	call	0x313a	; 0x313a <LCD_goToRowColumn>
			Receive_from_control();
     ff4:	0e 94 a5 0c 	call	0x194a	; 0x194a <Receive_from_control>
     ff8:	09 c0       	rjmp	.+18     	; 0x100c <main+0x4c6>

		}
		else{
			//entered passwords not identical
			Receive_from_control();
     ffa:	0e 94 a5 0c 	call	0x194a	; 0x194a <Receive_from_control>
			LCD_goToRowColumn(1,0);
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	60 e0       	ldi	r22, 0x00	; 0
    1002:	0e 94 9d 18 	call	0x313a	; 0x313a <LCD_goToRowColumn>
			Receive_from_control();
    1006:	0e 94 a5 0c 	call	0x194a	; 0x194a <Receive_from_control>
    100a:	be cd       	rjmp	.-1156   	; 0xb88 <main+0x42>
			goto loop;
		}

loop2:	//choosing the option
		key = KeyPad_getPressedKey();
    100c:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <KeyPad_getPressedKey>
    1010:	fe 01       	movw	r30, r28
    1012:	ef 57       	subi	r30, 0x7F	; 127
    1014:	ff 4f       	sbci	r31, 0xFF	; 255
    1016:	80 83       	st	Z, r24
		if (key != '*' && key != '%')
    1018:	fe 01       	movw	r30, r28
    101a:	ef 57       	subi	r30, 0x7F	; 127
    101c:	ff 4f       	sbci	r31, 0xFF	; 255
    101e:	80 81       	ld	r24, Z
    1020:	8a 32       	cpi	r24, 0x2A	; 42
    1022:	31 f0       	breq	.+12     	; 0x1030 <main+0x4ea>
    1024:	fe 01       	movw	r30, r28
    1026:	ef 57       	subi	r30, 0x7F	; 127
    1028:	ff 4f       	sbci	r31, 0xFF	; 255
    102a:	80 81       	ld	r24, Z
    102c:	85 32       	cpi	r24, 0x25	; 37
    102e:	71 f7       	brne	.-36     	; 0x100c <main+0x4c6>
    1030:	fe 01       	movw	r30, r28
    1032:	ef 5a       	subi	r30, 0xAF	; 175
    1034:	ff 4f       	sbci	r31, 0xFF	; 255
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	a0 e2       	ldi	r26, 0x20	; 32
    103c:	b1 e4       	ldi	r27, 0x41	; 65
    103e:	80 83       	st	Z, r24
    1040:	91 83       	std	Z+1, r25	; 0x01
    1042:	a2 83       	std	Z+2, r26	; 0x02
    1044:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1046:	8e 01       	movw	r16, r28
    1048:	03 5b       	subi	r16, 0xB3	; 179
    104a:	1f 4f       	sbci	r17, 0xFF	; 255
    104c:	fe 01       	movw	r30, r28
    104e:	ef 5a       	subi	r30, 0xAF	; 175
    1050:	ff 4f       	sbci	r31, 0xFF	; 255
    1052:	60 81       	ld	r22, Z
    1054:	71 81       	ldd	r23, Z+1	; 0x01
    1056:	82 81       	ldd	r24, Z+2	; 0x02
    1058:	93 81       	ldd	r25, Z+3	; 0x03
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	4a ef       	ldi	r20, 0xFA	; 250
    1060:	54 e4       	ldi	r21, 0x44	; 68
    1062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1066:	dc 01       	movw	r26, r24
    1068:	cb 01       	movw	r24, r22
    106a:	f8 01       	movw	r30, r16
    106c:	80 83       	st	Z, r24
    106e:	91 83       	std	Z+1, r25	; 0x01
    1070:	a2 83       	std	Z+2, r26	; 0x02
    1072:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1074:	fe 01       	movw	r30, r28
    1076:	e3 5b       	subi	r30, 0xB3	; 179
    1078:	ff 4f       	sbci	r31, 0xFF	; 255
    107a:	60 81       	ld	r22, Z
    107c:	71 81       	ldd	r23, Z+1	; 0x01
    107e:	82 81       	ldd	r24, Z+2	; 0x02
    1080:	93 81       	ldd	r25, Z+3	; 0x03
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	40 e8       	ldi	r20, 0x80	; 128
    1088:	5f e3       	ldi	r21, 0x3F	; 63
    108a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    108e:	88 23       	and	r24, r24
    1090:	44 f4       	brge	.+16     	; 0x10a2 <main+0x55c>
		__ticks = 1;
    1092:	fe 01       	movw	r30, r28
    1094:	e5 5b       	subi	r30, 0xB5	; 181
    1096:	ff 4f       	sbci	r31, 0xFF	; 255
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	91 83       	std	Z+1, r25	; 0x01
    109e:	80 83       	st	Z, r24
    10a0:	64 c0       	rjmp	.+200    	; 0x116a <main+0x624>
	else if (__tmp > 65535)
    10a2:	fe 01       	movw	r30, r28
    10a4:	e3 5b       	subi	r30, 0xB3	; 179
    10a6:	ff 4f       	sbci	r31, 0xFF	; 255
    10a8:	60 81       	ld	r22, Z
    10aa:	71 81       	ldd	r23, Z+1	; 0x01
    10ac:	82 81       	ldd	r24, Z+2	; 0x02
    10ae:	93 81       	ldd	r25, Z+3	; 0x03
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	3f ef       	ldi	r19, 0xFF	; 255
    10b4:	4f e7       	ldi	r20, 0x7F	; 127
    10b6:	57 e4       	ldi	r21, 0x47	; 71
    10b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10bc:	18 16       	cp	r1, r24
    10be:	0c f0       	brlt	.+2      	; 0x10c2 <main+0x57c>
    10c0:	43 c0       	rjmp	.+134    	; 0x1148 <main+0x602>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c2:	fe 01       	movw	r30, r28
    10c4:	ef 5a       	subi	r30, 0xAF	; 175
    10c6:	ff 4f       	sbci	r31, 0xFF	; 255
    10c8:	60 81       	ld	r22, Z
    10ca:	71 81       	ldd	r23, Z+1	; 0x01
    10cc:	82 81       	ldd	r24, Z+2	; 0x02
    10ce:	93 81       	ldd	r25, Z+3	; 0x03
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	40 e2       	ldi	r20, 0x20	; 32
    10d6:	51 e4       	ldi	r21, 0x41	; 65
    10d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10dc:	dc 01       	movw	r26, r24
    10de:	cb 01       	movw	r24, r22
    10e0:	8e 01       	movw	r16, r28
    10e2:	05 5b       	subi	r16, 0xB5	; 181
    10e4:	1f 4f       	sbci	r17, 0xFF	; 255
    10e6:	bc 01       	movw	r22, r24
    10e8:	cd 01       	movw	r24, r26
    10ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ee:	dc 01       	movw	r26, r24
    10f0:	cb 01       	movw	r24, r22
    10f2:	f8 01       	movw	r30, r16
    10f4:	91 83       	std	Z+1, r25	; 0x01
    10f6:	80 83       	st	Z, r24
    10f8:	1f c0       	rjmp	.+62     	; 0x1138 <main+0x5f2>
    10fa:	fe 01       	movw	r30, r28
    10fc:	e7 5b       	subi	r30, 0xB7	; 183
    10fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1100:	88 ec       	ldi	r24, 0xC8	; 200
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	91 83       	std	Z+1, r25	; 0x01
    1106:	80 83       	st	Z, r24
    1108:	fe 01       	movw	r30, r28
    110a:	e7 5b       	subi	r30, 0xB7	; 183
    110c:	ff 4f       	sbci	r31, 0xFF	; 255
    110e:	80 81       	ld	r24, Z
    1110:	91 81       	ldd	r25, Z+1	; 0x01
    1112:	01 97       	sbiw	r24, 0x01	; 1
    1114:	f1 f7       	brne	.-4      	; 0x1112 <main+0x5cc>
    1116:	fe 01       	movw	r30, r28
    1118:	e7 5b       	subi	r30, 0xB7	; 183
    111a:	ff 4f       	sbci	r31, 0xFF	; 255
    111c:	91 83       	std	Z+1, r25	; 0x01
    111e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1120:	de 01       	movw	r26, r28
    1122:	a5 5b       	subi	r26, 0xB5	; 181
    1124:	bf 4f       	sbci	r27, 0xFF	; 255
    1126:	fe 01       	movw	r30, r28
    1128:	e5 5b       	subi	r30, 0xB5	; 181
    112a:	ff 4f       	sbci	r31, 0xFF	; 255
    112c:	80 81       	ld	r24, Z
    112e:	91 81       	ldd	r25, Z+1	; 0x01
    1130:	01 97       	sbiw	r24, 0x01	; 1
    1132:	11 96       	adiw	r26, 0x01	; 1
    1134:	9c 93       	st	X, r25
    1136:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1138:	fe 01       	movw	r30, r28
    113a:	e5 5b       	subi	r30, 0xB5	; 181
    113c:	ff 4f       	sbci	r31, 0xFF	; 255
    113e:	80 81       	ld	r24, Z
    1140:	91 81       	ldd	r25, Z+1	; 0x01
    1142:	00 97       	sbiw	r24, 0x00	; 0
    1144:	d1 f6       	brne	.-76     	; 0x10fa <main+0x5b4>
    1146:	27 c0       	rjmp	.+78     	; 0x1196 <main+0x650>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1148:	8e 01       	movw	r16, r28
    114a:	05 5b       	subi	r16, 0xB5	; 181
    114c:	1f 4f       	sbci	r17, 0xFF	; 255
    114e:	fe 01       	movw	r30, r28
    1150:	e3 5b       	subi	r30, 0xB3	; 179
    1152:	ff 4f       	sbci	r31, 0xFF	; 255
    1154:	60 81       	ld	r22, Z
    1156:	71 81       	ldd	r23, Z+1	; 0x01
    1158:	82 81       	ldd	r24, Z+2	; 0x02
    115a:	93 81       	ldd	r25, Z+3	; 0x03
    115c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	f8 01       	movw	r30, r16
    1166:	91 83       	std	Z+1, r25	; 0x01
    1168:	80 83       	st	Z, r24
    116a:	de 01       	movw	r26, r28
    116c:	a9 5b       	subi	r26, 0xB9	; 185
    116e:	bf 4f       	sbci	r27, 0xFF	; 255
    1170:	fe 01       	movw	r30, r28
    1172:	e5 5b       	subi	r30, 0xB5	; 181
    1174:	ff 4f       	sbci	r31, 0xFF	; 255
    1176:	80 81       	ld	r24, Z
    1178:	91 81       	ldd	r25, Z+1	; 0x01
    117a:	8d 93       	st	X+, r24
    117c:	9c 93       	st	X, r25
    117e:	fe 01       	movw	r30, r28
    1180:	e9 5b       	subi	r30, 0xB9	; 185
    1182:	ff 4f       	sbci	r31, 0xFF	; 255
    1184:	80 81       	ld	r24, Z
    1186:	91 81       	ldd	r25, Z+1	; 0x01
    1188:	01 97       	sbiw	r24, 0x01	; 1
    118a:	f1 f7       	brne	.-4      	; 0x1188 <main+0x642>
    118c:	fe 01       	movw	r30, r28
    118e:	e9 5b       	subi	r30, 0xB9	; 185
    1190:	ff 4f       	sbci	r31, 0xFF	; 255
    1192:	91 83       	std	Z+1, r25	; 0x01
    1194:	80 83       	st	Z, r24
		{		goto loop2;}
		else {
			_delay_ms(10);
			LCD_clearScreen();
    1196:	0e 94 1b 19 	call	0x3236	; 0x3236 <LCD_clearScreen>
		}

		UART_sendByte(key);	//sending the option
    119a:	fe 01       	movw	r30, r28
    119c:	ef 57       	subi	r30, 0x7F	; 127
    119e:	ff 4f       	sbci	r31, 0xFF	; 255
    11a0:	80 81       	ld	r24, Z
    11a2:	0e 94 3f 19 	call	0x327e	; 0x327e <UART_sendByte>

		if (key == '*')	//Change password option
    11a6:	fe 01       	movw	r30, r28
    11a8:	ef 57       	subi	r30, 0x7F	; 127
    11aa:	ff 4f       	sbci	r31, 0xFF	; 255
    11ac:	80 81       	ld	r24, Z
    11ae:	8a 32       	cpi	r24, 0x2A	; 42
    11b0:	09 f0       	breq	.+2      	; 0x11b4 <main+0x66e>
    11b2:	4c c1       	rjmp	.+664    	; 0x144c <main+0x906>
		{

				check=0;
    11b4:	fe 01       	movw	r30, r28
    11b6:	e1 58       	subi	r30, 0x81	; 129
    11b8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ba:	10 82       	st	Z, r1
			check1:
    11bc:	fe 01       	movw	r30, r28
    11be:	ed 5b       	subi	r30, 0xBD	; 189
    11c0:	ff 4f       	sbci	r31, 0xFF	; 255
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	a0 e2       	ldi	r26, 0x20	; 32
    11c8:	b1 e4       	ldi	r27, 0x41	; 65
    11ca:	80 83       	st	Z, r24
    11cc:	91 83       	std	Z+1, r25	; 0x01
    11ce:	a2 83       	std	Z+2, r26	; 0x02
    11d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11d2:	8e 01       	movw	r16, r28
    11d4:	01 5c       	subi	r16, 0xC1	; 193
    11d6:	1f 4f       	sbci	r17, 0xFF	; 255
    11d8:	fe 01       	movw	r30, r28
    11da:	ed 5b       	subi	r30, 0xBD	; 189
    11dc:	ff 4f       	sbci	r31, 0xFF	; 255
    11de:	60 81       	ld	r22, Z
    11e0:	71 81       	ldd	r23, Z+1	; 0x01
    11e2:	82 81       	ldd	r24, Z+2	; 0x02
    11e4:	93 81       	ldd	r25, Z+3	; 0x03
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	4a ef       	ldi	r20, 0xFA	; 250
    11ec:	54 e4       	ldi	r21, 0x44	; 68
    11ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11f2:	dc 01       	movw	r26, r24
    11f4:	cb 01       	movw	r24, r22
    11f6:	f8 01       	movw	r30, r16
    11f8:	80 83       	st	Z, r24
    11fa:	91 83       	std	Z+1, r25	; 0x01
    11fc:	a2 83       	std	Z+2, r26	; 0x02
    11fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1200:	fe 01       	movw	r30, r28
    1202:	ff 96       	adiw	r30, 0x3f	; 63
    1204:	60 81       	ld	r22, Z
    1206:	71 81       	ldd	r23, Z+1	; 0x01
    1208:	82 81       	ldd	r24, Z+2	; 0x02
    120a:	93 81       	ldd	r25, Z+3	; 0x03
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	40 e8       	ldi	r20, 0x80	; 128
    1212:	5f e3       	ldi	r21, 0x3F	; 63
    1214:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1218:	88 23       	and	r24, r24
    121a:	2c f4       	brge	.+10     	; 0x1226 <main+0x6e0>
		__ticks = 1;
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	9e af       	std	Y+62, r25	; 0x3e
    1222:	8d af       	std	Y+61, r24	; 0x3d
    1224:	46 c0       	rjmp	.+140    	; 0x12b2 <main+0x76c>
	else if (__tmp > 65535)
    1226:	fe 01       	movw	r30, r28
    1228:	ff 96       	adiw	r30, 0x3f	; 63
    122a:	60 81       	ld	r22, Z
    122c:	71 81       	ldd	r23, Z+1	; 0x01
    122e:	82 81       	ldd	r24, Z+2	; 0x02
    1230:	93 81       	ldd	r25, Z+3	; 0x03
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	3f ef       	ldi	r19, 0xFF	; 255
    1236:	4f e7       	ldi	r20, 0x7F	; 127
    1238:	57 e4       	ldi	r21, 0x47	; 71
    123a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    123e:	18 16       	cp	r1, r24
    1240:	64 f5       	brge	.+88     	; 0x129a <main+0x754>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1242:	fe 01       	movw	r30, r28
    1244:	ed 5b       	subi	r30, 0xBD	; 189
    1246:	ff 4f       	sbci	r31, 0xFF	; 255
    1248:	60 81       	ld	r22, Z
    124a:	71 81       	ldd	r23, Z+1	; 0x01
    124c:	82 81       	ldd	r24, Z+2	; 0x02
    124e:	93 81       	ldd	r25, Z+3	; 0x03
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	40 e2       	ldi	r20, 0x20	; 32
    1256:	51 e4       	ldi	r21, 0x41	; 65
    1258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    125c:	dc 01       	movw	r26, r24
    125e:	cb 01       	movw	r24, r22
    1260:	bc 01       	movw	r22, r24
    1262:	cd 01       	movw	r24, r26
    1264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1268:	dc 01       	movw	r26, r24
    126a:	cb 01       	movw	r24, r22
    126c:	9e af       	std	Y+62, r25	; 0x3e
    126e:	8d af       	std	Y+61, r24	; 0x3d
    1270:	0f c0       	rjmp	.+30     	; 0x1290 <main+0x74a>
    1272:	88 ec       	ldi	r24, 0xC8	; 200
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	9c af       	std	Y+60, r25	; 0x3c
    1278:	8b af       	std	Y+59, r24	; 0x3b
    127a:	8b ad       	ldd	r24, Y+59	; 0x3b
    127c:	9c ad       	ldd	r25, Y+60	; 0x3c
    127e:	01 97       	sbiw	r24, 0x01	; 1
    1280:	f1 f7       	brne	.-4      	; 0x127e <main+0x738>
    1282:	9c af       	std	Y+60, r25	; 0x3c
    1284:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1286:	8d ad       	ldd	r24, Y+61	; 0x3d
    1288:	9e ad       	ldd	r25, Y+62	; 0x3e
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	9e af       	std	Y+62, r25	; 0x3e
    128e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1290:	8d ad       	ldd	r24, Y+61	; 0x3d
    1292:	9e ad       	ldd	r25, Y+62	; 0x3e
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	69 f7       	brne	.-38     	; 0x1272 <main+0x72c>
    1298:	16 c0       	rjmp	.+44     	; 0x12c6 <main+0x780>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    129a:	fe 01       	movw	r30, r28
    129c:	ff 96       	adiw	r30, 0x3f	; 63
    129e:	60 81       	ld	r22, Z
    12a0:	71 81       	ldd	r23, Z+1	; 0x01
    12a2:	82 81       	ldd	r24, Z+2	; 0x02
    12a4:	93 81       	ldd	r25, Z+3	; 0x03
    12a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12aa:	dc 01       	movw	r26, r24
    12ac:	cb 01       	movw	r24, r22
    12ae:	9e af       	std	Y+62, r25	; 0x3e
    12b0:	8d af       	std	Y+61, r24	; 0x3d
    12b2:	8d ad       	ldd	r24, Y+61	; 0x3d
    12b4:	9e ad       	ldd	r25, Y+62	; 0x3e
    12b6:	9a af       	std	Y+58, r25	; 0x3a
    12b8:	89 af       	std	Y+57, r24	; 0x39
    12ba:	89 ad       	ldd	r24, Y+57	; 0x39
    12bc:	9a ad       	ldd	r25, Y+58	; 0x3a
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	f1 f7       	brne	.-4      	; 0x12be <main+0x778>
    12c2:	9a af       	std	Y+58, r25	; 0x3a
    12c4:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(10);
				LCD_clearScreen();
    12c6:	0e 94 1b 19 	call	0x3236	; 0x3236 <LCD_clearScreen>

				check = UART_recieveByte();
    12ca:	0e 94 56 19 	call	0x32ac	; 0x32ac <UART_recieveByte>
    12ce:	fe 01       	movw	r30, r28
    12d0:	e1 58       	subi	r30, 0x81	; 129
    12d2:	ff 4f       	sbci	r31, 0xFF	; 255
    12d4:	80 83       	st	Z, r24

				if (check == 3)
    12d6:	fe 01       	movw	r30, r28
    12d8:	e1 58       	subi	r30, 0x81	; 129
    12da:	ff 4f       	sbci	r31, 0xFF	; 255
    12dc:	80 81       	ld	r24, Z
    12de:	83 30       	cpi	r24, 0x03	; 3
    12e0:	b1 f4       	brne	.+44     	; 0x130e <main+0x7c8>
				{
					//Handling wrong password
					check=0;
    12e2:	fe 01       	movw	r30, r28
    12e4:	e1 58       	subi	r30, 0x81	; 129
    12e6:	ff 4f       	sbci	r31, 0xFF	; 255
    12e8:	10 82       	st	Z, r1
					Receive_from_control();
    12ea:	0e 94 a5 0c 	call	0x194a	; 0x194a <Receive_from_control>
					LCD_goToRowColumn(1,0);
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	60 e0       	ldi	r22, 0x00	; 0
    12f2:	0e 94 9d 18 	call	0x313a	; 0x313a <LCD_goToRowColumn>
					Receive_from_control();
    12f6:	0e 94 a5 0c 	call	0x194a	; 0x194a <Receive_from_control>

					g_timer=1;	//timer for 1 minute
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	80 93 69 00 	sts	0x0069, r24
					g_tick=0;	//begin timing
    1300:	10 92 68 00 	sts	0x0068, r1
					while(g_flag!=1){}	//wait for 1 minute
    1304:	80 91 6a 00 	lds	r24, 0x006A
    1308:	81 30       	cpi	r24, 0x01	; 1
    130a:	e1 f7       	brne	.-8      	; 0x1304 <main+0x7be>
    130c:	b8 cd       	rjmp	.-1168   	; 0xe7e <main+0x338>
					goto menu;

				}else{

					//handling changing the password option
					check++;
    130e:	de 01       	movw	r26, r28
    1310:	a1 58       	subi	r26, 0x81	; 129
    1312:	bf 4f       	sbci	r27, 0xFF	; 255
    1314:	fe 01       	movw	r30, r28
    1316:	e1 58       	subi	r30, 0x81	; 129
    1318:	ff 4f       	sbci	r31, 0xFF	; 255
    131a:	80 81       	ld	r24, Z
    131c:	8f 5f       	subi	r24, 0xFF	; 255
    131e:	8c 93       	st	X, r24

					Receive_from_control();
    1320:	0e 94 a5 0c 	call	0x194a	; 0x194a <Receive_from_control>
					LCD_goToRowColumn(1,0);
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	60 e0       	ldi	r22, 0x00	; 0
    1328:	0e 94 9d 18 	call	0x313a	; 0x313a <LCD_goToRowColumn>
					Receive_from_control();
    132c:	0e 94 a5 0c 	call	0x194a	; 0x194a <Receive_from_control>
					LCD_goToRowColumn(1,10);
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	6a e0       	ldi	r22, 0x0A	; 10
    1334:	0e 94 9d 18 	call	0x313a	; 0x313a <LCD_goToRowColumn>

					enter_password(oldpass);
    1338:	ce 01       	movw	r24, r28
    133a:	8e 57       	subi	r24, 0x7E	; 126
    133c:	9f 4f       	sbci	r25, 0xFF	; 255
    133e:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <enter_password>
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	a0 e2       	ldi	r26, 0x20	; 32
    1348:	b1 e4       	ldi	r27, 0x41	; 65
    134a:	8d ab       	std	Y+53, r24	; 0x35
    134c:	9e ab       	std	Y+54, r25	; 0x36
    134e:	af ab       	std	Y+55, r26	; 0x37
    1350:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1352:	6d a9       	ldd	r22, Y+53	; 0x35
    1354:	7e a9       	ldd	r23, Y+54	; 0x36
    1356:	8f a9       	ldd	r24, Y+55	; 0x37
    1358:	98 ad       	ldd	r25, Y+56	; 0x38
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	4a ef       	ldi	r20, 0xFA	; 250
    1360:	54 e4       	ldi	r21, 0x44	; 68
    1362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	89 ab       	std	Y+49, r24	; 0x31
    136c:	9a ab       	std	Y+50, r25	; 0x32
    136e:	ab ab       	std	Y+51, r26	; 0x33
    1370:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1372:	69 a9       	ldd	r22, Y+49	; 0x31
    1374:	7a a9       	ldd	r23, Y+50	; 0x32
    1376:	8b a9       	ldd	r24, Y+51	; 0x33
    1378:	9c a9       	ldd	r25, Y+52	; 0x34
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	40 e8       	ldi	r20, 0x80	; 128
    1380:	5f e3       	ldi	r21, 0x3F	; 63
    1382:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1386:	88 23       	and	r24, r24
    1388:	2c f4       	brge	.+10     	; 0x1394 <main+0x84e>
		__ticks = 1;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	98 ab       	std	Y+48, r25	; 0x30
    1390:	8f a7       	std	Y+47, r24	; 0x2f
    1392:	3f c0       	rjmp	.+126    	; 0x1412 <main+0x8cc>
	else if (__tmp > 65535)
    1394:	69 a9       	ldd	r22, Y+49	; 0x31
    1396:	7a a9       	ldd	r23, Y+50	; 0x32
    1398:	8b a9       	ldd	r24, Y+51	; 0x33
    139a:	9c a9       	ldd	r25, Y+52	; 0x34
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	3f ef       	ldi	r19, 0xFF	; 255
    13a0:	4f e7       	ldi	r20, 0x7F	; 127
    13a2:	57 e4       	ldi	r21, 0x47	; 71
    13a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13a8:	18 16       	cp	r1, r24
    13aa:	4c f5       	brge	.+82     	; 0x13fe <main+0x8b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ac:	6d a9       	ldd	r22, Y+53	; 0x35
    13ae:	7e a9       	ldd	r23, Y+54	; 0x36
    13b0:	8f a9       	ldd	r24, Y+55	; 0x37
    13b2:	98 ad       	ldd	r25, Y+56	; 0x38
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	40 e2       	ldi	r20, 0x20	; 32
    13ba:	51 e4       	ldi	r21, 0x41	; 65
    13bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	bc 01       	movw	r22, r24
    13c6:	cd 01       	movw	r24, r26
    13c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	98 ab       	std	Y+48, r25	; 0x30
    13d2:	8f a7       	std	Y+47, r24	; 0x2f
    13d4:	0f c0       	rjmp	.+30     	; 0x13f4 <main+0x8ae>
    13d6:	88 ec       	ldi	r24, 0xC8	; 200
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	9e a7       	std	Y+46, r25	; 0x2e
    13dc:	8d a7       	std	Y+45, r24	; 0x2d
    13de:	8d a5       	ldd	r24, Y+45	; 0x2d
    13e0:	9e a5       	ldd	r25, Y+46	; 0x2e
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	f1 f7       	brne	.-4      	; 0x13e2 <main+0x89c>
    13e6:	9e a7       	std	Y+46, r25	; 0x2e
    13e8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    13ec:	98 a9       	ldd	r25, Y+48	; 0x30
    13ee:	01 97       	sbiw	r24, 0x01	; 1
    13f0:	98 ab       	std	Y+48, r25	; 0x30
    13f2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    13f6:	98 a9       	ldd	r25, Y+48	; 0x30
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	69 f7       	brne	.-38     	; 0x13d6 <main+0x890>
    13fc:	14 c0       	rjmp	.+40     	; 0x1426 <main+0x8e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13fe:	69 a9       	ldd	r22, Y+49	; 0x31
    1400:	7a a9       	ldd	r23, Y+50	; 0x32
    1402:	8b a9       	ldd	r24, Y+51	; 0x33
    1404:	9c a9       	ldd	r25, Y+52	; 0x34
    1406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	98 ab       	std	Y+48, r25	; 0x30
    1410:	8f a7       	std	Y+47, r24	; 0x2f
    1412:	8f a5       	ldd	r24, Y+47	; 0x2f
    1414:	98 a9       	ldd	r25, Y+48	; 0x30
    1416:	9c a7       	std	Y+44, r25	; 0x2c
    1418:	8b a7       	std	Y+43, r24	; 0x2b
    141a:	8b a5       	ldd	r24, Y+43	; 0x2b
    141c:	9c a5       	ldd	r25, Y+44	; 0x2c
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	f1 f7       	brne	.-4      	; 0x141e <main+0x8d8>
    1422:	9c a7       	std	Y+44, r25	; 0x2c
    1424:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(10);
					UART_sendString(oldpass);
    1426:	ce 01       	movw	r24, r28
    1428:	8e 57       	subi	r24, 0x7E	; 126
    142a:	9f 4f       	sbci	r25, 0xFF	; 255
    142c:	0e 94 65 19 	call	0x32ca	; 0x32ca <UART_sendString>

					//comparing the entered password with saved one
					compare = UART_recieveByte();
    1430:	0e 94 56 19 	call	0x32ac	; 0x32ac <UART_recieveByte>
    1434:	fe 01       	movw	r30, r28
    1436:	e0 58       	subi	r30, 0x80	; 128
    1438:	ff 4f       	sbci	r31, 0xFF	; 255
    143a:	80 83       	st	Z, r24
					if (compare==0)
    143c:	fe 01       	movw	r30, r28
    143e:	e0 58       	subi	r30, 0x80	; 128
    1440:	ff 4f       	sbci	r31, 0xFF	; 255
    1442:	80 81       	ld	r24, Z
    1444:	88 23       	and	r24, r24
    1446:	09 f4       	brne	.+2      	; 0x144a <main+0x904>
    1448:	9f cb       	rjmp	.-2242   	; 0xb88 <main+0x42>
    144a:	b8 ce       	rjmp	.-656    	; 0x11bc <main+0x676>
						goto check1;
					}
				}
		}

		if (key == '%')		//open door option
    144c:	fe 01       	movw	r30, r28
    144e:	ef 57       	subi	r30, 0x7F	; 127
    1450:	ff 4f       	sbci	r31, 0xFF	; 255
    1452:	80 81       	ld	r24, Z
    1454:	85 32       	cpi	r24, 0x25	; 37
    1456:	09 f0       	breq	.+2      	; 0x145a <main+0x914>
    1458:	cd c1       	rjmp	.+922    	; 0x17f4 <main+0xcae>
		{
				check=0;
    145a:	fe 01       	movw	r30, r28
    145c:	e1 58       	subi	r30, 0x81	; 129
    145e:	ff 4f       	sbci	r31, 0xFF	; 255
    1460:	10 82       	st	Z, r1
			check2:
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	a0 e2       	ldi	r26, 0x20	; 32
    1468:	b1 e4       	ldi	r27, 0x41	; 65
    146a:	8f a3       	std	Y+39, r24	; 0x27
    146c:	98 a7       	std	Y+40, r25	; 0x28
    146e:	a9 a7       	std	Y+41, r26	; 0x29
    1470:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1472:	6f a1       	ldd	r22, Y+39	; 0x27
    1474:	78 a5       	ldd	r23, Y+40	; 0x28
    1476:	89 a5       	ldd	r24, Y+41	; 0x29
    1478:	9a a5       	ldd	r25, Y+42	; 0x2a
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	4a ef       	ldi	r20, 0xFA	; 250
    1480:	54 e4       	ldi	r21, 0x44	; 68
    1482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	8b a3       	std	Y+35, r24	; 0x23
    148c:	9c a3       	std	Y+36, r25	; 0x24
    148e:	ad a3       	std	Y+37, r26	; 0x25
    1490:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1492:	6b a1       	ldd	r22, Y+35	; 0x23
    1494:	7c a1       	ldd	r23, Y+36	; 0x24
    1496:	8d a1       	ldd	r24, Y+37	; 0x25
    1498:	9e a1       	ldd	r25, Y+38	; 0x26
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	40 e8       	ldi	r20, 0x80	; 128
    14a0:	5f e3       	ldi	r21, 0x3F	; 63
    14a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14a6:	88 23       	and	r24, r24
    14a8:	2c f4       	brge	.+10     	; 0x14b4 <main+0x96e>
		__ticks = 1;
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	9a a3       	std	Y+34, r25	; 0x22
    14b0:	89 a3       	std	Y+33, r24	; 0x21
    14b2:	3f c0       	rjmp	.+126    	; 0x1532 <main+0x9ec>
	else if (__tmp > 65535)
    14b4:	6b a1       	ldd	r22, Y+35	; 0x23
    14b6:	7c a1       	ldd	r23, Y+36	; 0x24
    14b8:	8d a1       	ldd	r24, Y+37	; 0x25
    14ba:	9e a1       	ldd	r25, Y+38	; 0x26
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	3f ef       	ldi	r19, 0xFF	; 255
    14c0:	4f e7       	ldi	r20, 0x7F	; 127
    14c2:	57 e4       	ldi	r21, 0x47	; 71
    14c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14c8:	18 16       	cp	r1, r24
    14ca:	4c f5       	brge	.+82     	; 0x151e <main+0x9d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14cc:	6f a1       	ldd	r22, Y+39	; 0x27
    14ce:	78 a5       	ldd	r23, Y+40	; 0x28
    14d0:	89 a5       	ldd	r24, Y+41	; 0x29
    14d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	40 e2       	ldi	r20, 0x20	; 32
    14da:	51 e4       	ldi	r21, 0x41	; 65
    14dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e0:	dc 01       	movw	r26, r24
    14e2:	cb 01       	movw	r24, r22
    14e4:	bc 01       	movw	r22, r24
    14e6:	cd 01       	movw	r24, r26
    14e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	9a a3       	std	Y+34, r25	; 0x22
    14f2:	89 a3       	std	Y+33, r24	; 0x21
    14f4:	0f c0       	rjmp	.+30     	; 0x1514 <main+0x9ce>
    14f6:	88 ec       	ldi	r24, 0xC8	; 200
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	98 a3       	std	Y+32, r25	; 0x20
    14fc:	8f 8f       	std	Y+31, r24	; 0x1f
    14fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1500:	98 a1       	ldd	r25, Y+32	; 0x20
    1502:	01 97       	sbiw	r24, 0x01	; 1
    1504:	f1 f7       	brne	.-4      	; 0x1502 <main+0x9bc>
    1506:	98 a3       	std	Y+32, r25	; 0x20
    1508:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    150a:	89 a1       	ldd	r24, Y+33	; 0x21
    150c:	9a a1       	ldd	r25, Y+34	; 0x22
    150e:	01 97       	sbiw	r24, 0x01	; 1
    1510:	9a a3       	std	Y+34, r25	; 0x22
    1512:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1514:	89 a1       	ldd	r24, Y+33	; 0x21
    1516:	9a a1       	ldd	r25, Y+34	; 0x22
    1518:	00 97       	sbiw	r24, 0x00	; 0
    151a:	69 f7       	brne	.-38     	; 0x14f6 <main+0x9b0>
    151c:	14 c0       	rjmp	.+40     	; 0x1546 <main+0xa00>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    151e:	6b a1       	ldd	r22, Y+35	; 0x23
    1520:	7c a1       	ldd	r23, Y+36	; 0x24
    1522:	8d a1       	ldd	r24, Y+37	; 0x25
    1524:	9e a1       	ldd	r25, Y+38	; 0x26
    1526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	9a a3       	std	Y+34, r25	; 0x22
    1530:	89 a3       	std	Y+33, r24	; 0x21
    1532:	89 a1       	ldd	r24, Y+33	; 0x21
    1534:	9a a1       	ldd	r25, Y+34	; 0x22
    1536:	9e 8f       	std	Y+30, r25	; 0x1e
    1538:	8d 8f       	std	Y+29, r24	; 0x1d
    153a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    153c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    153e:	01 97       	sbiw	r24, 0x01	; 1
    1540:	f1 f7       	brne	.-4      	; 0x153e <main+0x9f8>
    1542:	9e 8f       	std	Y+30, r25	; 0x1e
    1544:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(10);
				LCD_clearScreen();
    1546:	0e 94 1b 19 	call	0x3236	; 0x3236 <LCD_clearScreen>

				check = UART_recieveByte();
    154a:	0e 94 56 19 	call	0x32ac	; 0x32ac <UART_recieveByte>
    154e:	fe 01       	movw	r30, r28
    1550:	e1 58       	subi	r30, 0x81	; 129
    1552:	ff 4f       	sbci	r31, 0xFF	; 255
    1554:	80 83       	st	Z, r24

				if (check == 3)
    1556:	fe 01       	movw	r30, r28
    1558:	e1 58       	subi	r30, 0x81	; 129
    155a:	ff 4f       	sbci	r31, 0xFF	; 255
    155c:	80 81       	ld	r24, Z
    155e:	83 30       	cpi	r24, 0x03	; 3
    1560:	b1 f4       	brne	.+44     	; 0x158e <main+0xa48>
				{
					//Handling Wrong password
					check=0;
    1562:	fe 01       	movw	r30, r28
    1564:	e1 58       	subi	r30, 0x81	; 129
    1566:	ff 4f       	sbci	r31, 0xFF	; 255
    1568:	10 82       	st	Z, r1
					Receive_from_control();
    156a:	0e 94 a5 0c 	call	0x194a	; 0x194a <Receive_from_control>
					LCD_goToRowColumn(1,0);
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	60 e0       	ldi	r22, 0x00	; 0
    1572:	0e 94 9d 18 	call	0x313a	; 0x313a <LCD_goToRowColumn>
					Receive_from_control();
    1576:	0e 94 a5 0c 	call	0x194a	; 0x194a <Receive_from_control>

					g_timer=1;	//timer for 1 minute
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	80 93 69 00 	sts	0x0069, r24
					g_tick=0;	//begin timing
    1580:	10 92 68 00 	sts	0x0068, r1
					while(g_flag!=1){}	//wait for 1 minute
    1584:	80 91 6a 00 	lds	r24, 0x006A
    1588:	81 30       	cpi	r24, 0x01	; 1
    158a:	e1 f7       	brne	.-8      	; 0x1584 <main+0xa3e>
    158c:	78 cc       	rjmp	.-1808   	; 0xe7e <main+0x338>
					goto menu;

				}else{

					//handling Door locking and unlocking
					check++;
    158e:	de 01       	movw	r26, r28
    1590:	a1 58       	subi	r26, 0x81	; 129
    1592:	bf 4f       	sbci	r27, 0xFF	; 255
    1594:	fe 01       	movw	r30, r28
    1596:	e1 58       	subi	r30, 0x81	; 129
    1598:	ff 4f       	sbci	r31, 0xFF	; 255
    159a:	80 81       	ld	r24, Z
    159c:	8f 5f       	subi	r24, 0xFF	; 255
    159e:	8c 93       	st	X, r24

					Receive_from_control();
    15a0:	0e 94 a5 0c 	call	0x194a	; 0x194a <Receive_from_control>
					LCD_goToRowColumn(1,0);
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	0e 94 9d 18 	call	0x313a	; 0x313a <LCD_goToRowColumn>
					Receive_from_control();
    15ac:	0e 94 a5 0c 	call	0x194a	; 0x194a <Receive_from_control>
					LCD_goToRowColumn(1,10);
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	6a e0       	ldi	r22, 0x0A	; 10
    15b4:	0e 94 9d 18 	call	0x313a	; 0x313a <LCD_goToRowColumn>

					enter_password(oldpass);
    15b8:	ce 01       	movw	r24, r28
    15ba:	8e 57       	subi	r24, 0x7E	; 126
    15bc:	9f 4f       	sbci	r25, 0xFF	; 255
    15be:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <enter_password>
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	a0 e2       	ldi	r26, 0x20	; 32
    15c8:	b1 e4       	ldi	r27, 0x41	; 65
    15ca:	89 8f       	std	Y+25, r24	; 0x19
    15cc:	9a 8f       	std	Y+26, r25	; 0x1a
    15ce:	ab 8f       	std	Y+27, r26	; 0x1b
    15d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d2:	69 8d       	ldd	r22, Y+25	; 0x19
    15d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	4a ef       	ldi	r20, 0xFA	; 250
    15e0:	54 e4       	ldi	r21, 0x44	; 68
    15e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e6:	dc 01       	movw	r26, r24
    15e8:	cb 01       	movw	r24, r22
    15ea:	8d 8b       	std	Y+21, r24	; 0x15
    15ec:	9e 8b       	std	Y+22, r25	; 0x16
    15ee:	af 8b       	std	Y+23, r26	; 0x17
    15f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15f2:	6d 89       	ldd	r22, Y+21	; 0x15
    15f4:	7e 89       	ldd	r23, Y+22	; 0x16
    15f6:	8f 89       	ldd	r24, Y+23	; 0x17
    15f8:	98 8d       	ldd	r25, Y+24	; 0x18
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	40 e8       	ldi	r20, 0x80	; 128
    1600:	5f e3       	ldi	r21, 0x3F	; 63
    1602:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1606:	88 23       	and	r24, r24
    1608:	2c f4       	brge	.+10     	; 0x1614 <main+0xace>
		__ticks = 1;
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	9c 8b       	std	Y+20, r25	; 0x14
    1610:	8b 8b       	std	Y+19, r24	; 0x13
    1612:	3f c0       	rjmp	.+126    	; 0x1692 <main+0xb4c>
	else if (__tmp > 65535)
    1614:	6d 89       	ldd	r22, Y+21	; 0x15
    1616:	7e 89       	ldd	r23, Y+22	; 0x16
    1618:	8f 89       	ldd	r24, Y+23	; 0x17
    161a:	98 8d       	ldd	r25, Y+24	; 0x18
    161c:	20 e0       	ldi	r18, 0x00	; 0
    161e:	3f ef       	ldi	r19, 0xFF	; 255
    1620:	4f e7       	ldi	r20, 0x7F	; 127
    1622:	57 e4       	ldi	r21, 0x47	; 71
    1624:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1628:	18 16       	cp	r1, r24
    162a:	4c f5       	brge	.+82     	; 0x167e <main+0xb38>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    162c:	69 8d       	ldd	r22, Y+25	; 0x19
    162e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1630:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1632:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	40 e2       	ldi	r20, 0x20	; 32
    163a:	51 e4       	ldi	r21, 0x41	; 65
    163c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	bc 01       	movw	r22, r24
    1646:	cd 01       	movw	r24, r26
    1648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	9c 8b       	std	Y+20, r25	; 0x14
    1652:	8b 8b       	std	Y+19, r24	; 0x13
    1654:	0f c0       	rjmp	.+30     	; 0x1674 <main+0xb2e>
    1656:	88 ec       	ldi	r24, 0xC8	; 200
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	9a 8b       	std	Y+18, r25	; 0x12
    165c:	89 8b       	std	Y+17, r24	; 0x11
    165e:	89 89       	ldd	r24, Y+17	; 0x11
    1660:	9a 89       	ldd	r25, Y+18	; 0x12
    1662:	01 97       	sbiw	r24, 0x01	; 1
    1664:	f1 f7       	brne	.-4      	; 0x1662 <main+0xb1c>
    1666:	9a 8b       	std	Y+18, r25	; 0x12
    1668:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    166a:	8b 89       	ldd	r24, Y+19	; 0x13
    166c:	9c 89       	ldd	r25, Y+20	; 0x14
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	9c 8b       	std	Y+20, r25	; 0x14
    1672:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1674:	8b 89       	ldd	r24, Y+19	; 0x13
    1676:	9c 89       	ldd	r25, Y+20	; 0x14
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	69 f7       	brne	.-38     	; 0x1656 <main+0xb10>
    167c:	14 c0       	rjmp	.+40     	; 0x16a6 <main+0xb60>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    167e:	6d 89       	ldd	r22, Y+21	; 0x15
    1680:	7e 89       	ldd	r23, Y+22	; 0x16
    1682:	8f 89       	ldd	r24, Y+23	; 0x17
    1684:	98 8d       	ldd	r25, Y+24	; 0x18
    1686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	9c 8b       	std	Y+20, r25	; 0x14
    1690:	8b 8b       	std	Y+19, r24	; 0x13
    1692:	8b 89       	ldd	r24, Y+19	; 0x13
    1694:	9c 89       	ldd	r25, Y+20	; 0x14
    1696:	98 8b       	std	Y+16, r25	; 0x10
    1698:	8f 87       	std	Y+15, r24	; 0x0f
    169a:	8f 85       	ldd	r24, Y+15	; 0x0f
    169c:	98 89       	ldd	r25, Y+16	; 0x10
    169e:	01 97       	sbiw	r24, 0x01	; 1
    16a0:	f1 f7       	brne	.-4      	; 0x169e <main+0xb58>
    16a2:	98 8b       	std	Y+16, r25	; 0x10
    16a4:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(10);
					UART_sendString(oldpass);
    16a6:	ce 01       	movw	r24, r28
    16a8:	8e 57       	subi	r24, 0x7E	; 126
    16aa:	9f 4f       	sbci	r25, 0xFF	; 255
    16ac:	0e 94 65 19 	call	0x32ca	; 0x32ca <UART_sendString>

					//comparing the entered password with saved one
					compare = UART_recieveByte();
    16b0:	0e 94 56 19 	call	0x32ac	; 0x32ac <UART_recieveByte>
    16b4:	fe 01       	movw	r30, r28
    16b6:	e0 58       	subi	r30, 0x80	; 128
    16b8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ba:	80 83       	st	Z, r24
					if (compare==0)
    16bc:	fe 01       	movw	r30, r28
    16be:	e0 58       	subi	r30, 0x80	; 128
    16c0:	ff 4f       	sbci	r31, 0xFF	; 255
    16c2:	80 81       	ld	r24, Z
    16c4:	88 23       	and	r24, r24
    16c6:	09 f0       	breq	.+2      	; 0x16ca <main+0xb84>
    16c8:	cc ce       	rjmp	.-616    	; 0x1462 <main+0x91c>
						g_tick=0;	//begin timing
						g_flag=0;
						goto menu;

					}else{
						goto check2;
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	a0 e2       	ldi	r26, 0x20	; 32
    16d0:	b1 e4       	ldi	r27, 0x41	; 65
    16d2:	8b 87       	std	Y+11, r24	; 0x0b
    16d4:	9c 87       	std	Y+12, r25	; 0x0c
    16d6:	ad 87       	std	Y+13, r26	; 0x0d
    16d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16da:	6b 85       	ldd	r22, Y+11	; 0x0b
    16dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    16de:	8d 85       	ldd	r24, Y+13	; 0x0d
    16e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	4a ef       	ldi	r20, 0xFA	; 250
    16e8:	54 e4       	ldi	r21, 0x44	; 68
    16ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ee:	dc 01       	movw	r26, r24
    16f0:	cb 01       	movw	r24, r22
    16f2:	8f 83       	std	Y+7, r24	; 0x07
    16f4:	98 87       	std	Y+8, r25	; 0x08
    16f6:	a9 87       	std	Y+9, r26	; 0x09
    16f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16fa:	6f 81       	ldd	r22, Y+7	; 0x07
    16fc:	78 85       	ldd	r23, Y+8	; 0x08
    16fe:	89 85       	ldd	r24, Y+9	; 0x09
    1700:	9a 85       	ldd	r25, Y+10	; 0x0a
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	40 e8       	ldi	r20, 0x80	; 128
    1708:	5f e3       	ldi	r21, 0x3F	; 63
    170a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    170e:	88 23       	and	r24, r24
    1710:	2c f4       	brge	.+10     	; 0x171c <main+0xbd6>
		__ticks = 1;
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	9e 83       	std	Y+6, r25	; 0x06
    1718:	8d 83       	std	Y+5, r24	; 0x05
    171a:	3f c0       	rjmp	.+126    	; 0x179a <main+0xc54>
	else if (__tmp > 65535)
    171c:	6f 81       	ldd	r22, Y+7	; 0x07
    171e:	78 85       	ldd	r23, Y+8	; 0x08
    1720:	89 85       	ldd	r24, Y+9	; 0x09
    1722:	9a 85       	ldd	r25, Y+10	; 0x0a
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	3f ef       	ldi	r19, 0xFF	; 255
    1728:	4f e7       	ldi	r20, 0x7F	; 127
    172a:	57 e4       	ldi	r21, 0x47	; 71
    172c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1730:	18 16       	cp	r1, r24
    1732:	4c f5       	brge	.+82     	; 0x1786 <main+0xc40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1734:	6b 85       	ldd	r22, Y+11	; 0x0b
    1736:	7c 85       	ldd	r23, Y+12	; 0x0c
    1738:	8d 85       	ldd	r24, Y+13	; 0x0d
    173a:	9e 85       	ldd	r25, Y+14	; 0x0e
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	40 e2       	ldi	r20, 0x20	; 32
    1742:	51 e4       	ldi	r21, 0x41	; 65
    1744:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	bc 01       	movw	r22, r24
    174e:	cd 01       	movw	r24, r26
    1750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	9e 83       	std	Y+6, r25	; 0x06
    175a:	8d 83       	std	Y+5, r24	; 0x05
    175c:	0f c0       	rjmp	.+30     	; 0x177c <main+0xc36>
    175e:	88 ec       	ldi	r24, 0xC8	; 200
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	9c 83       	std	Y+4, r25	; 0x04
    1764:	8b 83       	std	Y+3, r24	; 0x03
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	9c 81       	ldd	r25, Y+4	; 0x04
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	f1 f7       	brne	.-4      	; 0x176a <main+0xc24>
    176e:	9c 83       	std	Y+4, r25	; 0x04
    1770:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1772:	8d 81       	ldd	r24, Y+5	; 0x05
    1774:	9e 81       	ldd	r25, Y+6	; 0x06
    1776:	01 97       	sbiw	r24, 0x01	; 1
    1778:	9e 83       	std	Y+6, r25	; 0x06
    177a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    177c:	8d 81       	ldd	r24, Y+5	; 0x05
    177e:	9e 81       	ldd	r25, Y+6	; 0x06
    1780:	00 97       	sbiw	r24, 0x00	; 0
    1782:	69 f7       	brne	.-38     	; 0x175e <main+0xc18>
    1784:	14 c0       	rjmp	.+40     	; 0x17ae <main+0xc68>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1786:	6f 81       	ldd	r22, Y+7	; 0x07
    1788:	78 85       	ldd	r23, Y+8	; 0x08
    178a:	89 85       	ldd	r24, Y+9	; 0x09
    178c:	9a 85       	ldd	r25, Y+10	; 0x0a
    178e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	9e 83       	std	Y+6, r25	; 0x06
    1798:	8d 83       	std	Y+5, r24	; 0x05
    179a:	8d 81       	ldd	r24, Y+5	; 0x05
    179c:	9e 81       	ldd	r25, Y+6	; 0x06
    179e:	9a 83       	std	Y+2, r25	; 0x02
    17a0:	89 83       	std	Y+1, r24	; 0x01
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	9a 81       	ldd	r25, Y+2	; 0x02
    17a6:	01 97       	sbiw	r24, 0x01	; 1
    17a8:	f1 f7       	brne	.-4      	; 0x17a6 <main+0xc60>
    17aa:	9a 83       	std	Y+2, r25	; 0x02
    17ac:	89 83       	std	Y+1, r24	; 0x01
					compare = UART_recieveByte();
					if (compare==0)
					{
						//Locking the door
						_delay_ms(10);
						LCD_clearScreen();
    17ae:	0e 94 1b 19 	call	0x3236	; 0x3236 <LCD_clearScreen>
						Receive_from_control();
    17b2:	0e 94 a5 0c 	call	0x194a	; 0x194a <Receive_from_control>

						g_timer=2;	//timer for 15 seconds
    17b6:	82 e0       	ldi	r24, 0x02	; 2
    17b8:	80 93 69 00 	sts	0x0069, r24
						g_tick=0;	//begin timing
    17bc:	10 92 68 00 	sts	0x0068, r1
						while(g_flag!=2){}	//wait for 15 seconds
    17c0:	80 91 6a 00 	lds	r24, 0x006A
    17c4:	82 30       	cpi	r24, 0x02	; 2
    17c6:	e1 f7       	brne	.-8      	; 0x17c0 <main+0xc7a>

						LCD_clearScreen();
    17c8:	0e 94 1b 19 	call	0x3236	; 0x3236 <LCD_clearScreen>

						//UnLocking the door
						Receive_from_control();
    17cc:	0e 94 a5 0c 	call	0x194a	; 0x194a <Receive_from_control>

						g_timer=2;	//timer for 15 seconds
    17d0:	82 e0       	ldi	r24, 0x02	; 2
    17d2:	80 93 69 00 	sts	0x0069, r24
						g_tick=0;	//begin timing
    17d6:	10 92 68 00 	sts	0x0068, r1
						g_flag=0;
    17da:	10 92 6a 00 	sts	0x006A, r1
						while(g_flag!=2){}	//wait for 15 seconds
    17de:	80 91 6a 00 	lds	r24, 0x006A
    17e2:	82 30       	cpi	r24, 0x02	; 2
    17e4:	e1 f7       	brne	.-8      	; 0x17de <main+0xc98>

						//Motor off
						g_timer=0;
    17e6:	10 92 69 00 	sts	0x0069, r1
						g_tick=0;	//begin timing
    17ea:	10 92 68 00 	sts	0x0068, r1
						g_flag=0;
    17ee:	10 92 6a 00 	sts	0x006A, r1
    17f2:	45 cb       	rjmp	.-2422   	; 0xe7e <main+0x338>
    17f4:	ff cf       	rjmp	.-2      	; 0x17f4 <main+0xcae>

000017f6 <enter_password>:
 *******************************************************************************/



void enter_password(uint8 *pass)
{
    17f6:	df 93       	push	r29
    17f8:	cf 93       	push	r28
    17fa:	cd b7       	in	r28, 0x3d	; 61
    17fc:	de b7       	in	r29, 0x3e	; 62
    17fe:	62 97       	sbiw	r28, 0x12	; 18
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	f8 94       	cli
    1804:	de bf       	out	0x3e, r29	; 62
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	cd bf       	out	0x3d, r28	; 61
    180a:	9a 8b       	std	Y+18, r25	; 0x12
    180c:	89 8b       	std	Y+17, r24	; 0x11
	/*
	 * Function responsible for getting entered password in the keypad
	 */

	uint8 i = 0;
    180e:	18 8a       	std	Y+16, r1	; 0x10
    1810:	85 c0       	rjmp	.+266    	; 0x191c <enter_password+0x126>
	uint8 key;
	while(i!=5){

		key = KeyPad_getPressedKey();	//get pressed key
    1812:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <KeyPad_getPressedKey>
    1816:	8f 87       	std	Y+15, r24	; 0x0f
		pass[i]=key;	//saving pressed key to password
    1818:	88 89       	ldd	r24, Y+16	; 0x10
    181a:	28 2f       	mov	r18, r24
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	89 89       	ldd	r24, Y+17	; 0x11
    1820:	9a 89       	ldd	r25, Y+18	; 0x12
    1822:	fc 01       	movw	r30, r24
    1824:	e2 0f       	add	r30, r18
    1826:	f3 1f       	adc	r31, r19
    1828:	8f 85       	ldd	r24, Y+15	; 0x0f
    182a:	80 83       	st	Z, r24
		LCD_displayCharacter('*');	//display unseen key
    182c:	8a e2       	ldi	r24, 0x2A	; 42
    182e:	0e 94 57 14 	call	0x28ae	; 0x28ae <LCD_displayCharacter>
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	a8 e4       	ldi	r26, 0x48	; 72
    1838:	b2 e4       	ldi	r27, 0x42	; 66
    183a:	8b 87       	std	Y+11, r24	; 0x0b
    183c:	9c 87       	std	Y+12, r25	; 0x0c
    183e:	ad 87       	std	Y+13, r26	; 0x0d
    1840:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1842:	6b 85       	ldd	r22, Y+11	; 0x0b
    1844:	7c 85       	ldd	r23, Y+12	; 0x0c
    1846:	8d 85       	ldd	r24, Y+13	; 0x0d
    1848:	9e 85       	ldd	r25, Y+14	; 0x0e
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	4a ef       	ldi	r20, 0xFA	; 250
    1850:	54 e4       	ldi	r21, 0x44	; 68
    1852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	8f 83       	std	Y+7, r24	; 0x07
    185c:	98 87       	std	Y+8, r25	; 0x08
    185e:	a9 87       	std	Y+9, r26	; 0x09
    1860:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1862:	6f 81       	ldd	r22, Y+7	; 0x07
    1864:	78 85       	ldd	r23, Y+8	; 0x08
    1866:	89 85       	ldd	r24, Y+9	; 0x09
    1868:	9a 85       	ldd	r25, Y+10	; 0x0a
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e8       	ldi	r20, 0x80	; 128
    1870:	5f e3       	ldi	r21, 0x3F	; 63
    1872:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1876:	88 23       	and	r24, r24
    1878:	2c f4       	brge	.+10     	; 0x1884 <enter_password+0x8e>
		__ticks = 1;
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	9e 83       	std	Y+6, r25	; 0x06
    1880:	8d 83       	std	Y+5, r24	; 0x05
    1882:	3f c0       	rjmp	.+126    	; 0x1902 <enter_password+0x10c>
	else if (__tmp > 65535)
    1884:	6f 81       	ldd	r22, Y+7	; 0x07
    1886:	78 85       	ldd	r23, Y+8	; 0x08
    1888:	89 85       	ldd	r24, Y+9	; 0x09
    188a:	9a 85       	ldd	r25, Y+10	; 0x0a
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	3f ef       	ldi	r19, 0xFF	; 255
    1890:	4f e7       	ldi	r20, 0x7F	; 127
    1892:	57 e4       	ldi	r21, 0x47	; 71
    1894:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1898:	18 16       	cp	r1, r24
    189a:	4c f5       	brge	.+82     	; 0x18ee <enter_password+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    189c:	6b 85       	ldd	r22, Y+11	; 0x0b
    189e:	7c 85       	ldd	r23, Y+12	; 0x0c
    18a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    18a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	40 e2       	ldi	r20, 0x20	; 32
    18aa:	51 e4       	ldi	r21, 0x41	; 65
    18ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	bc 01       	movw	r22, r24
    18b6:	cd 01       	movw	r24, r26
    18b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	9e 83       	std	Y+6, r25	; 0x06
    18c2:	8d 83       	std	Y+5, r24	; 0x05
    18c4:	0f c0       	rjmp	.+30     	; 0x18e4 <enter_password+0xee>
    18c6:	88 ec       	ldi	r24, 0xC8	; 200
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	9c 83       	std	Y+4, r25	; 0x04
    18cc:	8b 83       	std	Y+3, r24	; 0x03
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	9c 81       	ldd	r25, Y+4	; 0x04
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <enter_password+0xdc>
    18d6:	9c 83       	std	Y+4, r25	; 0x04
    18d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18da:	8d 81       	ldd	r24, Y+5	; 0x05
    18dc:	9e 81       	ldd	r25, Y+6	; 0x06
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	9e 83       	std	Y+6, r25	; 0x06
    18e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e4:	8d 81       	ldd	r24, Y+5	; 0x05
    18e6:	9e 81       	ldd	r25, Y+6	; 0x06
    18e8:	00 97       	sbiw	r24, 0x00	; 0
    18ea:	69 f7       	brne	.-38     	; 0x18c6 <enter_password+0xd0>
    18ec:	14 c0       	rjmp	.+40     	; 0x1916 <enter_password+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ee:	6f 81       	ldd	r22, Y+7	; 0x07
    18f0:	78 85       	ldd	r23, Y+8	; 0x08
    18f2:	89 85       	ldd	r24, Y+9	; 0x09
    18f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	9e 83       	std	Y+6, r25	; 0x06
    1900:	8d 83       	std	Y+5, r24	; 0x05
    1902:	8d 81       	ldd	r24, Y+5	; 0x05
    1904:	9e 81       	ldd	r25, Y+6	; 0x06
    1906:	9a 83       	std	Y+2, r25	; 0x02
    1908:	89 83       	std	Y+1, r24	; 0x01
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	9a 81       	ldd	r25, Y+2	; 0x02
    190e:	01 97       	sbiw	r24, 0x01	; 1
    1910:	f1 f7       	brne	.-4      	; 0x190e <enter_password+0x118>
    1912:	9a 83       	std	Y+2, r25	; 0x02
    1914:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(50);
		i++;
    1916:	88 89       	ldd	r24, Y+16	; 0x10
    1918:	8f 5f       	subi	r24, 0xFF	; 255
    191a:	88 8b       	std	Y+16, r24	; 0x10
	 * Function responsible for getting entered password in the keypad
	 */

	uint8 i = 0;
	uint8 key;
	while(i!=5){
    191c:	88 89       	ldd	r24, Y+16	; 0x10
    191e:	85 30       	cpi	r24, 0x05	; 5
    1920:	09 f0       	breq	.+2      	; 0x1924 <enter_password+0x12e>
    1922:	77 cf       	rjmp	.-274    	; 0x1812 <enter_password+0x1c>

		_delay_ms(50);
		i++;
	}

	pass[i]='#';
    1924:	88 89       	ldd	r24, Y+16	; 0x10
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	89 89       	ldd	r24, Y+17	; 0x11
    192c:	9a 89       	ldd	r25, Y+18	; 0x12
    192e:	fc 01       	movw	r30, r24
    1930:	e2 0f       	add	r30, r18
    1932:	f3 1f       	adc	r31, r19
    1934:	83 e2       	ldi	r24, 0x23	; 35
    1936:	80 83       	st	Z, r24
}
    1938:	62 96       	adiw	r28, 0x12	; 18
    193a:	0f b6       	in	r0, 0x3f	; 63
    193c:	f8 94       	cli
    193e:	de bf       	out	0x3e, r29	; 62
    1940:	0f be       	out	0x3f, r0	; 63
    1942:	cd bf       	out	0x3d, r28	; 61
    1944:	cf 91       	pop	r28
    1946:	df 91       	pop	r29
    1948:	08 95       	ret

0000194a <Receive_from_control>:

void Receive_from_control()
{
    194a:	df 93       	push	r29
    194c:	cf 93       	push	r28
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	6f 97       	sbiw	r28, 0x1f	; 31
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	de bf       	out	0x3e, r29	; 62
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	cd bf       	out	0x3d, r28	; 61
	/*
	 * Function responsible for receiving messages from the Control ECU
	 */

	uint8 string[17];
	UART_sendByte(M2_READY);	//HandShaking
    195e:	80 e5       	ldi	r24, 0x50	; 80
    1960:	0e 94 3f 19 	call	0x327e	; 0x327e <UART_sendByte>
	UART_receiveString(string);	//receive text from control ECU
    1964:	ce 01       	movw	r24, r28
    1966:	0f 96       	adiw	r24, 0x0f	; 15
    1968:	0e 94 8e 19 	call	0x331c	; 0x331c <UART_receiveString>
	LCD_displayString(string);	//Display text received
    196c:	ce 01       	movw	r24, r28
    196e:	0f 96       	adiw	r24, 0x0f	; 15
    1970:	0e 94 74 18 	call	0x30e8	; 0x30e8 <LCD_displayString>
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	a0 e2       	ldi	r26, 0x20	; 32
    197a:	b1 e4       	ldi	r27, 0x41	; 65
    197c:	8b 87       	std	Y+11, r24	; 0x0b
    197e:	9c 87       	std	Y+12, r25	; 0x0c
    1980:	ad 87       	std	Y+13, r26	; 0x0d
    1982:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1984:	6b 85       	ldd	r22, Y+11	; 0x0b
    1986:	7c 85       	ldd	r23, Y+12	; 0x0c
    1988:	8d 85       	ldd	r24, Y+13	; 0x0d
    198a:	9e 85       	ldd	r25, Y+14	; 0x0e
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	4a ef       	ldi	r20, 0xFA	; 250
    1992:	54 e4       	ldi	r21, 0x44	; 68
    1994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	8f 83       	std	Y+7, r24	; 0x07
    199e:	98 87       	std	Y+8, r25	; 0x08
    19a0:	a9 87       	std	Y+9, r26	; 0x09
    19a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19a4:	6f 81       	ldd	r22, Y+7	; 0x07
    19a6:	78 85       	ldd	r23, Y+8	; 0x08
    19a8:	89 85       	ldd	r24, Y+9	; 0x09
    19aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	40 e8       	ldi	r20, 0x80	; 128
    19b2:	5f e3       	ldi	r21, 0x3F	; 63
    19b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19b8:	88 23       	and	r24, r24
    19ba:	2c f4       	brge	.+10     	; 0x19c6 <Receive_from_control+0x7c>
		__ticks = 1;
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	9e 83       	std	Y+6, r25	; 0x06
    19c2:	8d 83       	std	Y+5, r24	; 0x05
    19c4:	3f c0       	rjmp	.+126    	; 0x1a44 <Receive_from_control+0xfa>
	else if (__tmp > 65535)
    19c6:	6f 81       	ldd	r22, Y+7	; 0x07
    19c8:	78 85       	ldd	r23, Y+8	; 0x08
    19ca:	89 85       	ldd	r24, Y+9	; 0x09
    19cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	3f ef       	ldi	r19, 0xFF	; 255
    19d2:	4f e7       	ldi	r20, 0x7F	; 127
    19d4:	57 e4       	ldi	r21, 0x47	; 71
    19d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19da:	18 16       	cp	r1, r24
    19dc:	4c f5       	brge	.+82     	; 0x1a30 <Receive_from_control+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19de:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	40 e2       	ldi	r20, 0x20	; 32
    19ec:	51 e4       	ldi	r21, 0x41	; 65
    19ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	bc 01       	movw	r22, r24
    19f8:	cd 01       	movw	r24, r26
    19fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	9e 83       	std	Y+6, r25	; 0x06
    1a04:	8d 83       	std	Y+5, r24	; 0x05
    1a06:	0f c0       	rjmp	.+30     	; 0x1a26 <Receive_from_control+0xdc>
    1a08:	88 ec       	ldi	r24, 0xC8	; 200
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	9c 83       	std	Y+4, r25	; 0x04
    1a0e:	8b 83       	std	Y+3, r24	; 0x03
    1a10:	8b 81       	ldd	r24, Y+3	; 0x03
    1a12:	9c 81       	ldd	r25, Y+4	; 0x04
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	f1 f7       	brne	.-4      	; 0x1a14 <Receive_from_control+0xca>
    1a18:	9c 83       	std	Y+4, r25	; 0x04
    1a1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a20:	01 97       	sbiw	r24, 0x01	; 1
    1a22:	9e 83       	std	Y+6, r25	; 0x06
    1a24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a26:	8d 81       	ldd	r24, Y+5	; 0x05
    1a28:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2a:	00 97       	sbiw	r24, 0x00	; 0
    1a2c:	69 f7       	brne	.-38     	; 0x1a08 <Receive_from_control+0xbe>
    1a2e:	14 c0       	rjmp	.+40     	; 0x1a58 <Receive_from_control+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a30:	6f 81       	ldd	r22, Y+7	; 0x07
    1a32:	78 85       	ldd	r23, Y+8	; 0x08
    1a34:	89 85       	ldd	r24, Y+9	; 0x09
    1a36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	9e 83       	std	Y+6, r25	; 0x06
    1a42:	8d 83       	std	Y+5, r24	; 0x05
    1a44:	8d 81       	ldd	r24, Y+5	; 0x05
    1a46:	9e 81       	ldd	r25, Y+6	; 0x06
    1a48:	9a 83       	std	Y+2, r25	; 0x02
    1a4a:	89 83       	std	Y+1, r24	; 0x01
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
    1a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <Receive_from_control+0x106>
    1a54:	9a 83       	std	Y+2, r25	; 0x02
    1a56:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

}
    1a58:	6f 96       	adiw	r28, 0x1f	; 31
    1a5a:	0f b6       	in	r0, 0x3f	; 63
    1a5c:	f8 94       	cli
    1a5e:	de bf       	out	0x3e, r29	; 62
    1a60:	0f be       	out	0x3f, r0	; 63
    1a62:	cd bf       	out	0x3d, r28	; 61
    1a64:	cf 91       	pop	r28
    1a66:	df 91       	pop	r29
    1a68:	08 95       	ret

00001a6a <Add_password>:
void Add_password()
{
    1a6a:	df 93       	push	r29
    1a6c:	cf 93       	push	r28
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
    1a72:	e0 97       	sbiw	r28, 0x30	; 48
    1a74:	0f b6       	in	r0, 0x3f	; 63
    1a76:	f8 94       	cli
    1a78:	de bf       	out	0x3e, r29	; 62
    1a7a:	0f be       	out	0x3f, r0	; 63
    1a7c:	cd bf       	out	0x3d, r28	; 61
	* Function responsible for adding the new password
	*/
	uint8 pass[6];

	//adding first password text to LCD
	Receive_from_control();
    1a7e:	0e 94 a5 0c 	call	0x194a	; 0x194a <Receive_from_control>
	LCD_goToRowColumn(1,0);
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	60 e0       	ldi	r22, 0x00	; 0
    1a86:	0e 94 9d 18 	call	0x313a	; 0x313a <LCD_goToRowColumn>

	Receive_from_control();
    1a8a:	0e 94 a5 0c 	call	0x194a	; 0x194a <Receive_from_control>
	LCD_goToRowColumn(1,10);
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	6a e0       	ldi	r22, 0x0A	; 10
    1a92:	0e 94 9d 18 	call	0x313a	; 0x313a <LCD_goToRowColumn>

	//sending first password to control ECU
	enter_password(pass);
    1a96:	ce 01       	movw	r24, r28
    1a98:	8b 96       	adiw	r24, 0x2b	; 43
    1a9a:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <enter_password>
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	a0 e2       	ldi	r26, 0x20	; 32
    1aa4:	b1 e4       	ldi	r27, 0x41	; 65
    1aa6:	8f a3       	std	Y+39, r24	; 0x27
    1aa8:	98 a7       	std	Y+40, r25	; 0x28
    1aaa:	a9 a7       	std	Y+41, r26	; 0x29
    1aac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aae:	6f a1       	ldd	r22, Y+39	; 0x27
    1ab0:	78 a5       	ldd	r23, Y+40	; 0x28
    1ab2:	89 a5       	ldd	r24, Y+41	; 0x29
    1ab4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	4a ef       	ldi	r20, 0xFA	; 250
    1abc:	54 e4       	ldi	r21, 0x44	; 68
    1abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	8b a3       	std	Y+35, r24	; 0x23
    1ac8:	9c a3       	std	Y+36, r25	; 0x24
    1aca:	ad a3       	std	Y+37, r26	; 0x25
    1acc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ace:	6b a1       	ldd	r22, Y+35	; 0x23
    1ad0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ad2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ad4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	40 e8       	ldi	r20, 0x80	; 128
    1adc:	5f e3       	ldi	r21, 0x3F	; 63
    1ade:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ae2:	88 23       	and	r24, r24
    1ae4:	2c f4       	brge	.+10     	; 0x1af0 <Add_password+0x86>
		__ticks = 1;
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	9a a3       	std	Y+34, r25	; 0x22
    1aec:	89 a3       	std	Y+33, r24	; 0x21
    1aee:	3f c0       	rjmp	.+126    	; 0x1b6e <Add_password+0x104>
	else if (__tmp > 65535)
    1af0:	6b a1       	ldd	r22, Y+35	; 0x23
    1af2:	7c a1       	ldd	r23, Y+36	; 0x24
    1af4:	8d a1       	ldd	r24, Y+37	; 0x25
    1af6:	9e a1       	ldd	r25, Y+38	; 0x26
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	3f ef       	ldi	r19, 0xFF	; 255
    1afc:	4f e7       	ldi	r20, 0x7F	; 127
    1afe:	57 e4       	ldi	r21, 0x47	; 71
    1b00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b04:	18 16       	cp	r1, r24
    1b06:	4c f5       	brge	.+82     	; 0x1b5a <Add_password+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b08:	6f a1       	ldd	r22, Y+39	; 0x27
    1b0a:	78 a5       	ldd	r23, Y+40	; 0x28
    1b0c:	89 a5       	ldd	r24, Y+41	; 0x29
    1b0e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	40 e2       	ldi	r20, 0x20	; 32
    1b16:	51 e4       	ldi	r21, 0x41	; 65
    1b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	bc 01       	movw	r22, r24
    1b22:	cd 01       	movw	r24, r26
    1b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	9a a3       	std	Y+34, r25	; 0x22
    1b2e:	89 a3       	std	Y+33, r24	; 0x21
    1b30:	0f c0       	rjmp	.+30     	; 0x1b50 <Add_password+0xe6>
    1b32:	88 ec       	ldi	r24, 0xC8	; 200
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	98 a3       	std	Y+32, r25	; 0x20
    1b38:	8f 8f       	std	Y+31, r24	; 0x1f
    1b3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b3c:	98 a1       	ldd	r25, Y+32	; 0x20
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	f1 f7       	brne	.-4      	; 0x1b3e <Add_password+0xd4>
    1b42:	98 a3       	std	Y+32, r25	; 0x20
    1b44:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b46:	89 a1       	ldd	r24, Y+33	; 0x21
    1b48:	9a a1       	ldd	r25, Y+34	; 0x22
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	9a a3       	std	Y+34, r25	; 0x22
    1b4e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b50:	89 a1       	ldd	r24, Y+33	; 0x21
    1b52:	9a a1       	ldd	r25, Y+34	; 0x22
    1b54:	00 97       	sbiw	r24, 0x00	; 0
    1b56:	69 f7       	brne	.-38     	; 0x1b32 <Add_password+0xc8>
    1b58:	14 c0       	rjmp	.+40     	; 0x1b82 <Add_password+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b5a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b5c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b5e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b60:	9e a1       	ldd	r25, Y+38	; 0x26
    1b62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	9a a3       	std	Y+34, r25	; 0x22
    1b6c:	89 a3       	std	Y+33, r24	; 0x21
    1b6e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b70:	9a a1       	ldd	r25, Y+34	; 0x22
    1b72:	9e 8f       	std	Y+30, r25	; 0x1e
    1b74:	8d 8f       	std	Y+29, r24	; 0x1d
    1b76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b78:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b7a:	01 97       	sbiw	r24, 0x01	; 1
    1b7c:	f1 f7       	brne	.-4      	; 0x1b7a <Add_password+0x110>
    1b7e:	9e 8f       	std	Y+30, r25	; 0x1e
    1b80:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	UART_sendString(pass);
    1b82:	ce 01       	movw	r24, r28
    1b84:	8b 96       	adiw	r24, 0x2b	; 43
    1b86:	0e 94 65 19 	call	0x32ca	; 0x32ca <UART_sendString>

	LCD_clearScreen();
    1b8a:	0e 94 1b 19 	call	0x3236	; 0x3236 <LCD_clearScreen>
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	a0 e8       	ldi	r26, 0x80	; 128
    1b94:	bf e3       	ldi	r27, 0x3F	; 63
    1b96:	89 8f       	std	Y+25, r24	; 0x19
    1b98:	9a 8f       	std	Y+26, r25	; 0x1a
    1b9a:	ab 8f       	std	Y+27, r26	; 0x1b
    1b9c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b9e:	69 8d       	ldd	r22, Y+25	; 0x19
    1ba0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ba2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ba4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	4a ef       	ldi	r20, 0xFA	; 250
    1bac:	54 e4       	ldi	r21, 0x44	; 68
    1bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	8d 8b       	std	Y+21, r24	; 0x15
    1bb8:	9e 8b       	std	Y+22, r25	; 0x16
    1bba:	af 8b       	std	Y+23, r26	; 0x17
    1bbc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bbe:	6d 89       	ldd	r22, Y+21	; 0x15
    1bc0:	7e 89       	ldd	r23, Y+22	; 0x16
    1bc2:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc4:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	40 e8       	ldi	r20, 0x80	; 128
    1bcc:	5f e3       	ldi	r21, 0x3F	; 63
    1bce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bd2:	88 23       	and	r24, r24
    1bd4:	2c f4       	brge	.+10     	; 0x1be0 <Add_password+0x176>
		__ticks = 1;
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	9c 8b       	std	Y+20, r25	; 0x14
    1bdc:	8b 8b       	std	Y+19, r24	; 0x13
    1bde:	3f c0       	rjmp	.+126    	; 0x1c5e <Add_password+0x1f4>
	else if (__tmp > 65535)
    1be0:	6d 89       	ldd	r22, Y+21	; 0x15
    1be2:	7e 89       	ldd	r23, Y+22	; 0x16
    1be4:	8f 89       	ldd	r24, Y+23	; 0x17
    1be6:	98 8d       	ldd	r25, Y+24	; 0x18
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	3f ef       	ldi	r19, 0xFF	; 255
    1bec:	4f e7       	ldi	r20, 0x7F	; 127
    1bee:	57 e4       	ldi	r21, 0x47	; 71
    1bf0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bf4:	18 16       	cp	r1, r24
    1bf6:	4c f5       	brge	.+82     	; 0x1c4a <Add_password+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf8:	69 8d       	ldd	r22, Y+25	; 0x19
    1bfa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bfc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bfe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	40 e2       	ldi	r20, 0x20	; 32
    1c06:	51 e4       	ldi	r21, 0x41	; 65
    1c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	bc 01       	movw	r22, r24
    1c12:	cd 01       	movw	r24, r26
    1c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	9c 8b       	std	Y+20, r25	; 0x14
    1c1e:	8b 8b       	std	Y+19, r24	; 0x13
    1c20:	0f c0       	rjmp	.+30     	; 0x1c40 <Add_password+0x1d6>
    1c22:	88 ec       	ldi	r24, 0xC8	; 200
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	9a 8b       	std	Y+18, r25	; 0x12
    1c28:	89 8b       	std	Y+17, r24	; 0x11
    1c2a:	89 89       	ldd	r24, Y+17	; 0x11
    1c2c:	9a 89       	ldd	r25, Y+18	; 0x12
    1c2e:	01 97       	sbiw	r24, 0x01	; 1
    1c30:	f1 f7       	brne	.-4      	; 0x1c2e <Add_password+0x1c4>
    1c32:	9a 8b       	std	Y+18, r25	; 0x12
    1c34:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c36:	8b 89       	ldd	r24, Y+19	; 0x13
    1c38:	9c 89       	ldd	r25, Y+20	; 0x14
    1c3a:	01 97       	sbiw	r24, 0x01	; 1
    1c3c:	9c 8b       	std	Y+20, r25	; 0x14
    1c3e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c40:	8b 89       	ldd	r24, Y+19	; 0x13
    1c42:	9c 89       	ldd	r25, Y+20	; 0x14
    1c44:	00 97       	sbiw	r24, 0x00	; 0
    1c46:	69 f7       	brne	.-38     	; 0x1c22 <Add_password+0x1b8>
    1c48:	14 c0       	rjmp	.+40     	; 0x1c72 <Add_password+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c50:	98 8d       	ldd	r25, Y+24	; 0x18
    1c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	9c 8b       	std	Y+20, r25	; 0x14
    1c5c:	8b 8b       	std	Y+19, r24	; 0x13
    1c5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c60:	9c 89       	ldd	r25, Y+20	; 0x14
    1c62:	98 8b       	std	Y+16, r25	; 0x10
    1c64:	8f 87       	std	Y+15, r24	; 0x0f
    1c66:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c68:	98 89       	ldd	r25, Y+16	; 0x10
    1c6a:	01 97       	sbiw	r24, 0x01	; 1
    1c6c:	f1 f7       	brne	.-4      	; 0x1c6a <Add_password+0x200>
    1c6e:	98 8b       	std	Y+16, r25	; 0x10
    1c70:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	//adding second password text to LCD
	Receive_from_control();
    1c72:	0e 94 a5 0c 	call	0x194a	; 0x194a <Receive_from_control>
	LCD_goToRowColumn(1,0);
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	60 e0       	ldi	r22, 0x00	; 0
    1c7a:	0e 94 9d 18 	call	0x313a	; 0x313a <LCD_goToRowColumn>

	Receive_from_control();
    1c7e:	0e 94 a5 0c 	call	0x194a	; 0x194a <Receive_from_control>
	LCD_goToRowColumn(1,10);
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	6a e0       	ldi	r22, 0x0A	; 10
    1c86:	0e 94 9d 18 	call	0x313a	; 0x313a <LCD_goToRowColumn>

	//sending second password to control ECU
	enter_password(pass);
    1c8a:	ce 01       	movw	r24, r28
    1c8c:	8b 96       	adiw	r24, 0x2b	; 43
    1c8e:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <enter_password>
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	a0 e2       	ldi	r26, 0x20	; 32
    1c98:	b1 e4       	ldi	r27, 0x41	; 65
    1c9a:	8b 87       	std	Y+11, r24	; 0x0b
    1c9c:	9c 87       	std	Y+12, r25	; 0x0c
    1c9e:	ad 87       	std	Y+13, r26	; 0x0d
    1ca0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	4a ef       	ldi	r20, 0xFA	; 250
    1cb0:	54 e4       	ldi	r21, 0x44	; 68
    1cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	8f 83       	std	Y+7, r24	; 0x07
    1cbc:	98 87       	std	Y+8, r25	; 0x08
    1cbe:	a9 87       	std	Y+9, r26	; 0x09
    1cc0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cc2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc4:	78 85       	ldd	r23, Y+8	; 0x08
    1cc6:	89 85       	ldd	r24, Y+9	; 0x09
    1cc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	40 e8       	ldi	r20, 0x80	; 128
    1cd0:	5f e3       	ldi	r21, 0x3F	; 63
    1cd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cd6:	88 23       	and	r24, r24
    1cd8:	2c f4       	brge	.+10     	; 0x1ce4 <Add_password+0x27a>
		__ticks = 1;
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	9e 83       	std	Y+6, r25	; 0x06
    1ce0:	8d 83       	std	Y+5, r24	; 0x05
    1ce2:	3f c0       	rjmp	.+126    	; 0x1d62 <Add_password+0x2f8>
	else if (__tmp > 65535)
    1ce4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce6:	78 85       	ldd	r23, Y+8	; 0x08
    1ce8:	89 85       	ldd	r24, Y+9	; 0x09
    1cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	3f ef       	ldi	r19, 0xFF	; 255
    1cf0:	4f e7       	ldi	r20, 0x7F	; 127
    1cf2:	57 e4       	ldi	r21, 0x47	; 71
    1cf4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cf8:	18 16       	cp	r1, r24
    1cfa:	4c f5       	brge	.+82     	; 0x1d4e <Add_password+0x2e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	40 e2       	ldi	r20, 0x20	; 32
    1d0a:	51 e4       	ldi	r21, 0x41	; 65
    1d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	bc 01       	movw	r22, r24
    1d16:	cd 01       	movw	r24, r26
    1d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	9e 83       	std	Y+6, r25	; 0x06
    1d22:	8d 83       	std	Y+5, r24	; 0x05
    1d24:	0f c0       	rjmp	.+30     	; 0x1d44 <Add_password+0x2da>
    1d26:	88 ec       	ldi	r24, 0xC8	; 200
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	9c 83       	std	Y+4, r25	; 0x04
    1d2c:	8b 83       	std	Y+3, r24	; 0x03
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	9c 81       	ldd	r25, Y+4	; 0x04
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	f1 f7       	brne	.-4      	; 0x1d32 <Add_password+0x2c8>
    1d36:	9c 83       	std	Y+4, r25	; 0x04
    1d38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	9e 83       	std	Y+6, r25	; 0x06
    1d42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d44:	8d 81       	ldd	r24, Y+5	; 0x05
    1d46:	9e 81       	ldd	r25, Y+6	; 0x06
    1d48:	00 97       	sbiw	r24, 0x00	; 0
    1d4a:	69 f7       	brne	.-38     	; 0x1d26 <Add_password+0x2bc>
    1d4c:	14 c0       	rjmp	.+40     	; 0x1d76 <Add_password+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d50:	78 85       	ldd	r23, Y+8	; 0x08
    1d52:	89 85       	ldd	r24, Y+9	; 0x09
    1d54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	9e 83       	std	Y+6, r25	; 0x06
    1d60:	8d 83       	std	Y+5, r24	; 0x05
    1d62:	8d 81       	ldd	r24, Y+5	; 0x05
    1d64:	9e 81       	ldd	r25, Y+6	; 0x06
    1d66:	9a 83       	std	Y+2, r25	; 0x02
    1d68:	89 83       	std	Y+1, r24	; 0x01
    1d6a:	89 81       	ldd	r24, Y+1	; 0x01
    1d6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	f1 f7       	brne	.-4      	; 0x1d6e <Add_password+0x304>
    1d72:	9a 83       	std	Y+2, r25	; 0x02
    1d74:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	UART_sendString(pass);
    1d76:	ce 01       	movw	r24, r28
    1d78:	8b 96       	adiw	r24, 0x2b	; 43
    1d7a:	0e 94 65 19 	call	0x32ca	; 0x32ca <UART_sendString>

}
    1d7e:	e0 96       	adiw	r28, 0x30	; 48
    1d80:	0f b6       	in	r0, 0x3f	; 63
    1d82:	f8 94       	cli
    1d84:	de bf       	out	0x3e, r29	; 62
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	cd bf       	out	0x3d, r28	; 61
    1d8a:	cf 91       	pop	r28
    1d8c:	df 91       	pop	r29
    1d8e:	08 95       	ret

00001d90 <__vector_3>:


ISR(TIMER2_COMP_vect)
{
    1d90:	1f 92       	push	r1
    1d92:	0f 92       	push	r0
    1d94:	0f b6       	in	r0, 0x3f	; 63
    1d96:	0f 92       	push	r0
    1d98:	11 24       	eor	r1, r1
    1d9a:	8f 93       	push	r24
    1d9c:	df 93       	push	r29
    1d9e:	cf 93       	push	r28
    1da0:	cd b7       	in	r28, 0x3d	; 61
    1da2:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Function responsible for timer interrupt
	 */

	g_tick++;
    1da4:	80 91 68 00 	lds	r24, 0x0068
    1da8:	8f 5f       	subi	r24, 0xFF	; 255
    1daa:	80 93 68 00 	sts	0x0068, r24
	if (g_timer == 1){
    1dae:	80 91 69 00 	lds	r24, 0x0069
    1db2:	81 30       	cpi	r24, 0x01	; 1
    1db4:	61 f4       	brne	.+24     	; 0x1dce <__vector_3+0x3e>
		if (g_tick==NUMBER_OF_OVERFLOWS_PER_minute)	//timer for 1 minute
    1db6:	80 91 68 00 	lds	r24, 0x0068
    1dba:	80 3f       	cpi	r24, 0xF0	; 240
    1dbc:	b9 f4       	brne	.+46     	; 0x1dec <__vector_3+0x5c>
		{
			g_timer=0;
    1dbe:	10 92 69 00 	sts	0x0069, r1
			g_flag=1;	//1 minute flag
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	80 93 6a 00 	sts	0x006A, r24
			g_tick = 0;
    1dc8:	10 92 68 00 	sts	0x0068, r1
    1dcc:	0f c0       	rjmp	.+30     	; 0x1dec <__vector_3+0x5c>
		}
	}
	else if (g_timer==2)
    1dce:	80 91 69 00 	lds	r24, 0x0069
    1dd2:	82 30       	cpi	r24, 0x02	; 2
    1dd4:	59 f4       	brne	.+22     	; 0x1dec <__vector_3+0x5c>
	{
		if (g_tick==NUMBER_OF_OVERFLOWS_PER_15seconds)	//timer for 15 seconds
    1dd6:	80 91 68 00 	lds	r24, 0x0068
    1dda:	8c 33       	cpi	r24, 0x3C	; 60
    1ddc:	39 f4       	brne	.+14     	; 0x1dec <__vector_3+0x5c>
		{
			g_timer=0;
    1dde:	10 92 69 00 	sts	0x0069, r1
			g_flag=2;	//15 seconds flag
    1de2:	82 e0       	ldi	r24, 0x02	; 2
    1de4:	80 93 6a 00 	sts	0x006A, r24
			g_tick = 0;
    1de8:	10 92 68 00 	sts	0x0068, r1
		}

	}
}
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	8f 91       	pop	r24
    1df2:	0f 90       	pop	r0
    1df4:	0f be       	out	0x3f, r0	; 63
    1df6:	0f 90       	pop	r0
    1df8:	1f 90       	pop	r1
    1dfa:	18 95       	reti

00001dfc <timer2_init_CTC_mode>:

void timer2_init_CTC_mode(unsigned char tick)
{
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	0f 92       	push	r0
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
    1e06:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Function responsible for initializing the timer
	 */

	TCNT2 = 0; //timer initial value
    1e08:	e4 e4       	ldi	r30, 0x44	; 68
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	10 82       	st	Z, r1
	OCR2  = tick; //compare value
    1e0e:	e3 e4       	ldi	r30, 0x43	; 67
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
    1e14:	80 83       	st	Z, r24
	TIMSK |= (1<<OCIE2); //enable compare interrupt
    1e16:	a9 e5       	ldi	r26, 0x59	; 89
    1e18:	b0 e0       	ldi	r27, 0x00	; 0
    1e1a:	e9 e5       	ldi	r30, 0x59	; 89
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	80 81       	ld	r24, Z
    1e20:	80 68       	ori	r24, 0x80	; 128
    1e22:	8c 93       	st	X, r24
	 * 1. Non PWM mode FOC0=1
	 * 2. CTC Mode WGM01=1 & WGM00=0
	 * 3. No need for OC0 in this example so COM00=0 & COM01=0
	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	TCCR2 = (1<<FOC2) | (1<<WGM21) | (1<<CS22) | (1<<CS21) | (1<<CS20);
    1e24:	e5 e4       	ldi	r30, 0x45	; 69
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	8f e8       	ldi	r24, 0x8F	; 143
    1e2a:	80 83       	st	Z, r24
}
    1e2c:	0f 90       	pop	r0
    1e2e:	cf 91       	pop	r28
    1e30:	df 91       	pop	r29
    1e32:	08 95       	ret

00001e34 <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
    1e34:	df 93       	push	r29
    1e36:	cf 93       	push	r28
    1e38:	00 d0       	rcall	.+0      	; 0x1e3a <KeyPad_getPressedKey+0x6>
    1e3a:	cd b7       	in	r28, 0x3d	; 61
    1e3c:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1e3e:	1a 82       	std	Y+2, r1	; 0x02
    1e40:	4c c0       	rjmp	.+152    	; 0x1eda <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    1e42:	ea e3       	ldi	r30, 0x3A	; 58
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	8a 81       	ldd	r24, Y+2	; 0x02
    1e48:	28 2f       	mov	r18, r24
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	80 e1       	ldi	r24, 0x10	; 16
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	02 c0       	rjmp	.+4      	; 0x1e56 <KeyPad_getPressedKey+0x22>
    1e52:	88 0f       	add	r24, r24
    1e54:	99 1f       	adc	r25, r25
    1e56:	2a 95       	dec	r18
    1e58:	e2 f7       	brpl	.-8      	; 0x1e52 <KeyPad_getPressedKey+0x1e>
    1e5a:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
    1e5c:	eb e3       	ldi	r30, 0x3B	; 59
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	28 2f       	mov	r18, r24
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	80 e1       	ldi	r24, 0x10	; 16
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	02 2e       	mov	r0, r18
    1e6c:	02 c0       	rjmp	.+4      	; 0x1e72 <KeyPad_getPressedKey+0x3e>
    1e6e:	88 0f       	add	r24, r24
    1e70:	99 1f       	adc	r25, r25
    1e72:	0a 94       	dec	r0
    1e74:	e2 f7       	brpl	.-8      	; 0x1e6e <KeyPad_getPressedKey+0x3a>
    1e76:	80 95       	com	r24
    1e78:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
    1e7a:	19 82       	std	Y+1, r1	; 0x01
    1e7c:	28 c0       	rjmp	.+80     	; 0x1ece <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    1e7e:	e9 e3       	ldi	r30, 0x39	; 57
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	28 2f       	mov	r18, r24
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	88 2f       	mov	r24, r24
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	a9 01       	movw	r20, r18
    1e90:	02 c0       	rjmp	.+4      	; 0x1e96 <KeyPad_getPressedKey+0x62>
    1e92:	55 95       	asr	r21
    1e94:	47 95       	ror	r20
    1e96:	8a 95       	dec	r24
    1e98:	e2 f7       	brpl	.-8      	; 0x1e92 <KeyPad_getPressedKey+0x5e>
    1e9a:	ca 01       	movw	r24, r20
    1e9c:	81 70       	andi	r24, 0x01	; 1
    1e9e:	90 70       	andi	r25, 0x00	; 0
    1ea0:	00 97       	sbiw	r24, 0x00	; 0
    1ea2:	91 f4       	brne	.+36     	; 0x1ec8 <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    1ea4:	89 81       	ldd	r24, Y+1	; 0x01
    1ea6:	88 2f       	mov	r24, r24
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	88 0f       	add	r24, r24
    1eac:	99 1f       	adc	r25, r25
    1eae:	88 0f       	add	r24, r24
    1eb0:	99 1f       	adc	r25, r25
    1eb2:	98 2f       	mov	r25, r24
    1eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb6:	89 0f       	add	r24, r25
    1eb8:	8f 5f       	subi	r24, 0xFF	; 255
    1eba:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	cf 91       	pop	r28
    1ec4:	df 91       	pop	r29
    1ec6:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	8f 5f       	subi	r24, 0xFF	; 255
    1ecc:	89 83       	std	Y+1, r24	; 0x01
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
    1ed0:	84 30       	cpi	r24, 0x04	; 4
    1ed2:	a8 f2       	brcs	.-86     	; 0x1e7e <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	8f 5f       	subi	r24, 0xFF	; 255
    1ed8:	8a 83       	std	Y+2, r24	; 0x02
    1eda:	8a 81       	ldd	r24, Y+2	; 0x02
    1edc:	84 30       	cpi	r24, 0x04	; 4
    1ede:	08 f4       	brcc	.+2      	; 0x1ee2 <KeyPad_getPressedKey+0xae>
    1ee0:	b0 cf       	rjmp	.-160    	; 0x1e42 <KeyPad_getPressedKey+0xe>
    1ee2:	ad cf       	rjmp	.-166    	; 0x1e3e <KeyPad_getPressedKey+0xa>

00001ee4 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    1ee4:	df 93       	push	r29
    1ee6:	cf 93       	push	r28
    1ee8:	00 d0       	rcall	.+0      	; 0x1eea <KeyPad_4x4_adjustKeyNumber+0x6>
    1eea:	00 d0       	rcall	.+0      	; 0x1eec <KeyPad_4x4_adjustKeyNumber+0x8>
    1eec:	cd b7       	in	r28, 0x3d	; 61
    1eee:	de b7       	in	r29, 0x3e	; 62
    1ef0:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
    1ef4:	28 2f       	mov	r18, r24
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	3c 83       	std	Y+4, r19	; 0x04
    1efa:	2b 83       	std	Y+3, r18	; 0x03
    1efc:	8b 81       	ldd	r24, Y+3	; 0x03
    1efe:	9c 81       	ldd	r25, Y+4	; 0x04
    1f00:	88 30       	cpi	r24, 0x08	; 8
    1f02:	91 05       	cpc	r25, r1
    1f04:	09 f4       	brne	.+2      	; 0x1f08 <KeyPad_4x4_adjustKeyNumber+0x24>
    1f06:	70 c0       	rjmp	.+224    	; 0x1fe8 <KeyPad_4x4_adjustKeyNumber+0x104>
    1f08:	2b 81       	ldd	r18, Y+3	; 0x03
    1f0a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f0c:	29 30       	cpi	r18, 0x09	; 9
    1f0e:	31 05       	cpc	r19, r1
    1f10:	5c f5       	brge	.+86     	; 0x1f68 <KeyPad_4x4_adjustKeyNumber+0x84>
    1f12:	8b 81       	ldd	r24, Y+3	; 0x03
    1f14:	9c 81       	ldd	r25, Y+4	; 0x04
    1f16:	84 30       	cpi	r24, 0x04	; 4
    1f18:	91 05       	cpc	r25, r1
    1f1a:	09 f4       	brne	.+2      	; 0x1f1e <KeyPad_4x4_adjustKeyNumber+0x3a>
    1f1c:	59 c0       	rjmp	.+178    	; 0x1fd0 <KeyPad_4x4_adjustKeyNumber+0xec>
    1f1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f20:	3c 81       	ldd	r19, Y+4	; 0x04
    1f22:	25 30       	cpi	r18, 0x05	; 5
    1f24:	31 05       	cpc	r19, r1
    1f26:	9c f4       	brge	.+38     	; 0x1f4e <KeyPad_4x4_adjustKeyNumber+0x6a>
    1f28:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2c:	82 30       	cpi	r24, 0x02	; 2
    1f2e:	91 05       	cpc	r25, r1
    1f30:	09 f4       	brne	.+2      	; 0x1f34 <KeyPad_4x4_adjustKeyNumber+0x50>
    1f32:	48 c0       	rjmp	.+144    	; 0x1fc4 <KeyPad_4x4_adjustKeyNumber+0xe0>
    1f34:	2b 81       	ldd	r18, Y+3	; 0x03
    1f36:	3c 81       	ldd	r19, Y+4	; 0x04
    1f38:	23 30       	cpi	r18, 0x03	; 3
    1f3a:	31 05       	cpc	r19, r1
    1f3c:	0c f0       	brlt	.+2      	; 0x1f40 <KeyPad_4x4_adjustKeyNumber+0x5c>
    1f3e:	45 c0       	rjmp	.+138    	; 0x1fca <KeyPad_4x4_adjustKeyNumber+0xe6>
    1f40:	8b 81       	ldd	r24, Y+3	; 0x03
    1f42:	9c 81       	ldd	r25, Y+4	; 0x04
    1f44:	81 30       	cpi	r24, 0x01	; 1
    1f46:	91 05       	cpc	r25, r1
    1f48:	09 f4       	brne	.+2      	; 0x1f4c <KeyPad_4x4_adjustKeyNumber+0x68>
    1f4a:	39 c0       	rjmp	.+114    	; 0x1fbe <KeyPad_4x4_adjustKeyNumber+0xda>
    1f4c:	68 c0       	rjmp	.+208    	; 0x201e <KeyPad_4x4_adjustKeyNumber+0x13a>
    1f4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f50:	3c 81       	ldd	r19, Y+4	; 0x04
    1f52:	26 30       	cpi	r18, 0x06	; 6
    1f54:	31 05       	cpc	r19, r1
    1f56:	09 f4       	brne	.+2      	; 0x1f5a <KeyPad_4x4_adjustKeyNumber+0x76>
    1f58:	41 c0       	rjmp	.+130    	; 0x1fdc <KeyPad_4x4_adjustKeyNumber+0xf8>
    1f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5e:	87 30       	cpi	r24, 0x07	; 7
    1f60:	91 05       	cpc	r25, r1
    1f62:	0c f0       	brlt	.+2      	; 0x1f66 <KeyPad_4x4_adjustKeyNumber+0x82>
    1f64:	3e c0       	rjmp	.+124    	; 0x1fe2 <KeyPad_4x4_adjustKeyNumber+0xfe>
    1f66:	37 c0       	rjmp	.+110    	; 0x1fd6 <KeyPad_4x4_adjustKeyNumber+0xf2>
    1f68:	2b 81       	ldd	r18, Y+3	; 0x03
    1f6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f6c:	2c 30       	cpi	r18, 0x0C	; 12
    1f6e:	31 05       	cpc	r19, r1
    1f70:	09 f4       	brne	.+2      	; 0x1f74 <KeyPad_4x4_adjustKeyNumber+0x90>
    1f72:	46 c0       	rjmp	.+140    	; 0x2000 <KeyPad_4x4_adjustKeyNumber+0x11c>
    1f74:	8b 81       	ldd	r24, Y+3	; 0x03
    1f76:	9c 81       	ldd	r25, Y+4	; 0x04
    1f78:	8d 30       	cpi	r24, 0x0D	; 13
    1f7a:	91 05       	cpc	r25, r1
    1f7c:	5c f4       	brge	.+22     	; 0x1f94 <KeyPad_4x4_adjustKeyNumber+0xb0>
    1f7e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f80:	3c 81       	ldd	r19, Y+4	; 0x04
    1f82:	2a 30       	cpi	r18, 0x0A	; 10
    1f84:	31 05       	cpc	r19, r1
    1f86:	b1 f1       	breq	.+108    	; 0x1ff4 <KeyPad_4x4_adjustKeyNumber+0x110>
    1f88:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8c:	8b 30       	cpi	r24, 0x0B	; 11
    1f8e:	91 05       	cpc	r25, r1
    1f90:	a4 f5       	brge	.+104    	; 0x1ffa <KeyPad_4x4_adjustKeyNumber+0x116>
    1f92:	2d c0       	rjmp	.+90     	; 0x1fee <KeyPad_4x4_adjustKeyNumber+0x10a>
    1f94:	2b 81       	ldd	r18, Y+3	; 0x03
    1f96:	3c 81       	ldd	r19, Y+4	; 0x04
    1f98:	2e 30       	cpi	r18, 0x0E	; 14
    1f9a:	31 05       	cpc	r19, r1
    1f9c:	b9 f1       	breq	.+110    	; 0x200c <KeyPad_4x4_adjustKeyNumber+0x128>
    1f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa2:	8e 30       	cpi	r24, 0x0E	; 14
    1fa4:	91 05       	cpc	r25, r1
    1fa6:	7c f1       	brlt	.+94     	; 0x2006 <KeyPad_4x4_adjustKeyNumber+0x122>
    1fa8:	2b 81       	ldd	r18, Y+3	; 0x03
    1faa:	3c 81       	ldd	r19, Y+4	; 0x04
    1fac:	2f 30       	cpi	r18, 0x0F	; 15
    1fae:	31 05       	cpc	r19, r1
    1fb0:	81 f1       	breq	.+96     	; 0x2012 <KeyPad_4x4_adjustKeyNumber+0x12e>
    1fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb6:	80 31       	cpi	r24, 0x10	; 16
    1fb8:	91 05       	cpc	r25, r1
    1fba:	71 f1       	breq	.+92     	; 0x2018 <KeyPad_4x4_adjustKeyNumber+0x134>
    1fbc:	30 c0       	rjmp	.+96     	; 0x201e <KeyPad_4x4_adjustKeyNumber+0x13a>
	{
		case 1: return '7';
    1fbe:	97 e3       	ldi	r25, 0x37	; 55
    1fc0:	9a 83       	std	Y+2, r25	; 0x02
    1fc2:	2f c0       	rjmp	.+94     	; 0x2022 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: return '8';
    1fc4:	28 e3       	ldi	r18, 0x38	; 56
    1fc6:	2a 83       	std	Y+2, r18	; 0x02
    1fc8:	2c c0       	rjmp	.+88     	; 0x2022 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: return '9';
    1fca:	39 e3       	ldi	r19, 0x39	; 57
    1fcc:	3a 83       	std	Y+2, r19	; 0x02
    1fce:	29 c0       	rjmp	.+82     	; 0x2022 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: return '%'; // ASCII Code of %
    1fd0:	85 e2       	ldi	r24, 0x25	; 37
    1fd2:	8a 83       	std	Y+2, r24	; 0x02
    1fd4:	26 c0       	rjmp	.+76     	; 0x2022 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: return '4';
    1fd6:	94 e3       	ldi	r25, 0x34	; 52
    1fd8:	9a 83       	std	Y+2, r25	; 0x02
    1fda:	23 c0       	rjmp	.+70     	; 0x2022 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: return '5';
    1fdc:	25 e3       	ldi	r18, 0x35	; 53
    1fde:	2a 83       	std	Y+2, r18	; 0x02
    1fe0:	20 c0       	rjmp	.+64     	; 0x2022 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: return '6';
    1fe2:	36 e3       	ldi	r19, 0x36	; 54
    1fe4:	3a 83       	std	Y+2, r19	; 0x02
    1fe6:	1d c0       	rjmp	.+58     	; 0x2022 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    1fe8:	8a e2       	ldi	r24, 0x2A	; 42
    1fea:	8a 83       	std	Y+2, r24	; 0x02
    1fec:	1a c0       	rjmp	.+52     	; 0x2022 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: return '1';
    1fee:	91 e3       	ldi	r25, 0x31	; 49
    1ff0:	9a 83       	std	Y+2, r25	; 0x02
    1ff2:	17 c0       	rjmp	.+46     	; 0x2022 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: return '2';
    1ff4:	22 e3       	ldi	r18, 0x32	; 50
    1ff6:	2a 83       	std	Y+2, r18	; 0x02
    1ff8:	14 c0       	rjmp	.+40     	; 0x2022 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: return '3';
    1ffa:	33 e3       	ldi	r19, 0x33	; 51
    1ffc:	3a 83       	std	Y+2, r19	; 0x02
    1ffe:	11 c0       	rjmp	.+34     	; 0x2022 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    2000:	8d e2       	ldi	r24, 0x2D	; 45
    2002:	8a 83       	std	Y+2, r24	; 0x02
    2004:	0e c0       	rjmp	.+28     	; 0x2022 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: return 13;  /* ASCII of Enter */
    2006:	9d e0       	ldi	r25, 0x0D	; 13
    2008:	9a 83       	std	Y+2, r25	; 0x02
    200a:	0b c0       	rjmp	.+22     	; 0x2022 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: return '0';
    200c:	20 e3       	ldi	r18, 0x30	; 48
    200e:	2a 83       	std	Y+2, r18	; 0x02
    2010:	08 c0       	rjmp	.+16     	; 0x2022 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    2012:	3d e3       	ldi	r19, 0x3D	; 61
    2014:	3a 83       	std	Y+2, r19	; 0x02
    2016:	05 c0       	rjmp	.+10     	; 0x2022 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    2018:	8b e2       	ldi	r24, 0x2B	; 43
    201a:	8a 83       	std	Y+2, r24	; 0x02
    201c:	02 c0       	rjmp	.+4      	; 0x2022 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		default: return button_number;								 						
    201e:	99 81       	ldd	r25, Y+1	; 0x01
    2020:	9a 83       	std	Y+2, r25	; 0x02
    2022:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    2024:	0f 90       	pop	r0
    2026:	0f 90       	pop	r0
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
    202c:	cf 91       	pop	r28
    202e:	df 91       	pop	r29
    2030:	08 95       	ret

00002032 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    2032:	df 93       	push	r29
    2034:	cf 93       	push	r28
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    203a:	a7 e3       	ldi	r26, 0x37	; 55
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	e7 e3       	ldi	r30, 0x37	; 55
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	87 60       	ori	r24, 0x07	; 7
    2046:	8c 93       	st	X, r24
	
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
    2048:	a7 e3       	ldi	r26, 0x37	; 55
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	e7 e3       	ldi	r30, 0x37	; 55
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	80 81       	ld	r24, Z
    2052:	80 6f       	ori	r24, 0xF0	; 240
    2054:	8c 93       	st	X, r24
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
    2056:	82 e0       	ldi	r24, 0x02	; 2
    2058:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    205c:	88 e2       	ldi	r24, 0x28	; 40
    205e:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    2062:	8c e0       	ldi	r24, 0x0C	; 12
    2064:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_sendCommand>
}
    206e:	cf 91       	pop	r28
    2070:	df 91       	pop	r29
    2072:	08 95       	ret

00002074 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    2074:	0f 93       	push	r16
    2076:	1f 93       	push	r17
    2078:	df 93       	push	r29
    207a:	cf 93       	push	r28
    207c:	cd b7       	in	r28, 0x3d	; 61
    207e:	de b7       	in	r29, 0x3e	; 62
    2080:	c3 56       	subi	r28, 0x63	; 99
    2082:	d0 40       	sbci	r29, 0x00	; 0
    2084:	0f b6       	in	r0, 0x3f	; 63
    2086:	f8 94       	cli
    2088:	de bf       	out	0x3e, r29	; 62
    208a:	0f be       	out	0x3f, r0	; 63
    208c:	cd bf       	out	0x3d, r28	; 61
    208e:	fe 01       	movw	r30, r28
    2090:	ed 59       	subi	r30, 0x9D	; 157
    2092:	ff 4f       	sbci	r31, 0xFF	; 255
    2094:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    2096:	a8 e3       	ldi	r26, 0x38	; 56
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	e8 e3       	ldi	r30, 0x38	; 56
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	8e 7f       	andi	r24, 0xFE	; 254
    20a2:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    20a4:	a8 e3       	ldi	r26, 0x38	; 56
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	e8 e3       	ldi	r30, 0x38	; 56
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
    20ae:	8d 7f       	andi	r24, 0xFD	; 253
    20b0:	8c 93       	st	X, r24
    20b2:	fe 01       	movw	r30, r28
    20b4:	e1 5a       	subi	r30, 0xA1	; 161
    20b6:	ff 4f       	sbci	r31, 0xFF	; 255
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	a0 e8       	ldi	r26, 0x80	; 128
    20be:	bf e3       	ldi	r27, 0x3F	; 63
    20c0:	80 83       	st	Z, r24
    20c2:	91 83       	std	Z+1, r25	; 0x01
    20c4:	a2 83       	std	Z+2, r26	; 0x02
    20c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c8:	8e 01       	movw	r16, r28
    20ca:	05 5a       	subi	r16, 0xA5	; 165
    20cc:	1f 4f       	sbci	r17, 0xFF	; 255
    20ce:	fe 01       	movw	r30, r28
    20d0:	e1 5a       	subi	r30, 0xA1	; 161
    20d2:	ff 4f       	sbci	r31, 0xFF	; 255
    20d4:	60 81       	ld	r22, Z
    20d6:	71 81       	ldd	r23, Z+1	; 0x01
    20d8:	82 81       	ldd	r24, Z+2	; 0x02
    20da:	93 81       	ldd	r25, Z+3	; 0x03
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	4a ef       	ldi	r20, 0xFA	; 250
    20e2:	54 e4       	ldi	r21, 0x44	; 68
    20e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	f8 01       	movw	r30, r16
    20ee:	80 83       	st	Z, r24
    20f0:	91 83       	std	Z+1, r25	; 0x01
    20f2:	a2 83       	std	Z+2, r26	; 0x02
    20f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20f6:	fe 01       	movw	r30, r28
    20f8:	e5 5a       	subi	r30, 0xA5	; 165
    20fa:	ff 4f       	sbci	r31, 0xFF	; 255
    20fc:	60 81       	ld	r22, Z
    20fe:	71 81       	ldd	r23, Z+1	; 0x01
    2100:	82 81       	ldd	r24, Z+2	; 0x02
    2102:	93 81       	ldd	r25, Z+3	; 0x03
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	40 e8       	ldi	r20, 0x80	; 128
    210a:	5f e3       	ldi	r21, 0x3F	; 63
    210c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2110:	88 23       	and	r24, r24
    2112:	44 f4       	brge	.+16     	; 0x2124 <LCD_sendCommand+0xb0>
		__ticks = 1;
    2114:	fe 01       	movw	r30, r28
    2116:	e7 5a       	subi	r30, 0xA7	; 167
    2118:	ff 4f       	sbci	r31, 0xFF	; 255
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	91 83       	std	Z+1, r25	; 0x01
    2120:	80 83       	st	Z, r24
    2122:	64 c0       	rjmp	.+200    	; 0x21ec <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    2124:	fe 01       	movw	r30, r28
    2126:	e5 5a       	subi	r30, 0xA5	; 165
    2128:	ff 4f       	sbci	r31, 0xFF	; 255
    212a:	60 81       	ld	r22, Z
    212c:	71 81       	ldd	r23, Z+1	; 0x01
    212e:	82 81       	ldd	r24, Z+2	; 0x02
    2130:	93 81       	ldd	r25, Z+3	; 0x03
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	3f ef       	ldi	r19, 0xFF	; 255
    2136:	4f e7       	ldi	r20, 0x7F	; 127
    2138:	57 e4       	ldi	r21, 0x47	; 71
    213a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    213e:	18 16       	cp	r1, r24
    2140:	0c f0       	brlt	.+2      	; 0x2144 <LCD_sendCommand+0xd0>
    2142:	43 c0       	rjmp	.+134    	; 0x21ca <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2144:	fe 01       	movw	r30, r28
    2146:	e1 5a       	subi	r30, 0xA1	; 161
    2148:	ff 4f       	sbci	r31, 0xFF	; 255
    214a:	60 81       	ld	r22, Z
    214c:	71 81       	ldd	r23, Z+1	; 0x01
    214e:	82 81       	ldd	r24, Z+2	; 0x02
    2150:	93 81       	ldd	r25, Z+3	; 0x03
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	40 e2       	ldi	r20, 0x20	; 32
    2158:	51 e4       	ldi	r21, 0x41	; 65
    215a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	8e 01       	movw	r16, r28
    2164:	07 5a       	subi	r16, 0xA7	; 167
    2166:	1f 4f       	sbci	r17, 0xFF	; 255
    2168:	bc 01       	movw	r22, r24
    216a:	cd 01       	movw	r24, r26
    216c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	f8 01       	movw	r30, r16
    2176:	91 83       	std	Z+1, r25	; 0x01
    2178:	80 83       	st	Z, r24
    217a:	1f c0       	rjmp	.+62     	; 0x21ba <LCD_sendCommand+0x146>
    217c:	fe 01       	movw	r30, r28
    217e:	e9 5a       	subi	r30, 0xA9	; 169
    2180:	ff 4f       	sbci	r31, 0xFF	; 255
    2182:	88 ec       	ldi	r24, 0xC8	; 200
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	91 83       	std	Z+1, r25	; 0x01
    2188:	80 83       	st	Z, r24
    218a:	fe 01       	movw	r30, r28
    218c:	e9 5a       	subi	r30, 0xA9	; 169
    218e:	ff 4f       	sbci	r31, 0xFF	; 255
    2190:	80 81       	ld	r24, Z
    2192:	91 81       	ldd	r25, Z+1	; 0x01
    2194:	01 97       	sbiw	r24, 0x01	; 1
    2196:	f1 f7       	brne	.-4      	; 0x2194 <LCD_sendCommand+0x120>
    2198:	fe 01       	movw	r30, r28
    219a:	e9 5a       	subi	r30, 0xA9	; 169
    219c:	ff 4f       	sbci	r31, 0xFF	; 255
    219e:	91 83       	std	Z+1, r25	; 0x01
    21a0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a2:	de 01       	movw	r26, r28
    21a4:	a7 5a       	subi	r26, 0xA7	; 167
    21a6:	bf 4f       	sbci	r27, 0xFF	; 255
    21a8:	fe 01       	movw	r30, r28
    21aa:	e7 5a       	subi	r30, 0xA7	; 167
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	80 81       	ld	r24, Z
    21b0:	91 81       	ldd	r25, Z+1	; 0x01
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	11 96       	adiw	r26, 0x01	; 1
    21b6:	9c 93       	st	X, r25
    21b8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ba:	fe 01       	movw	r30, r28
    21bc:	e7 5a       	subi	r30, 0xA7	; 167
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	80 81       	ld	r24, Z
    21c2:	91 81       	ldd	r25, Z+1	; 0x01
    21c4:	00 97       	sbiw	r24, 0x00	; 0
    21c6:	d1 f6       	brne	.-76     	; 0x217c <LCD_sendCommand+0x108>
    21c8:	27 c0       	rjmp	.+78     	; 0x2218 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ca:	8e 01       	movw	r16, r28
    21cc:	07 5a       	subi	r16, 0xA7	; 167
    21ce:	1f 4f       	sbci	r17, 0xFF	; 255
    21d0:	fe 01       	movw	r30, r28
    21d2:	e5 5a       	subi	r30, 0xA5	; 165
    21d4:	ff 4f       	sbci	r31, 0xFF	; 255
    21d6:	60 81       	ld	r22, Z
    21d8:	71 81       	ldd	r23, Z+1	; 0x01
    21da:	82 81       	ldd	r24, Z+2	; 0x02
    21dc:	93 81       	ldd	r25, Z+3	; 0x03
    21de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	f8 01       	movw	r30, r16
    21e8:	91 83       	std	Z+1, r25	; 0x01
    21ea:	80 83       	st	Z, r24
    21ec:	de 01       	movw	r26, r28
    21ee:	ab 5a       	subi	r26, 0xAB	; 171
    21f0:	bf 4f       	sbci	r27, 0xFF	; 255
    21f2:	fe 01       	movw	r30, r28
    21f4:	e7 5a       	subi	r30, 0xA7	; 167
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	80 81       	ld	r24, Z
    21fa:	91 81       	ldd	r25, Z+1	; 0x01
    21fc:	8d 93       	st	X+, r24
    21fe:	9c 93       	st	X, r25
    2200:	fe 01       	movw	r30, r28
    2202:	eb 5a       	subi	r30, 0xAB	; 171
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	80 81       	ld	r24, Z
    2208:	91 81       	ldd	r25, Z+1	; 0x01
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	f1 f7       	brne	.-4      	; 0x220a <LCD_sendCommand+0x196>
    220e:	fe 01       	movw	r30, r28
    2210:	eb 5a       	subi	r30, 0xAB	; 171
    2212:	ff 4f       	sbci	r31, 0xFF	; 255
    2214:	91 83       	std	Z+1, r25	; 0x01
    2216:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2218:	a8 e3       	ldi	r26, 0x38	; 56
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	e8 e3       	ldi	r30, 0x38	; 56
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	84 60       	ori	r24, 0x04	; 4
    2224:	8c 93       	st	X, r24
    2226:	fe 01       	movw	r30, r28
    2228:	ef 5a       	subi	r30, 0xAF	; 175
    222a:	ff 4f       	sbci	r31, 0xFF	; 255
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	a0 e8       	ldi	r26, 0x80	; 128
    2232:	bf e3       	ldi	r27, 0x3F	; 63
    2234:	80 83       	st	Z, r24
    2236:	91 83       	std	Z+1, r25	; 0x01
    2238:	a2 83       	std	Z+2, r26	; 0x02
    223a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    223c:	8e 01       	movw	r16, r28
    223e:	03 5b       	subi	r16, 0xB3	; 179
    2240:	1f 4f       	sbci	r17, 0xFF	; 255
    2242:	fe 01       	movw	r30, r28
    2244:	ef 5a       	subi	r30, 0xAF	; 175
    2246:	ff 4f       	sbci	r31, 0xFF	; 255
    2248:	60 81       	ld	r22, Z
    224a:	71 81       	ldd	r23, Z+1	; 0x01
    224c:	82 81       	ldd	r24, Z+2	; 0x02
    224e:	93 81       	ldd	r25, Z+3	; 0x03
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	4a ef       	ldi	r20, 0xFA	; 250
    2256:	54 e4       	ldi	r21, 0x44	; 68
    2258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225c:	dc 01       	movw	r26, r24
    225e:	cb 01       	movw	r24, r22
    2260:	f8 01       	movw	r30, r16
    2262:	80 83       	st	Z, r24
    2264:	91 83       	std	Z+1, r25	; 0x01
    2266:	a2 83       	std	Z+2, r26	; 0x02
    2268:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    226a:	fe 01       	movw	r30, r28
    226c:	e3 5b       	subi	r30, 0xB3	; 179
    226e:	ff 4f       	sbci	r31, 0xFF	; 255
    2270:	60 81       	ld	r22, Z
    2272:	71 81       	ldd	r23, Z+1	; 0x01
    2274:	82 81       	ldd	r24, Z+2	; 0x02
    2276:	93 81       	ldd	r25, Z+3	; 0x03
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	40 e8       	ldi	r20, 0x80	; 128
    227e:	5f e3       	ldi	r21, 0x3F	; 63
    2280:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2284:	88 23       	and	r24, r24
    2286:	44 f4       	brge	.+16     	; 0x2298 <LCD_sendCommand+0x224>
		__ticks = 1;
    2288:	fe 01       	movw	r30, r28
    228a:	e5 5b       	subi	r30, 0xB5	; 181
    228c:	ff 4f       	sbci	r31, 0xFF	; 255
    228e:	81 e0       	ldi	r24, 0x01	; 1
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	91 83       	std	Z+1, r25	; 0x01
    2294:	80 83       	st	Z, r24
    2296:	64 c0       	rjmp	.+200    	; 0x2360 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    2298:	fe 01       	movw	r30, r28
    229a:	e3 5b       	subi	r30, 0xB3	; 179
    229c:	ff 4f       	sbci	r31, 0xFF	; 255
    229e:	60 81       	ld	r22, Z
    22a0:	71 81       	ldd	r23, Z+1	; 0x01
    22a2:	82 81       	ldd	r24, Z+2	; 0x02
    22a4:	93 81       	ldd	r25, Z+3	; 0x03
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	3f ef       	ldi	r19, 0xFF	; 255
    22aa:	4f e7       	ldi	r20, 0x7F	; 127
    22ac:	57 e4       	ldi	r21, 0x47	; 71
    22ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22b2:	18 16       	cp	r1, r24
    22b4:	0c f0       	brlt	.+2      	; 0x22b8 <LCD_sendCommand+0x244>
    22b6:	43 c0       	rjmp	.+134    	; 0x233e <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22b8:	fe 01       	movw	r30, r28
    22ba:	ef 5a       	subi	r30, 0xAF	; 175
    22bc:	ff 4f       	sbci	r31, 0xFF	; 255
    22be:	60 81       	ld	r22, Z
    22c0:	71 81       	ldd	r23, Z+1	; 0x01
    22c2:	82 81       	ldd	r24, Z+2	; 0x02
    22c4:	93 81       	ldd	r25, Z+3	; 0x03
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	40 e2       	ldi	r20, 0x20	; 32
    22cc:	51 e4       	ldi	r21, 0x41	; 65
    22ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	8e 01       	movw	r16, r28
    22d8:	05 5b       	subi	r16, 0xB5	; 181
    22da:	1f 4f       	sbci	r17, 0xFF	; 255
    22dc:	bc 01       	movw	r22, r24
    22de:	cd 01       	movw	r24, r26
    22e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	f8 01       	movw	r30, r16
    22ea:	91 83       	std	Z+1, r25	; 0x01
    22ec:	80 83       	st	Z, r24
    22ee:	1f c0       	rjmp	.+62     	; 0x232e <LCD_sendCommand+0x2ba>
    22f0:	fe 01       	movw	r30, r28
    22f2:	e7 5b       	subi	r30, 0xB7	; 183
    22f4:	ff 4f       	sbci	r31, 0xFF	; 255
    22f6:	88 ec       	ldi	r24, 0xC8	; 200
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	91 83       	std	Z+1, r25	; 0x01
    22fc:	80 83       	st	Z, r24
    22fe:	fe 01       	movw	r30, r28
    2300:	e7 5b       	subi	r30, 0xB7	; 183
    2302:	ff 4f       	sbci	r31, 0xFF	; 255
    2304:	80 81       	ld	r24, Z
    2306:	91 81       	ldd	r25, Z+1	; 0x01
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	f1 f7       	brne	.-4      	; 0x2308 <LCD_sendCommand+0x294>
    230c:	fe 01       	movw	r30, r28
    230e:	e7 5b       	subi	r30, 0xB7	; 183
    2310:	ff 4f       	sbci	r31, 0xFF	; 255
    2312:	91 83       	std	Z+1, r25	; 0x01
    2314:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2316:	de 01       	movw	r26, r28
    2318:	a5 5b       	subi	r26, 0xB5	; 181
    231a:	bf 4f       	sbci	r27, 0xFF	; 255
    231c:	fe 01       	movw	r30, r28
    231e:	e5 5b       	subi	r30, 0xB5	; 181
    2320:	ff 4f       	sbci	r31, 0xFF	; 255
    2322:	80 81       	ld	r24, Z
    2324:	91 81       	ldd	r25, Z+1	; 0x01
    2326:	01 97       	sbiw	r24, 0x01	; 1
    2328:	11 96       	adiw	r26, 0x01	; 1
    232a:	9c 93       	st	X, r25
    232c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    232e:	fe 01       	movw	r30, r28
    2330:	e5 5b       	subi	r30, 0xB5	; 181
    2332:	ff 4f       	sbci	r31, 0xFF	; 255
    2334:	80 81       	ld	r24, Z
    2336:	91 81       	ldd	r25, Z+1	; 0x01
    2338:	00 97       	sbiw	r24, 0x00	; 0
    233a:	d1 f6       	brne	.-76     	; 0x22f0 <LCD_sendCommand+0x27c>
    233c:	27 c0       	rjmp	.+78     	; 0x238c <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    233e:	8e 01       	movw	r16, r28
    2340:	05 5b       	subi	r16, 0xB5	; 181
    2342:	1f 4f       	sbci	r17, 0xFF	; 255
    2344:	fe 01       	movw	r30, r28
    2346:	e3 5b       	subi	r30, 0xB3	; 179
    2348:	ff 4f       	sbci	r31, 0xFF	; 255
    234a:	60 81       	ld	r22, Z
    234c:	71 81       	ldd	r23, Z+1	; 0x01
    234e:	82 81       	ldd	r24, Z+2	; 0x02
    2350:	93 81       	ldd	r25, Z+3	; 0x03
    2352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	f8 01       	movw	r30, r16
    235c:	91 83       	std	Z+1, r25	; 0x01
    235e:	80 83       	st	Z, r24
    2360:	de 01       	movw	r26, r28
    2362:	a9 5b       	subi	r26, 0xB9	; 185
    2364:	bf 4f       	sbci	r27, 0xFF	; 255
    2366:	fe 01       	movw	r30, r28
    2368:	e5 5b       	subi	r30, 0xB5	; 181
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	80 81       	ld	r24, Z
    236e:	91 81       	ldd	r25, Z+1	; 0x01
    2370:	8d 93       	st	X+, r24
    2372:	9c 93       	st	X, r25
    2374:	fe 01       	movw	r30, r28
    2376:	e9 5b       	subi	r30, 0xB9	; 185
    2378:	ff 4f       	sbci	r31, 0xFF	; 255
    237a:	80 81       	ld	r24, Z
    237c:	91 81       	ldd	r25, Z+1	; 0x01
    237e:	01 97       	sbiw	r24, 0x01	; 1
    2380:	f1 f7       	brne	.-4      	; 0x237e <LCD_sendCommand+0x30a>
    2382:	fe 01       	movw	r30, r28
    2384:	e9 5b       	subi	r30, 0xB9	; 185
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	91 83       	std	Z+1, r25	; 0x01
    238a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
    238c:	a8 e3       	ldi	r26, 0x38	; 56
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	e8 e3       	ldi	r30, 0x38	; 56
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	80 81       	ld	r24, Z
    2396:	98 2f       	mov	r25, r24
    2398:	9f 70       	andi	r25, 0x0F	; 15
    239a:	fe 01       	movw	r30, r28
    239c:	ed 59       	subi	r30, 0x9D	; 157
    239e:	ff 4f       	sbci	r31, 0xFF	; 255
    23a0:	80 81       	ld	r24, Z
    23a2:	80 7f       	andi	r24, 0xF0	; 240
    23a4:	89 2b       	or	r24, r25
    23a6:	8c 93       	st	X, r24
    23a8:	fe 01       	movw	r30, r28
    23aa:	ed 5b       	subi	r30, 0xBD	; 189
    23ac:	ff 4f       	sbci	r31, 0xFF	; 255
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	a0 e8       	ldi	r26, 0x80	; 128
    23b4:	bf e3       	ldi	r27, 0x3F	; 63
    23b6:	80 83       	st	Z, r24
    23b8:	91 83       	std	Z+1, r25	; 0x01
    23ba:	a2 83       	std	Z+2, r26	; 0x02
    23bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23be:	8e 01       	movw	r16, r28
    23c0:	01 5c       	subi	r16, 0xC1	; 193
    23c2:	1f 4f       	sbci	r17, 0xFF	; 255
    23c4:	fe 01       	movw	r30, r28
    23c6:	ed 5b       	subi	r30, 0xBD	; 189
    23c8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ca:	60 81       	ld	r22, Z
    23cc:	71 81       	ldd	r23, Z+1	; 0x01
    23ce:	82 81       	ldd	r24, Z+2	; 0x02
    23d0:	93 81       	ldd	r25, Z+3	; 0x03
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	4a ef       	ldi	r20, 0xFA	; 250
    23d8:	54 e4       	ldi	r21, 0x44	; 68
    23da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	f8 01       	movw	r30, r16
    23e4:	80 83       	st	Z, r24
    23e6:	91 83       	std	Z+1, r25	; 0x01
    23e8:	a2 83       	std	Z+2, r26	; 0x02
    23ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23ec:	fe 01       	movw	r30, r28
    23ee:	ff 96       	adiw	r30, 0x3f	; 63
    23f0:	60 81       	ld	r22, Z
    23f2:	71 81       	ldd	r23, Z+1	; 0x01
    23f4:	82 81       	ldd	r24, Z+2	; 0x02
    23f6:	93 81       	ldd	r25, Z+3	; 0x03
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	40 e8       	ldi	r20, 0x80	; 128
    23fe:	5f e3       	ldi	r21, 0x3F	; 63
    2400:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2404:	88 23       	and	r24, r24
    2406:	2c f4       	brge	.+10     	; 0x2412 <LCD_sendCommand+0x39e>
		__ticks = 1;
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	9e af       	std	Y+62, r25	; 0x3e
    240e:	8d af       	std	Y+61, r24	; 0x3d
    2410:	46 c0       	rjmp	.+140    	; 0x249e <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
    2412:	fe 01       	movw	r30, r28
    2414:	ff 96       	adiw	r30, 0x3f	; 63
    2416:	60 81       	ld	r22, Z
    2418:	71 81       	ldd	r23, Z+1	; 0x01
    241a:	82 81       	ldd	r24, Z+2	; 0x02
    241c:	93 81       	ldd	r25, Z+3	; 0x03
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	3f ef       	ldi	r19, 0xFF	; 255
    2422:	4f e7       	ldi	r20, 0x7F	; 127
    2424:	57 e4       	ldi	r21, 0x47	; 71
    2426:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    242a:	18 16       	cp	r1, r24
    242c:	64 f5       	brge	.+88     	; 0x2486 <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    242e:	fe 01       	movw	r30, r28
    2430:	ed 5b       	subi	r30, 0xBD	; 189
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	60 81       	ld	r22, Z
    2436:	71 81       	ldd	r23, Z+1	; 0x01
    2438:	82 81       	ldd	r24, Z+2	; 0x02
    243a:	93 81       	ldd	r25, Z+3	; 0x03
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e2       	ldi	r20, 0x20	; 32
    2442:	51 e4       	ldi	r21, 0x41	; 65
    2444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	bc 01       	movw	r22, r24
    244e:	cd 01       	movw	r24, r26
    2450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	9e af       	std	Y+62, r25	; 0x3e
    245a:	8d af       	std	Y+61, r24	; 0x3d
    245c:	0f c0       	rjmp	.+30     	; 0x247c <LCD_sendCommand+0x408>
    245e:	88 ec       	ldi	r24, 0xC8	; 200
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	9c af       	std	Y+60, r25	; 0x3c
    2464:	8b af       	std	Y+59, r24	; 0x3b
    2466:	8b ad       	ldd	r24, Y+59	; 0x3b
    2468:	9c ad       	ldd	r25, Y+60	; 0x3c
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	f1 f7       	brne	.-4      	; 0x246a <LCD_sendCommand+0x3f6>
    246e:	9c af       	std	Y+60, r25	; 0x3c
    2470:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2472:	8d ad       	ldd	r24, Y+61	; 0x3d
    2474:	9e ad       	ldd	r25, Y+62	; 0x3e
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	9e af       	std	Y+62, r25	; 0x3e
    247a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    247c:	8d ad       	ldd	r24, Y+61	; 0x3d
    247e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2480:	00 97       	sbiw	r24, 0x00	; 0
    2482:	69 f7       	brne	.-38     	; 0x245e <LCD_sendCommand+0x3ea>
    2484:	16 c0       	rjmp	.+44     	; 0x24b2 <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2486:	fe 01       	movw	r30, r28
    2488:	ff 96       	adiw	r30, 0x3f	; 63
    248a:	60 81       	ld	r22, Z
    248c:	71 81       	ldd	r23, Z+1	; 0x01
    248e:	82 81       	ldd	r24, Z+2	; 0x02
    2490:	93 81       	ldd	r25, Z+3	; 0x03
    2492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	9e af       	std	Y+62, r25	; 0x3e
    249c:	8d af       	std	Y+61, r24	; 0x3d
    249e:	8d ad       	ldd	r24, Y+61	; 0x3d
    24a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    24a2:	9a af       	std	Y+58, r25	; 0x3a
    24a4:	89 af       	std	Y+57, r24	; 0x39
    24a6:	89 ad       	ldd	r24, Y+57	; 0x39
    24a8:	9a ad       	ldd	r25, Y+58	; 0x3a
    24aa:	01 97       	sbiw	r24, 0x01	; 1
    24ac:	f1 f7       	brne	.-4      	; 0x24aa <LCD_sendCommand+0x436>
    24ae:	9a af       	std	Y+58, r25	; 0x3a
    24b0:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    24b2:	a8 e3       	ldi	r26, 0x38	; 56
    24b4:	b0 e0       	ldi	r27, 0x00	; 0
    24b6:	e8 e3       	ldi	r30, 0x38	; 56
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	80 81       	ld	r24, Z
    24bc:	8b 7f       	andi	r24, 0xFB	; 251
    24be:	8c 93       	st	X, r24
    24c0:	80 e0       	ldi	r24, 0x00	; 0
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	a0 e8       	ldi	r26, 0x80	; 128
    24c6:	bf e3       	ldi	r27, 0x3F	; 63
    24c8:	8d ab       	std	Y+53, r24	; 0x35
    24ca:	9e ab       	std	Y+54, r25	; 0x36
    24cc:	af ab       	std	Y+55, r26	; 0x37
    24ce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d0:	6d a9       	ldd	r22, Y+53	; 0x35
    24d2:	7e a9       	ldd	r23, Y+54	; 0x36
    24d4:	8f a9       	ldd	r24, Y+55	; 0x37
    24d6:	98 ad       	ldd	r25, Y+56	; 0x38
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	4a ef       	ldi	r20, 0xFA	; 250
    24de:	54 e4       	ldi	r21, 0x44	; 68
    24e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	89 ab       	std	Y+49, r24	; 0x31
    24ea:	9a ab       	std	Y+50, r25	; 0x32
    24ec:	ab ab       	std	Y+51, r26	; 0x33
    24ee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24f0:	69 a9       	ldd	r22, Y+49	; 0x31
    24f2:	7a a9       	ldd	r23, Y+50	; 0x32
    24f4:	8b a9       	ldd	r24, Y+51	; 0x33
    24f6:	9c a9       	ldd	r25, Y+52	; 0x34
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	40 e8       	ldi	r20, 0x80	; 128
    24fe:	5f e3       	ldi	r21, 0x3F	; 63
    2500:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2504:	88 23       	and	r24, r24
    2506:	2c f4       	brge	.+10     	; 0x2512 <LCD_sendCommand+0x49e>
		__ticks = 1;
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	98 ab       	std	Y+48, r25	; 0x30
    250e:	8f a7       	std	Y+47, r24	; 0x2f
    2510:	3f c0       	rjmp	.+126    	; 0x2590 <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    2512:	69 a9       	ldd	r22, Y+49	; 0x31
    2514:	7a a9       	ldd	r23, Y+50	; 0x32
    2516:	8b a9       	ldd	r24, Y+51	; 0x33
    2518:	9c a9       	ldd	r25, Y+52	; 0x34
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	3f ef       	ldi	r19, 0xFF	; 255
    251e:	4f e7       	ldi	r20, 0x7F	; 127
    2520:	57 e4       	ldi	r21, 0x47	; 71
    2522:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2526:	18 16       	cp	r1, r24
    2528:	4c f5       	brge	.+82     	; 0x257c <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    252a:	6d a9       	ldd	r22, Y+53	; 0x35
    252c:	7e a9       	ldd	r23, Y+54	; 0x36
    252e:	8f a9       	ldd	r24, Y+55	; 0x37
    2530:	98 ad       	ldd	r25, Y+56	; 0x38
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	40 e2       	ldi	r20, 0x20	; 32
    2538:	51 e4       	ldi	r21, 0x41	; 65
    253a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	bc 01       	movw	r22, r24
    2544:	cd 01       	movw	r24, r26
    2546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	98 ab       	std	Y+48, r25	; 0x30
    2550:	8f a7       	std	Y+47, r24	; 0x2f
    2552:	0f c0       	rjmp	.+30     	; 0x2572 <LCD_sendCommand+0x4fe>
    2554:	88 ec       	ldi	r24, 0xC8	; 200
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	9e a7       	std	Y+46, r25	; 0x2e
    255a:	8d a7       	std	Y+45, r24	; 0x2d
    255c:	8d a5       	ldd	r24, Y+45	; 0x2d
    255e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	f1 f7       	brne	.-4      	; 0x2560 <LCD_sendCommand+0x4ec>
    2564:	9e a7       	std	Y+46, r25	; 0x2e
    2566:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2568:	8f a5       	ldd	r24, Y+47	; 0x2f
    256a:	98 a9       	ldd	r25, Y+48	; 0x30
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	98 ab       	std	Y+48, r25	; 0x30
    2570:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2572:	8f a5       	ldd	r24, Y+47	; 0x2f
    2574:	98 a9       	ldd	r25, Y+48	; 0x30
    2576:	00 97       	sbiw	r24, 0x00	; 0
    2578:	69 f7       	brne	.-38     	; 0x2554 <LCD_sendCommand+0x4e0>
    257a:	14 c0       	rjmp	.+40     	; 0x25a4 <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    257c:	69 a9       	ldd	r22, Y+49	; 0x31
    257e:	7a a9       	ldd	r23, Y+50	; 0x32
    2580:	8b a9       	ldd	r24, Y+51	; 0x33
    2582:	9c a9       	ldd	r25, Y+52	; 0x34
    2584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	98 ab       	std	Y+48, r25	; 0x30
    258e:	8f a7       	std	Y+47, r24	; 0x2f
    2590:	8f a5       	ldd	r24, Y+47	; 0x2f
    2592:	98 a9       	ldd	r25, Y+48	; 0x30
    2594:	9c a7       	std	Y+44, r25	; 0x2c
    2596:	8b a7       	std	Y+43, r24	; 0x2b
    2598:	8b a5       	ldd	r24, Y+43	; 0x2b
    259a:	9c a5       	ldd	r25, Y+44	; 0x2c
    259c:	01 97       	sbiw	r24, 0x01	; 1
    259e:	f1 f7       	brne	.-4      	; 0x259c <LCD_sendCommand+0x528>
    25a0:	9c a7       	std	Y+44, r25	; 0x2c
    25a2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    25a4:	a8 e3       	ldi	r26, 0x38	; 56
    25a6:	b0 e0       	ldi	r27, 0x00	; 0
    25a8:	e8 e3       	ldi	r30, 0x38	; 56
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	80 81       	ld	r24, Z
    25ae:	84 60       	ori	r24, 0x04	; 4
    25b0:	8c 93       	st	X, r24
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	a0 e8       	ldi	r26, 0x80	; 128
    25b8:	bf e3       	ldi	r27, 0x3F	; 63
    25ba:	8f a3       	std	Y+39, r24	; 0x27
    25bc:	98 a7       	std	Y+40, r25	; 0x28
    25be:	a9 a7       	std	Y+41, r26	; 0x29
    25c0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c2:	6f a1       	ldd	r22, Y+39	; 0x27
    25c4:	78 a5       	ldd	r23, Y+40	; 0x28
    25c6:	89 a5       	ldd	r24, Y+41	; 0x29
    25c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	4a ef       	ldi	r20, 0xFA	; 250
    25d0:	54 e4       	ldi	r21, 0x44	; 68
    25d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	8b a3       	std	Y+35, r24	; 0x23
    25dc:	9c a3       	std	Y+36, r25	; 0x24
    25de:	ad a3       	std	Y+37, r26	; 0x25
    25e0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25e2:	6b a1       	ldd	r22, Y+35	; 0x23
    25e4:	7c a1       	ldd	r23, Y+36	; 0x24
    25e6:	8d a1       	ldd	r24, Y+37	; 0x25
    25e8:	9e a1       	ldd	r25, Y+38	; 0x26
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	40 e8       	ldi	r20, 0x80	; 128
    25f0:	5f e3       	ldi	r21, 0x3F	; 63
    25f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25f6:	88 23       	and	r24, r24
    25f8:	2c f4       	brge	.+10     	; 0x2604 <LCD_sendCommand+0x590>
		__ticks = 1;
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	9a a3       	std	Y+34, r25	; 0x22
    2600:	89 a3       	std	Y+33, r24	; 0x21
    2602:	3f c0       	rjmp	.+126    	; 0x2682 <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    2604:	6b a1       	ldd	r22, Y+35	; 0x23
    2606:	7c a1       	ldd	r23, Y+36	; 0x24
    2608:	8d a1       	ldd	r24, Y+37	; 0x25
    260a:	9e a1       	ldd	r25, Y+38	; 0x26
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	3f ef       	ldi	r19, 0xFF	; 255
    2610:	4f e7       	ldi	r20, 0x7F	; 127
    2612:	57 e4       	ldi	r21, 0x47	; 71
    2614:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2618:	18 16       	cp	r1, r24
    261a:	4c f5       	brge	.+82     	; 0x266e <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    261c:	6f a1       	ldd	r22, Y+39	; 0x27
    261e:	78 a5       	ldd	r23, Y+40	; 0x28
    2620:	89 a5       	ldd	r24, Y+41	; 0x29
    2622:	9a a5       	ldd	r25, Y+42	; 0x2a
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	40 e2       	ldi	r20, 0x20	; 32
    262a:	51 e4       	ldi	r21, 0x41	; 65
    262c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2630:	dc 01       	movw	r26, r24
    2632:	cb 01       	movw	r24, r22
    2634:	bc 01       	movw	r22, r24
    2636:	cd 01       	movw	r24, r26
    2638:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	9a a3       	std	Y+34, r25	; 0x22
    2642:	89 a3       	std	Y+33, r24	; 0x21
    2644:	0f c0       	rjmp	.+30     	; 0x2664 <LCD_sendCommand+0x5f0>
    2646:	88 ec       	ldi	r24, 0xC8	; 200
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	98 a3       	std	Y+32, r25	; 0x20
    264c:	8f 8f       	std	Y+31, r24	; 0x1f
    264e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2650:	98 a1       	ldd	r25, Y+32	; 0x20
    2652:	01 97       	sbiw	r24, 0x01	; 1
    2654:	f1 f7       	brne	.-4      	; 0x2652 <LCD_sendCommand+0x5de>
    2656:	98 a3       	std	Y+32, r25	; 0x20
    2658:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    265a:	89 a1       	ldd	r24, Y+33	; 0x21
    265c:	9a a1       	ldd	r25, Y+34	; 0x22
    265e:	01 97       	sbiw	r24, 0x01	; 1
    2660:	9a a3       	std	Y+34, r25	; 0x22
    2662:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2664:	89 a1       	ldd	r24, Y+33	; 0x21
    2666:	9a a1       	ldd	r25, Y+34	; 0x22
    2668:	00 97       	sbiw	r24, 0x00	; 0
    266a:	69 f7       	brne	.-38     	; 0x2646 <LCD_sendCommand+0x5d2>
    266c:	14 c0       	rjmp	.+40     	; 0x2696 <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    266e:	6b a1       	ldd	r22, Y+35	; 0x23
    2670:	7c a1       	ldd	r23, Y+36	; 0x24
    2672:	8d a1       	ldd	r24, Y+37	; 0x25
    2674:	9e a1       	ldd	r25, Y+38	; 0x26
    2676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267a:	dc 01       	movw	r26, r24
    267c:	cb 01       	movw	r24, r22
    267e:	9a a3       	std	Y+34, r25	; 0x22
    2680:	89 a3       	std	Y+33, r24	; 0x21
    2682:	89 a1       	ldd	r24, Y+33	; 0x21
    2684:	9a a1       	ldd	r25, Y+34	; 0x22
    2686:	9e 8f       	std	Y+30, r25	; 0x1e
    2688:	8d 8f       	std	Y+29, r24	; 0x1d
    268a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    268c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    268e:	01 97       	sbiw	r24, 0x01	; 1
    2690:	f1 f7       	brne	.-4      	; 0x268e <LCD_sendCommand+0x61a>
    2692:	9e 8f       	std	Y+30, r25	; 0x1e
    2694:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
    2696:	a8 e3       	ldi	r26, 0x38	; 56
    2698:	b0 e0       	ldi	r27, 0x00	; 0
    269a:	e8 e3       	ldi	r30, 0x38	; 56
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	80 81       	ld	r24, Z
    26a0:	28 2f       	mov	r18, r24
    26a2:	2f 70       	andi	r18, 0x0F	; 15
    26a4:	fe 01       	movw	r30, r28
    26a6:	ed 59       	subi	r30, 0x9D	; 157
    26a8:	ff 4f       	sbci	r31, 0xFF	; 255
    26aa:	80 81       	ld	r24, Z
    26ac:	88 2f       	mov	r24, r24
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	82 95       	swap	r24
    26b2:	92 95       	swap	r25
    26b4:	90 7f       	andi	r25, 0xF0	; 240
    26b6:	98 27       	eor	r25, r24
    26b8:	80 7f       	andi	r24, 0xF0	; 240
    26ba:	98 27       	eor	r25, r24
    26bc:	82 2b       	or	r24, r18
    26be:	8c 93       	st	X, r24
    26c0:	80 e0       	ldi	r24, 0x00	; 0
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	a0 e8       	ldi	r26, 0x80	; 128
    26c6:	bf e3       	ldi	r27, 0x3F	; 63
    26c8:	89 8f       	std	Y+25, r24	; 0x19
    26ca:	9a 8f       	std	Y+26, r25	; 0x1a
    26cc:	ab 8f       	std	Y+27, r26	; 0x1b
    26ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d0:	69 8d       	ldd	r22, Y+25	; 0x19
    26d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	4a ef       	ldi	r20, 0xFA	; 250
    26de:	54 e4       	ldi	r21, 0x44	; 68
    26e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e4:	dc 01       	movw	r26, r24
    26e6:	cb 01       	movw	r24, r22
    26e8:	8d 8b       	std	Y+21, r24	; 0x15
    26ea:	9e 8b       	std	Y+22, r25	; 0x16
    26ec:	af 8b       	std	Y+23, r26	; 0x17
    26ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26f0:	6d 89       	ldd	r22, Y+21	; 0x15
    26f2:	7e 89       	ldd	r23, Y+22	; 0x16
    26f4:	8f 89       	ldd	r24, Y+23	; 0x17
    26f6:	98 8d       	ldd	r25, Y+24	; 0x18
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	40 e8       	ldi	r20, 0x80	; 128
    26fe:	5f e3       	ldi	r21, 0x3F	; 63
    2700:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2704:	88 23       	and	r24, r24
    2706:	2c f4       	brge	.+10     	; 0x2712 <LCD_sendCommand+0x69e>
		__ticks = 1;
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	9c 8b       	std	Y+20, r25	; 0x14
    270e:	8b 8b       	std	Y+19, r24	; 0x13
    2710:	3f c0       	rjmp	.+126    	; 0x2790 <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    2712:	6d 89       	ldd	r22, Y+21	; 0x15
    2714:	7e 89       	ldd	r23, Y+22	; 0x16
    2716:	8f 89       	ldd	r24, Y+23	; 0x17
    2718:	98 8d       	ldd	r25, Y+24	; 0x18
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	3f ef       	ldi	r19, 0xFF	; 255
    271e:	4f e7       	ldi	r20, 0x7F	; 127
    2720:	57 e4       	ldi	r21, 0x47	; 71
    2722:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2726:	18 16       	cp	r1, r24
    2728:	4c f5       	brge	.+82     	; 0x277c <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    272a:	69 8d       	ldd	r22, Y+25	; 0x19
    272c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    272e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2730:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	40 e2       	ldi	r20, 0x20	; 32
    2738:	51 e4       	ldi	r21, 0x41	; 65
    273a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273e:	dc 01       	movw	r26, r24
    2740:	cb 01       	movw	r24, r22
    2742:	bc 01       	movw	r22, r24
    2744:	cd 01       	movw	r24, r26
    2746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	9c 8b       	std	Y+20, r25	; 0x14
    2750:	8b 8b       	std	Y+19, r24	; 0x13
    2752:	0f c0       	rjmp	.+30     	; 0x2772 <LCD_sendCommand+0x6fe>
    2754:	88 ec       	ldi	r24, 0xC8	; 200
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	9a 8b       	std	Y+18, r25	; 0x12
    275a:	89 8b       	std	Y+17, r24	; 0x11
    275c:	89 89       	ldd	r24, Y+17	; 0x11
    275e:	9a 89       	ldd	r25, Y+18	; 0x12
    2760:	01 97       	sbiw	r24, 0x01	; 1
    2762:	f1 f7       	brne	.-4      	; 0x2760 <LCD_sendCommand+0x6ec>
    2764:	9a 8b       	std	Y+18, r25	; 0x12
    2766:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2768:	8b 89       	ldd	r24, Y+19	; 0x13
    276a:	9c 89       	ldd	r25, Y+20	; 0x14
    276c:	01 97       	sbiw	r24, 0x01	; 1
    276e:	9c 8b       	std	Y+20, r25	; 0x14
    2770:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2772:	8b 89       	ldd	r24, Y+19	; 0x13
    2774:	9c 89       	ldd	r25, Y+20	; 0x14
    2776:	00 97       	sbiw	r24, 0x00	; 0
    2778:	69 f7       	brne	.-38     	; 0x2754 <LCD_sendCommand+0x6e0>
    277a:	14 c0       	rjmp	.+40     	; 0x27a4 <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    277c:	6d 89       	ldd	r22, Y+21	; 0x15
    277e:	7e 89       	ldd	r23, Y+22	; 0x16
    2780:	8f 89       	ldd	r24, Y+23	; 0x17
    2782:	98 8d       	ldd	r25, Y+24	; 0x18
    2784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	9c 8b       	std	Y+20, r25	; 0x14
    278e:	8b 8b       	std	Y+19, r24	; 0x13
    2790:	8b 89       	ldd	r24, Y+19	; 0x13
    2792:	9c 89       	ldd	r25, Y+20	; 0x14
    2794:	98 8b       	std	Y+16, r25	; 0x10
    2796:	8f 87       	std	Y+15, r24	; 0x0f
    2798:	8f 85       	ldd	r24, Y+15	; 0x0f
    279a:	98 89       	ldd	r25, Y+16	; 0x10
    279c:	01 97       	sbiw	r24, 0x01	; 1
    279e:	f1 f7       	brne	.-4      	; 0x279c <LCD_sendCommand+0x728>
    27a0:	98 8b       	std	Y+16, r25	; 0x10
    27a2:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    27a4:	a8 e3       	ldi	r26, 0x38	; 56
    27a6:	b0 e0       	ldi	r27, 0x00	; 0
    27a8:	e8 e3       	ldi	r30, 0x38	; 56
    27aa:	f0 e0       	ldi	r31, 0x00	; 0
    27ac:	80 81       	ld	r24, Z
    27ae:	8b 7f       	andi	r24, 0xFB	; 251
    27b0:	8c 93       	st	X, r24
    27b2:	80 e0       	ldi	r24, 0x00	; 0
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	a0 e8       	ldi	r26, 0x80	; 128
    27b8:	bf e3       	ldi	r27, 0x3F	; 63
    27ba:	8b 87       	std	Y+11, r24	; 0x0b
    27bc:	9c 87       	std	Y+12, r25	; 0x0c
    27be:	ad 87       	std	Y+13, r26	; 0x0d
    27c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    27c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    27c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	4a ef       	ldi	r20, 0xFA	; 250
    27d0:	54 e4       	ldi	r21, 0x44	; 68
    27d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d6:	dc 01       	movw	r26, r24
    27d8:	cb 01       	movw	r24, r22
    27da:	8f 83       	std	Y+7, r24	; 0x07
    27dc:	98 87       	std	Y+8, r25	; 0x08
    27de:	a9 87       	std	Y+9, r26	; 0x09
    27e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27e2:	6f 81       	ldd	r22, Y+7	; 0x07
    27e4:	78 85       	ldd	r23, Y+8	; 0x08
    27e6:	89 85       	ldd	r24, Y+9	; 0x09
    27e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	40 e8       	ldi	r20, 0x80	; 128
    27f0:	5f e3       	ldi	r21, 0x3F	; 63
    27f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27f6:	88 23       	and	r24, r24
    27f8:	2c f4       	brge	.+10     	; 0x2804 <LCD_sendCommand+0x790>
		__ticks = 1;
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	9e 83       	std	Y+6, r25	; 0x06
    2800:	8d 83       	std	Y+5, r24	; 0x05
    2802:	3f c0       	rjmp	.+126    	; 0x2882 <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    2804:	6f 81       	ldd	r22, Y+7	; 0x07
    2806:	78 85       	ldd	r23, Y+8	; 0x08
    2808:	89 85       	ldd	r24, Y+9	; 0x09
    280a:	9a 85       	ldd	r25, Y+10	; 0x0a
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	3f ef       	ldi	r19, 0xFF	; 255
    2810:	4f e7       	ldi	r20, 0x7F	; 127
    2812:	57 e4       	ldi	r21, 0x47	; 71
    2814:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2818:	18 16       	cp	r1, r24
    281a:	4c f5       	brge	.+82     	; 0x286e <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    281c:	6b 85       	ldd	r22, Y+11	; 0x0b
    281e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2820:	8d 85       	ldd	r24, Y+13	; 0x0d
    2822:	9e 85       	ldd	r25, Y+14	; 0x0e
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	40 e2       	ldi	r20, 0x20	; 32
    282a:	51 e4       	ldi	r21, 0x41	; 65
    282c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	bc 01       	movw	r22, r24
    2836:	cd 01       	movw	r24, r26
    2838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    283c:	dc 01       	movw	r26, r24
    283e:	cb 01       	movw	r24, r22
    2840:	9e 83       	std	Y+6, r25	; 0x06
    2842:	8d 83       	std	Y+5, r24	; 0x05
    2844:	0f c0       	rjmp	.+30     	; 0x2864 <LCD_sendCommand+0x7f0>
    2846:	88 ec       	ldi	r24, 0xC8	; 200
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	9c 83       	std	Y+4, r25	; 0x04
    284c:	8b 83       	std	Y+3, r24	; 0x03
    284e:	8b 81       	ldd	r24, Y+3	; 0x03
    2850:	9c 81       	ldd	r25, Y+4	; 0x04
    2852:	01 97       	sbiw	r24, 0x01	; 1
    2854:	f1 f7       	brne	.-4      	; 0x2852 <LCD_sendCommand+0x7de>
    2856:	9c 83       	std	Y+4, r25	; 0x04
    2858:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    285a:	8d 81       	ldd	r24, Y+5	; 0x05
    285c:	9e 81       	ldd	r25, Y+6	; 0x06
    285e:	01 97       	sbiw	r24, 0x01	; 1
    2860:	9e 83       	std	Y+6, r25	; 0x06
    2862:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2864:	8d 81       	ldd	r24, Y+5	; 0x05
    2866:	9e 81       	ldd	r25, Y+6	; 0x06
    2868:	00 97       	sbiw	r24, 0x00	; 0
    286a:	69 f7       	brne	.-38     	; 0x2846 <LCD_sendCommand+0x7d2>
    286c:	14 c0       	rjmp	.+40     	; 0x2896 <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    286e:	6f 81       	ldd	r22, Y+7	; 0x07
    2870:	78 85       	ldd	r23, Y+8	; 0x08
    2872:	89 85       	ldd	r24, Y+9	; 0x09
    2874:	9a 85       	ldd	r25, Y+10	; 0x0a
    2876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	9e 83       	std	Y+6, r25	; 0x06
    2880:	8d 83       	std	Y+5, r24	; 0x05
    2882:	8d 81       	ldd	r24, Y+5	; 0x05
    2884:	9e 81       	ldd	r25, Y+6	; 0x06
    2886:	9a 83       	std	Y+2, r25	; 0x02
    2888:	89 83       	std	Y+1, r24	; 0x01
    288a:	89 81       	ldd	r24, Y+1	; 0x01
    288c:	9a 81       	ldd	r25, Y+2	; 0x02
    288e:	01 97       	sbiw	r24, 0x01	; 1
    2890:	f1 f7       	brne	.-4      	; 0x288e <LCD_sendCommand+0x81a>
    2892:	9a 83       	std	Y+2, r25	; 0x02
    2894:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2896:	cd 59       	subi	r28, 0x9D	; 157
    2898:	df 4f       	sbci	r29, 0xFF	; 255
    289a:	0f b6       	in	r0, 0x3f	; 63
    289c:	f8 94       	cli
    289e:	de bf       	out	0x3e, r29	; 62
    28a0:	0f be       	out	0x3f, r0	; 63
    28a2:	cd bf       	out	0x3d, r28	; 61
    28a4:	cf 91       	pop	r28
    28a6:	df 91       	pop	r29
    28a8:	1f 91       	pop	r17
    28aa:	0f 91       	pop	r16
    28ac:	08 95       	ret

000028ae <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    28ae:	0f 93       	push	r16
    28b0:	1f 93       	push	r17
    28b2:	df 93       	push	r29
    28b4:	cf 93       	push	r28
    28b6:	cd b7       	in	r28, 0x3d	; 61
    28b8:	de b7       	in	r29, 0x3e	; 62
    28ba:	c3 56       	subi	r28, 0x63	; 99
    28bc:	d0 40       	sbci	r29, 0x00	; 0
    28be:	0f b6       	in	r0, 0x3f	; 63
    28c0:	f8 94       	cli
    28c2:	de bf       	out	0x3e, r29	; 62
    28c4:	0f be       	out	0x3f, r0	; 63
    28c6:	cd bf       	out	0x3d, r28	; 61
    28c8:	fe 01       	movw	r30, r28
    28ca:	ed 59       	subi	r30, 0x9D	; 157
    28cc:	ff 4f       	sbci	r31, 0xFF	; 255
    28ce:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    28d0:	a8 e3       	ldi	r26, 0x38	; 56
    28d2:	b0 e0       	ldi	r27, 0x00	; 0
    28d4:	e8 e3       	ldi	r30, 0x38	; 56
    28d6:	f0 e0       	ldi	r31, 0x00	; 0
    28d8:	80 81       	ld	r24, Z
    28da:	81 60       	ori	r24, 0x01	; 1
    28dc:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    28de:	a8 e3       	ldi	r26, 0x38	; 56
    28e0:	b0 e0       	ldi	r27, 0x00	; 0
    28e2:	e8 e3       	ldi	r30, 0x38	; 56
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	80 81       	ld	r24, Z
    28e8:	8d 7f       	andi	r24, 0xFD	; 253
    28ea:	8c 93       	st	X, r24
    28ec:	fe 01       	movw	r30, r28
    28ee:	e1 5a       	subi	r30, 0xA1	; 161
    28f0:	ff 4f       	sbci	r31, 0xFF	; 255
    28f2:	80 e0       	ldi	r24, 0x00	; 0
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	a0 e8       	ldi	r26, 0x80	; 128
    28f8:	bf e3       	ldi	r27, 0x3F	; 63
    28fa:	80 83       	st	Z, r24
    28fc:	91 83       	std	Z+1, r25	; 0x01
    28fe:	a2 83       	std	Z+2, r26	; 0x02
    2900:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2902:	8e 01       	movw	r16, r28
    2904:	05 5a       	subi	r16, 0xA5	; 165
    2906:	1f 4f       	sbci	r17, 0xFF	; 255
    2908:	fe 01       	movw	r30, r28
    290a:	e1 5a       	subi	r30, 0xA1	; 161
    290c:	ff 4f       	sbci	r31, 0xFF	; 255
    290e:	60 81       	ld	r22, Z
    2910:	71 81       	ldd	r23, Z+1	; 0x01
    2912:	82 81       	ldd	r24, Z+2	; 0x02
    2914:	93 81       	ldd	r25, Z+3	; 0x03
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	4a ef       	ldi	r20, 0xFA	; 250
    291c:	54 e4       	ldi	r21, 0x44	; 68
    291e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	f8 01       	movw	r30, r16
    2928:	80 83       	st	Z, r24
    292a:	91 83       	std	Z+1, r25	; 0x01
    292c:	a2 83       	std	Z+2, r26	; 0x02
    292e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2930:	fe 01       	movw	r30, r28
    2932:	e5 5a       	subi	r30, 0xA5	; 165
    2934:	ff 4f       	sbci	r31, 0xFF	; 255
    2936:	60 81       	ld	r22, Z
    2938:	71 81       	ldd	r23, Z+1	; 0x01
    293a:	82 81       	ldd	r24, Z+2	; 0x02
    293c:	93 81       	ldd	r25, Z+3	; 0x03
    293e:	20 e0       	ldi	r18, 0x00	; 0
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	40 e8       	ldi	r20, 0x80	; 128
    2944:	5f e3       	ldi	r21, 0x3F	; 63
    2946:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    294a:	88 23       	and	r24, r24
    294c:	44 f4       	brge	.+16     	; 0x295e <LCD_displayCharacter+0xb0>
		__ticks = 1;
    294e:	fe 01       	movw	r30, r28
    2950:	e7 5a       	subi	r30, 0xA7	; 167
    2952:	ff 4f       	sbci	r31, 0xFF	; 255
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	91 83       	std	Z+1, r25	; 0x01
    295a:	80 83       	st	Z, r24
    295c:	64 c0       	rjmp	.+200    	; 0x2a26 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    295e:	fe 01       	movw	r30, r28
    2960:	e5 5a       	subi	r30, 0xA5	; 165
    2962:	ff 4f       	sbci	r31, 0xFF	; 255
    2964:	60 81       	ld	r22, Z
    2966:	71 81       	ldd	r23, Z+1	; 0x01
    2968:	82 81       	ldd	r24, Z+2	; 0x02
    296a:	93 81       	ldd	r25, Z+3	; 0x03
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	3f ef       	ldi	r19, 0xFF	; 255
    2970:	4f e7       	ldi	r20, 0x7F	; 127
    2972:	57 e4       	ldi	r21, 0x47	; 71
    2974:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2978:	18 16       	cp	r1, r24
    297a:	0c f0       	brlt	.+2      	; 0x297e <LCD_displayCharacter+0xd0>
    297c:	43 c0       	rjmp	.+134    	; 0x2a04 <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    297e:	fe 01       	movw	r30, r28
    2980:	e1 5a       	subi	r30, 0xA1	; 161
    2982:	ff 4f       	sbci	r31, 0xFF	; 255
    2984:	60 81       	ld	r22, Z
    2986:	71 81       	ldd	r23, Z+1	; 0x01
    2988:	82 81       	ldd	r24, Z+2	; 0x02
    298a:	93 81       	ldd	r25, Z+3	; 0x03
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	40 e2       	ldi	r20, 0x20	; 32
    2992:	51 e4       	ldi	r21, 0x41	; 65
    2994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	8e 01       	movw	r16, r28
    299e:	07 5a       	subi	r16, 0xA7	; 167
    29a0:	1f 4f       	sbci	r17, 0xFF	; 255
    29a2:	bc 01       	movw	r22, r24
    29a4:	cd 01       	movw	r24, r26
    29a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29aa:	dc 01       	movw	r26, r24
    29ac:	cb 01       	movw	r24, r22
    29ae:	f8 01       	movw	r30, r16
    29b0:	91 83       	std	Z+1, r25	; 0x01
    29b2:	80 83       	st	Z, r24
    29b4:	1f c0       	rjmp	.+62     	; 0x29f4 <LCD_displayCharacter+0x146>
    29b6:	fe 01       	movw	r30, r28
    29b8:	e9 5a       	subi	r30, 0xA9	; 169
    29ba:	ff 4f       	sbci	r31, 0xFF	; 255
    29bc:	88 ec       	ldi	r24, 0xC8	; 200
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	91 83       	std	Z+1, r25	; 0x01
    29c2:	80 83       	st	Z, r24
    29c4:	fe 01       	movw	r30, r28
    29c6:	e9 5a       	subi	r30, 0xA9	; 169
    29c8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ca:	80 81       	ld	r24, Z
    29cc:	91 81       	ldd	r25, Z+1	; 0x01
    29ce:	01 97       	sbiw	r24, 0x01	; 1
    29d0:	f1 f7       	brne	.-4      	; 0x29ce <LCD_displayCharacter+0x120>
    29d2:	fe 01       	movw	r30, r28
    29d4:	e9 5a       	subi	r30, 0xA9	; 169
    29d6:	ff 4f       	sbci	r31, 0xFF	; 255
    29d8:	91 83       	std	Z+1, r25	; 0x01
    29da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29dc:	de 01       	movw	r26, r28
    29de:	a7 5a       	subi	r26, 0xA7	; 167
    29e0:	bf 4f       	sbci	r27, 0xFF	; 255
    29e2:	fe 01       	movw	r30, r28
    29e4:	e7 5a       	subi	r30, 0xA7	; 167
    29e6:	ff 4f       	sbci	r31, 0xFF	; 255
    29e8:	80 81       	ld	r24, Z
    29ea:	91 81       	ldd	r25, Z+1	; 0x01
    29ec:	01 97       	sbiw	r24, 0x01	; 1
    29ee:	11 96       	adiw	r26, 0x01	; 1
    29f0:	9c 93       	st	X, r25
    29f2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f4:	fe 01       	movw	r30, r28
    29f6:	e7 5a       	subi	r30, 0xA7	; 167
    29f8:	ff 4f       	sbci	r31, 0xFF	; 255
    29fa:	80 81       	ld	r24, Z
    29fc:	91 81       	ldd	r25, Z+1	; 0x01
    29fe:	00 97       	sbiw	r24, 0x00	; 0
    2a00:	d1 f6       	brne	.-76     	; 0x29b6 <LCD_displayCharacter+0x108>
    2a02:	27 c0       	rjmp	.+78     	; 0x2a52 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a04:	8e 01       	movw	r16, r28
    2a06:	07 5a       	subi	r16, 0xA7	; 167
    2a08:	1f 4f       	sbci	r17, 0xFF	; 255
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	e5 5a       	subi	r30, 0xA5	; 165
    2a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a10:	60 81       	ld	r22, Z
    2a12:	71 81       	ldd	r23, Z+1	; 0x01
    2a14:	82 81       	ldd	r24, Z+2	; 0x02
    2a16:	93 81       	ldd	r25, Z+3	; 0x03
    2a18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	cb 01       	movw	r24, r22
    2a20:	f8 01       	movw	r30, r16
    2a22:	91 83       	std	Z+1, r25	; 0x01
    2a24:	80 83       	st	Z, r24
    2a26:	de 01       	movw	r26, r28
    2a28:	ab 5a       	subi	r26, 0xAB	; 171
    2a2a:	bf 4f       	sbci	r27, 0xFF	; 255
    2a2c:	fe 01       	movw	r30, r28
    2a2e:	e7 5a       	subi	r30, 0xA7	; 167
    2a30:	ff 4f       	sbci	r31, 0xFF	; 255
    2a32:	80 81       	ld	r24, Z
    2a34:	91 81       	ldd	r25, Z+1	; 0x01
    2a36:	8d 93       	st	X+, r24
    2a38:	9c 93       	st	X, r25
    2a3a:	fe 01       	movw	r30, r28
    2a3c:	eb 5a       	subi	r30, 0xAB	; 171
    2a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a40:	80 81       	ld	r24, Z
    2a42:	91 81       	ldd	r25, Z+1	; 0x01
    2a44:	01 97       	sbiw	r24, 0x01	; 1
    2a46:	f1 f7       	brne	.-4      	; 0x2a44 <LCD_displayCharacter+0x196>
    2a48:	fe 01       	movw	r30, r28
    2a4a:	eb 5a       	subi	r30, 0xAB	; 171
    2a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4e:	91 83       	std	Z+1, r25	; 0x01
    2a50:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2a52:	a8 e3       	ldi	r26, 0x38	; 56
    2a54:	b0 e0       	ldi	r27, 0x00	; 0
    2a56:	e8 e3       	ldi	r30, 0x38	; 56
    2a58:	f0 e0       	ldi	r31, 0x00	; 0
    2a5a:	80 81       	ld	r24, Z
    2a5c:	84 60       	ori	r24, 0x04	; 4
    2a5e:	8c 93       	st	X, r24
    2a60:	fe 01       	movw	r30, r28
    2a62:	ef 5a       	subi	r30, 0xAF	; 175
    2a64:	ff 4f       	sbci	r31, 0xFF	; 255
    2a66:	80 e0       	ldi	r24, 0x00	; 0
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	a0 e8       	ldi	r26, 0x80	; 128
    2a6c:	bf e3       	ldi	r27, 0x3F	; 63
    2a6e:	80 83       	st	Z, r24
    2a70:	91 83       	std	Z+1, r25	; 0x01
    2a72:	a2 83       	std	Z+2, r26	; 0x02
    2a74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a76:	8e 01       	movw	r16, r28
    2a78:	03 5b       	subi	r16, 0xB3	; 179
    2a7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a7c:	fe 01       	movw	r30, r28
    2a7e:	ef 5a       	subi	r30, 0xAF	; 175
    2a80:	ff 4f       	sbci	r31, 0xFF	; 255
    2a82:	60 81       	ld	r22, Z
    2a84:	71 81       	ldd	r23, Z+1	; 0x01
    2a86:	82 81       	ldd	r24, Z+2	; 0x02
    2a88:	93 81       	ldd	r25, Z+3	; 0x03
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	4a ef       	ldi	r20, 0xFA	; 250
    2a90:	54 e4       	ldi	r21, 0x44	; 68
    2a92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	f8 01       	movw	r30, r16
    2a9c:	80 83       	st	Z, r24
    2a9e:	91 83       	std	Z+1, r25	; 0x01
    2aa0:	a2 83       	std	Z+2, r26	; 0x02
    2aa2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2aa4:	fe 01       	movw	r30, r28
    2aa6:	e3 5b       	subi	r30, 0xB3	; 179
    2aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aaa:	60 81       	ld	r22, Z
    2aac:	71 81       	ldd	r23, Z+1	; 0x01
    2aae:	82 81       	ldd	r24, Z+2	; 0x02
    2ab0:	93 81       	ldd	r25, Z+3	; 0x03
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	40 e8       	ldi	r20, 0x80	; 128
    2ab8:	5f e3       	ldi	r21, 0x3F	; 63
    2aba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2abe:	88 23       	and	r24, r24
    2ac0:	44 f4       	brge	.+16     	; 0x2ad2 <LCD_displayCharacter+0x224>
		__ticks = 1;
    2ac2:	fe 01       	movw	r30, r28
    2ac4:	e5 5b       	subi	r30, 0xB5	; 181
    2ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	91 83       	std	Z+1, r25	; 0x01
    2ace:	80 83       	st	Z, r24
    2ad0:	64 c0       	rjmp	.+200    	; 0x2b9a <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	e3 5b       	subi	r30, 0xB3	; 179
    2ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad8:	60 81       	ld	r22, Z
    2ada:	71 81       	ldd	r23, Z+1	; 0x01
    2adc:	82 81       	ldd	r24, Z+2	; 0x02
    2ade:	93 81       	ldd	r25, Z+3	; 0x03
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	3f ef       	ldi	r19, 0xFF	; 255
    2ae4:	4f e7       	ldi	r20, 0x7F	; 127
    2ae6:	57 e4       	ldi	r21, 0x47	; 71
    2ae8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aec:	18 16       	cp	r1, r24
    2aee:	0c f0       	brlt	.+2      	; 0x2af2 <LCD_displayCharacter+0x244>
    2af0:	43 c0       	rjmp	.+134    	; 0x2b78 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af2:	fe 01       	movw	r30, r28
    2af4:	ef 5a       	subi	r30, 0xAF	; 175
    2af6:	ff 4f       	sbci	r31, 0xFF	; 255
    2af8:	60 81       	ld	r22, Z
    2afa:	71 81       	ldd	r23, Z+1	; 0x01
    2afc:	82 81       	ldd	r24, Z+2	; 0x02
    2afe:	93 81       	ldd	r25, Z+3	; 0x03
    2b00:	20 e0       	ldi	r18, 0x00	; 0
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	40 e2       	ldi	r20, 0x20	; 32
    2b06:	51 e4       	ldi	r21, 0x41	; 65
    2b08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b0c:	dc 01       	movw	r26, r24
    2b0e:	cb 01       	movw	r24, r22
    2b10:	8e 01       	movw	r16, r28
    2b12:	05 5b       	subi	r16, 0xB5	; 181
    2b14:	1f 4f       	sbci	r17, 0xFF	; 255
    2b16:	bc 01       	movw	r22, r24
    2b18:	cd 01       	movw	r24, r26
    2b1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b1e:	dc 01       	movw	r26, r24
    2b20:	cb 01       	movw	r24, r22
    2b22:	f8 01       	movw	r30, r16
    2b24:	91 83       	std	Z+1, r25	; 0x01
    2b26:	80 83       	st	Z, r24
    2b28:	1f c0       	rjmp	.+62     	; 0x2b68 <LCD_displayCharacter+0x2ba>
    2b2a:	fe 01       	movw	r30, r28
    2b2c:	e7 5b       	subi	r30, 0xB7	; 183
    2b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b30:	88 ec       	ldi	r24, 0xC8	; 200
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	91 83       	std	Z+1, r25	; 0x01
    2b36:	80 83       	st	Z, r24
    2b38:	fe 01       	movw	r30, r28
    2b3a:	e7 5b       	subi	r30, 0xB7	; 183
    2b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3e:	80 81       	ld	r24, Z
    2b40:	91 81       	ldd	r25, Z+1	; 0x01
    2b42:	01 97       	sbiw	r24, 0x01	; 1
    2b44:	f1 f7       	brne	.-4      	; 0x2b42 <LCD_displayCharacter+0x294>
    2b46:	fe 01       	movw	r30, r28
    2b48:	e7 5b       	subi	r30, 0xB7	; 183
    2b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4c:	91 83       	std	Z+1, r25	; 0x01
    2b4e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b50:	de 01       	movw	r26, r28
    2b52:	a5 5b       	subi	r26, 0xB5	; 181
    2b54:	bf 4f       	sbci	r27, 0xFF	; 255
    2b56:	fe 01       	movw	r30, r28
    2b58:	e5 5b       	subi	r30, 0xB5	; 181
    2b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5c:	80 81       	ld	r24, Z
    2b5e:	91 81       	ldd	r25, Z+1	; 0x01
    2b60:	01 97       	sbiw	r24, 0x01	; 1
    2b62:	11 96       	adiw	r26, 0x01	; 1
    2b64:	9c 93       	st	X, r25
    2b66:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b68:	fe 01       	movw	r30, r28
    2b6a:	e5 5b       	subi	r30, 0xB5	; 181
    2b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6e:	80 81       	ld	r24, Z
    2b70:	91 81       	ldd	r25, Z+1	; 0x01
    2b72:	00 97       	sbiw	r24, 0x00	; 0
    2b74:	d1 f6       	brne	.-76     	; 0x2b2a <LCD_displayCharacter+0x27c>
    2b76:	27 c0       	rjmp	.+78     	; 0x2bc6 <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b78:	8e 01       	movw	r16, r28
    2b7a:	05 5b       	subi	r16, 0xB5	; 181
    2b7c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b7e:	fe 01       	movw	r30, r28
    2b80:	e3 5b       	subi	r30, 0xB3	; 179
    2b82:	ff 4f       	sbci	r31, 0xFF	; 255
    2b84:	60 81       	ld	r22, Z
    2b86:	71 81       	ldd	r23, Z+1	; 0x01
    2b88:	82 81       	ldd	r24, Z+2	; 0x02
    2b8a:	93 81       	ldd	r25, Z+3	; 0x03
    2b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	f8 01       	movw	r30, r16
    2b96:	91 83       	std	Z+1, r25	; 0x01
    2b98:	80 83       	st	Z, r24
    2b9a:	de 01       	movw	r26, r28
    2b9c:	a9 5b       	subi	r26, 0xB9	; 185
    2b9e:	bf 4f       	sbci	r27, 0xFF	; 255
    2ba0:	fe 01       	movw	r30, r28
    2ba2:	e5 5b       	subi	r30, 0xB5	; 181
    2ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba6:	80 81       	ld	r24, Z
    2ba8:	91 81       	ldd	r25, Z+1	; 0x01
    2baa:	8d 93       	st	X+, r24
    2bac:	9c 93       	st	X, r25
    2bae:	fe 01       	movw	r30, r28
    2bb0:	e9 5b       	subi	r30, 0xB9	; 185
    2bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb4:	80 81       	ld	r24, Z
    2bb6:	91 81       	ldd	r25, Z+1	; 0x01
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	f1 f7       	brne	.-4      	; 0x2bb8 <LCD_displayCharacter+0x30a>
    2bbc:	fe 01       	movw	r30, r28
    2bbe:	e9 5b       	subi	r30, 0xB9	; 185
    2bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc2:	91 83       	std	Z+1, r25	; 0x01
    2bc4:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
    2bc6:	a8 e3       	ldi	r26, 0x38	; 56
    2bc8:	b0 e0       	ldi	r27, 0x00	; 0
    2bca:	e8 e3       	ldi	r30, 0x38	; 56
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	80 81       	ld	r24, Z
    2bd0:	98 2f       	mov	r25, r24
    2bd2:	9f 70       	andi	r25, 0x0F	; 15
    2bd4:	fe 01       	movw	r30, r28
    2bd6:	ed 59       	subi	r30, 0x9D	; 157
    2bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bda:	80 81       	ld	r24, Z
    2bdc:	80 7f       	andi	r24, 0xF0	; 240
    2bde:	89 2b       	or	r24, r25
    2be0:	8c 93       	st	X, r24
    2be2:	fe 01       	movw	r30, r28
    2be4:	ed 5b       	subi	r30, 0xBD	; 189
    2be6:	ff 4f       	sbci	r31, 0xFF	; 255
    2be8:	80 e0       	ldi	r24, 0x00	; 0
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	a0 e8       	ldi	r26, 0x80	; 128
    2bee:	bf e3       	ldi	r27, 0x3F	; 63
    2bf0:	80 83       	st	Z, r24
    2bf2:	91 83       	std	Z+1, r25	; 0x01
    2bf4:	a2 83       	std	Z+2, r26	; 0x02
    2bf6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bf8:	8e 01       	movw	r16, r28
    2bfa:	01 5c       	subi	r16, 0xC1	; 193
    2bfc:	1f 4f       	sbci	r17, 0xFF	; 255
    2bfe:	fe 01       	movw	r30, r28
    2c00:	ed 5b       	subi	r30, 0xBD	; 189
    2c02:	ff 4f       	sbci	r31, 0xFF	; 255
    2c04:	60 81       	ld	r22, Z
    2c06:	71 81       	ldd	r23, Z+1	; 0x01
    2c08:	82 81       	ldd	r24, Z+2	; 0x02
    2c0a:	93 81       	ldd	r25, Z+3	; 0x03
    2c0c:	20 e0       	ldi	r18, 0x00	; 0
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	4a ef       	ldi	r20, 0xFA	; 250
    2c12:	54 e4       	ldi	r21, 0x44	; 68
    2c14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c18:	dc 01       	movw	r26, r24
    2c1a:	cb 01       	movw	r24, r22
    2c1c:	f8 01       	movw	r30, r16
    2c1e:	80 83       	st	Z, r24
    2c20:	91 83       	std	Z+1, r25	; 0x01
    2c22:	a2 83       	std	Z+2, r26	; 0x02
    2c24:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c26:	fe 01       	movw	r30, r28
    2c28:	ff 96       	adiw	r30, 0x3f	; 63
    2c2a:	60 81       	ld	r22, Z
    2c2c:	71 81       	ldd	r23, Z+1	; 0x01
    2c2e:	82 81       	ldd	r24, Z+2	; 0x02
    2c30:	93 81       	ldd	r25, Z+3	; 0x03
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	40 e8       	ldi	r20, 0x80	; 128
    2c38:	5f e3       	ldi	r21, 0x3F	; 63
    2c3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c3e:	88 23       	and	r24, r24
    2c40:	2c f4       	brge	.+10     	; 0x2c4c <LCD_displayCharacter+0x39e>
		__ticks = 1;
    2c42:	81 e0       	ldi	r24, 0x01	; 1
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	9e af       	std	Y+62, r25	; 0x3e
    2c48:	8d af       	std	Y+61, r24	; 0x3d
    2c4a:	46 c0       	rjmp	.+140    	; 0x2cd8 <LCD_displayCharacter+0x42a>
	else if (__tmp > 65535)
    2c4c:	fe 01       	movw	r30, r28
    2c4e:	ff 96       	adiw	r30, 0x3f	; 63
    2c50:	60 81       	ld	r22, Z
    2c52:	71 81       	ldd	r23, Z+1	; 0x01
    2c54:	82 81       	ldd	r24, Z+2	; 0x02
    2c56:	93 81       	ldd	r25, Z+3	; 0x03
    2c58:	20 e0       	ldi	r18, 0x00	; 0
    2c5a:	3f ef       	ldi	r19, 0xFF	; 255
    2c5c:	4f e7       	ldi	r20, 0x7F	; 127
    2c5e:	57 e4       	ldi	r21, 0x47	; 71
    2c60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c64:	18 16       	cp	r1, r24
    2c66:	64 f5       	brge	.+88     	; 0x2cc0 <LCD_displayCharacter+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c68:	fe 01       	movw	r30, r28
    2c6a:	ed 5b       	subi	r30, 0xBD	; 189
    2c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6e:	60 81       	ld	r22, Z
    2c70:	71 81       	ldd	r23, Z+1	; 0x01
    2c72:	82 81       	ldd	r24, Z+2	; 0x02
    2c74:	93 81       	ldd	r25, Z+3	; 0x03
    2c76:	20 e0       	ldi	r18, 0x00	; 0
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	40 e2       	ldi	r20, 0x20	; 32
    2c7c:	51 e4       	ldi	r21, 0x41	; 65
    2c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	bc 01       	movw	r22, r24
    2c88:	cd 01       	movw	r24, r26
    2c8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	9e af       	std	Y+62, r25	; 0x3e
    2c94:	8d af       	std	Y+61, r24	; 0x3d
    2c96:	0f c0       	rjmp	.+30     	; 0x2cb6 <LCD_displayCharacter+0x408>
    2c98:	88 ec       	ldi	r24, 0xC8	; 200
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	9c af       	std	Y+60, r25	; 0x3c
    2c9e:	8b af       	std	Y+59, r24	; 0x3b
    2ca0:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ca2:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ca4:	01 97       	sbiw	r24, 0x01	; 1
    2ca6:	f1 f7       	brne	.-4      	; 0x2ca4 <LCD_displayCharacter+0x3f6>
    2ca8:	9c af       	std	Y+60, r25	; 0x3c
    2caa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cac:	8d ad       	ldd	r24, Y+61	; 0x3d
    2cae:	9e ad       	ldd	r25, Y+62	; 0x3e
    2cb0:	01 97       	sbiw	r24, 0x01	; 1
    2cb2:	9e af       	std	Y+62, r25	; 0x3e
    2cb4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cb6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2cb8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2cba:	00 97       	sbiw	r24, 0x00	; 0
    2cbc:	69 f7       	brne	.-38     	; 0x2c98 <LCD_displayCharacter+0x3ea>
    2cbe:	16 c0       	rjmp	.+44     	; 0x2cec <LCD_displayCharacter+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cc0:	fe 01       	movw	r30, r28
    2cc2:	ff 96       	adiw	r30, 0x3f	; 63
    2cc4:	60 81       	ld	r22, Z
    2cc6:	71 81       	ldd	r23, Z+1	; 0x01
    2cc8:	82 81       	ldd	r24, Z+2	; 0x02
    2cca:	93 81       	ldd	r25, Z+3	; 0x03
    2ccc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd0:	dc 01       	movw	r26, r24
    2cd2:	cb 01       	movw	r24, r22
    2cd4:	9e af       	std	Y+62, r25	; 0x3e
    2cd6:	8d af       	std	Y+61, r24	; 0x3d
    2cd8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2cda:	9e ad       	ldd	r25, Y+62	; 0x3e
    2cdc:	9a af       	std	Y+58, r25	; 0x3a
    2cde:	89 af       	std	Y+57, r24	; 0x39
    2ce0:	89 ad       	ldd	r24, Y+57	; 0x39
    2ce2:	9a ad       	ldd	r25, Y+58	; 0x3a
    2ce4:	01 97       	sbiw	r24, 0x01	; 1
    2ce6:	f1 f7       	brne	.-4      	; 0x2ce4 <LCD_displayCharacter+0x436>
    2ce8:	9a af       	std	Y+58, r25	; 0x3a
    2cea:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2cec:	a8 e3       	ldi	r26, 0x38	; 56
    2cee:	b0 e0       	ldi	r27, 0x00	; 0
    2cf0:	e8 e3       	ldi	r30, 0x38	; 56
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	80 81       	ld	r24, Z
    2cf6:	8b 7f       	andi	r24, 0xFB	; 251
    2cf8:	8c 93       	st	X, r24
    2cfa:	80 e0       	ldi	r24, 0x00	; 0
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	a0 e8       	ldi	r26, 0x80	; 128
    2d00:	bf e3       	ldi	r27, 0x3F	; 63
    2d02:	8d ab       	std	Y+53, r24	; 0x35
    2d04:	9e ab       	std	Y+54, r25	; 0x36
    2d06:	af ab       	std	Y+55, r26	; 0x37
    2d08:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d0a:	6d a9       	ldd	r22, Y+53	; 0x35
    2d0c:	7e a9       	ldd	r23, Y+54	; 0x36
    2d0e:	8f a9       	ldd	r24, Y+55	; 0x37
    2d10:	98 ad       	ldd	r25, Y+56	; 0x38
    2d12:	20 e0       	ldi	r18, 0x00	; 0
    2d14:	30 e0       	ldi	r19, 0x00	; 0
    2d16:	4a ef       	ldi	r20, 0xFA	; 250
    2d18:	54 e4       	ldi	r21, 0x44	; 68
    2d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d1e:	dc 01       	movw	r26, r24
    2d20:	cb 01       	movw	r24, r22
    2d22:	89 ab       	std	Y+49, r24	; 0x31
    2d24:	9a ab       	std	Y+50, r25	; 0x32
    2d26:	ab ab       	std	Y+51, r26	; 0x33
    2d28:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d2a:	69 a9       	ldd	r22, Y+49	; 0x31
    2d2c:	7a a9       	ldd	r23, Y+50	; 0x32
    2d2e:	8b a9       	ldd	r24, Y+51	; 0x33
    2d30:	9c a9       	ldd	r25, Y+52	; 0x34
    2d32:	20 e0       	ldi	r18, 0x00	; 0
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	40 e8       	ldi	r20, 0x80	; 128
    2d38:	5f e3       	ldi	r21, 0x3F	; 63
    2d3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d3e:	88 23       	and	r24, r24
    2d40:	2c f4       	brge	.+10     	; 0x2d4c <LCD_displayCharacter+0x49e>
		__ticks = 1;
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	98 ab       	std	Y+48, r25	; 0x30
    2d48:	8f a7       	std	Y+47, r24	; 0x2f
    2d4a:	3f c0       	rjmp	.+126    	; 0x2dca <LCD_displayCharacter+0x51c>
	else if (__tmp > 65535)
    2d4c:	69 a9       	ldd	r22, Y+49	; 0x31
    2d4e:	7a a9       	ldd	r23, Y+50	; 0x32
    2d50:	8b a9       	ldd	r24, Y+51	; 0x33
    2d52:	9c a9       	ldd	r25, Y+52	; 0x34
    2d54:	20 e0       	ldi	r18, 0x00	; 0
    2d56:	3f ef       	ldi	r19, 0xFF	; 255
    2d58:	4f e7       	ldi	r20, 0x7F	; 127
    2d5a:	57 e4       	ldi	r21, 0x47	; 71
    2d5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d60:	18 16       	cp	r1, r24
    2d62:	4c f5       	brge	.+82     	; 0x2db6 <LCD_displayCharacter+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d64:	6d a9       	ldd	r22, Y+53	; 0x35
    2d66:	7e a9       	ldd	r23, Y+54	; 0x36
    2d68:	8f a9       	ldd	r24, Y+55	; 0x37
    2d6a:	98 ad       	ldd	r25, Y+56	; 0x38
    2d6c:	20 e0       	ldi	r18, 0x00	; 0
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	40 e2       	ldi	r20, 0x20	; 32
    2d72:	51 e4       	ldi	r21, 0x41	; 65
    2d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d78:	dc 01       	movw	r26, r24
    2d7a:	cb 01       	movw	r24, r22
    2d7c:	bc 01       	movw	r22, r24
    2d7e:	cd 01       	movw	r24, r26
    2d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d84:	dc 01       	movw	r26, r24
    2d86:	cb 01       	movw	r24, r22
    2d88:	98 ab       	std	Y+48, r25	; 0x30
    2d8a:	8f a7       	std	Y+47, r24	; 0x2f
    2d8c:	0f c0       	rjmp	.+30     	; 0x2dac <LCD_displayCharacter+0x4fe>
    2d8e:	88 ec       	ldi	r24, 0xC8	; 200
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	9e a7       	std	Y+46, r25	; 0x2e
    2d94:	8d a7       	std	Y+45, r24	; 0x2d
    2d96:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d98:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d9a:	01 97       	sbiw	r24, 0x01	; 1
    2d9c:	f1 f7       	brne	.-4      	; 0x2d9a <LCD_displayCharacter+0x4ec>
    2d9e:	9e a7       	std	Y+46, r25	; 0x2e
    2da0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2da4:	98 a9       	ldd	r25, Y+48	; 0x30
    2da6:	01 97       	sbiw	r24, 0x01	; 1
    2da8:	98 ab       	std	Y+48, r25	; 0x30
    2daa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dac:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dae:	98 a9       	ldd	r25, Y+48	; 0x30
    2db0:	00 97       	sbiw	r24, 0x00	; 0
    2db2:	69 f7       	brne	.-38     	; 0x2d8e <LCD_displayCharacter+0x4e0>
    2db4:	14 c0       	rjmp	.+40     	; 0x2dde <LCD_displayCharacter+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2db6:	69 a9       	ldd	r22, Y+49	; 0x31
    2db8:	7a a9       	ldd	r23, Y+50	; 0x32
    2dba:	8b a9       	ldd	r24, Y+51	; 0x33
    2dbc:	9c a9       	ldd	r25, Y+52	; 0x34
    2dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc2:	dc 01       	movw	r26, r24
    2dc4:	cb 01       	movw	r24, r22
    2dc6:	98 ab       	std	Y+48, r25	; 0x30
    2dc8:	8f a7       	std	Y+47, r24	; 0x2f
    2dca:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dcc:	98 a9       	ldd	r25, Y+48	; 0x30
    2dce:	9c a7       	std	Y+44, r25	; 0x2c
    2dd0:	8b a7       	std	Y+43, r24	; 0x2b
    2dd2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2dd4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2dd6:	01 97       	sbiw	r24, 0x01	; 1
    2dd8:	f1 f7       	brne	.-4      	; 0x2dd6 <LCD_displayCharacter+0x528>
    2dda:	9c a7       	std	Y+44, r25	; 0x2c
    2ddc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2dde:	a8 e3       	ldi	r26, 0x38	; 56
    2de0:	b0 e0       	ldi	r27, 0x00	; 0
    2de2:	e8 e3       	ldi	r30, 0x38	; 56
    2de4:	f0 e0       	ldi	r31, 0x00	; 0
    2de6:	80 81       	ld	r24, Z
    2de8:	84 60       	ori	r24, 0x04	; 4
    2dea:	8c 93       	st	X, r24
    2dec:	80 e0       	ldi	r24, 0x00	; 0
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	a0 e8       	ldi	r26, 0x80	; 128
    2df2:	bf e3       	ldi	r27, 0x3F	; 63
    2df4:	8f a3       	std	Y+39, r24	; 0x27
    2df6:	98 a7       	std	Y+40, r25	; 0x28
    2df8:	a9 a7       	std	Y+41, r26	; 0x29
    2dfa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dfc:	6f a1       	ldd	r22, Y+39	; 0x27
    2dfe:	78 a5       	ldd	r23, Y+40	; 0x28
    2e00:	89 a5       	ldd	r24, Y+41	; 0x29
    2e02:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e04:	20 e0       	ldi	r18, 0x00	; 0
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	4a ef       	ldi	r20, 0xFA	; 250
    2e0a:	54 e4       	ldi	r21, 0x44	; 68
    2e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e10:	dc 01       	movw	r26, r24
    2e12:	cb 01       	movw	r24, r22
    2e14:	8b a3       	std	Y+35, r24	; 0x23
    2e16:	9c a3       	std	Y+36, r25	; 0x24
    2e18:	ad a3       	std	Y+37, r26	; 0x25
    2e1a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e1c:	6b a1       	ldd	r22, Y+35	; 0x23
    2e1e:	7c a1       	ldd	r23, Y+36	; 0x24
    2e20:	8d a1       	ldd	r24, Y+37	; 0x25
    2e22:	9e a1       	ldd	r25, Y+38	; 0x26
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	40 e8       	ldi	r20, 0x80	; 128
    2e2a:	5f e3       	ldi	r21, 0x3F	; 63
    2e2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e30:	88 23       	and	r24, r24
    2e32:	2c f4       	brge	.+10     	; 0x2e3e <LCD_displayCharacter+0x590>
		__ticks = 1;
    2e34:	81 e0       	ldi	r24, 0x01	; 1
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	9a a3       	std	Y+34, r25	; 0x22
    2e3a:	89 a3       	std	Y+33, r24	; 0x21
    2e3c:	3f c0       	rjmp	.+126    	; 0x2ebc <LCD_displayCharacter+0x60e>
	else if (__tmp > 65535)
    2e3e:	6b a1       	ldd	r22, Y+35	; 0x23
    2e40:	7c a1       	ldd	r23, Y+36	; 0x24
    2e42:	8d a1       	ldd	r24, Y+37	; 0x25
    2e44:	9e a1       	ldd	r25, Y+38	; 0x26
    2e46:	20 e0       	ldi	r18, 0x00	; 0
    2e48:	3f ef       	ldi	r19, 0xFF	; 255
    2e4a:	4f e7       	ldi	r20, 0x7F	; 127
    2e4c:	57 e4       	ldi	r21, 0x47	; 71
    2e4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e52:	18 16       	cp	r1, r24
    2e54:	4c f5       	brge	.+82     	; 0x2ea8 <LCD_displayCharacter+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e56:	6f a1       	ldd	r22, Y+39	; 0x27
    2e58:	78 a5       	ldd	r23, Y+40	; 0x28
    2e5a:	89 a5       	ldd	r24, Y+41	; 0x29
    2e5c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e5e:	20 e0       	ldi	r18, 0x00	; 0
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	40 e2       	ldi	r20, 0x20	; 32
    2e64:	51 e4       	ldi	r21, 0x41	; 65
    2e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6a:	dc 01       	movw	r26, r24
    2e6c:	cb 01       	movw	r24, r22
    2e6e:	bc 01       	movw	r22, r24
    2e70:	cd 01       	movw	r24, r26
    2e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e76:	dc 01       	movw	r26, r24
    2e78:	cb 01       	movw	r24, r22
    2e7a:	9a a3       	std	Y+34, r25	; 0x22
    2e7c:	89 a3       	std	Y+33, r24	; 0x21
    2e7e:	0f c0       	rjmp	.+30     	; 0x2e9e <LCD_displayCharacter+0x5f0>
    2e80:	88 ec       	ldi	r24, 0xC8	; 200
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	98 a3       	std	Y+32, r25	; 0x20
    2e86:	8f 8f       	std	Y+31, r24	; 0x1f
    2e88:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e8a:	98 a1       	ldd	r25, Y+32	; 0x20
    2e8c:	01 97       	sbiw	r24, 0x01	; 1
    2e8e:	f1 f7       	brne	.-4      	; 0x2e8c <LCD_displayCharacter+0x5de>
    2e90:	98 a3       	std	Y+32, r25	; 0x20
    2e92:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e94:	89 a1       	ldd	r24, Y+33	; 0x21
    2e96:	9a a1       	ldd	r25, Y+34	; 0x22
    2e98:	01 97       	sbiw	r24, 0x01	; 1
    2e9a:	9a a3       	std	Y+34, r25	; 0x22
    2e9c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e9e:	89 a1       	ldd	r24, Y+33	; 0x21
    2ea0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ea2:	00 97       	sbiw	r24, 0x00	; 0
    2ea4:	69 f7       	brne	.-38     	; 0x2e80 <LCD_displayCharacter+0x5d2>
    2ea6:	14 c0       	rjmp	.+40     	; 0x2ed0 <LCD_displayCharacter+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ea8:	6b a1       	ldd	r22, Y+35	; 0x23
    2eaa:	7c a1       	ldd	r23, Y+36	; 0x24
    2eac:	8d a1       	ldd	r24, Y+37	; 0x25
    2eae:	9e a1       	ldd	r25, Y+38	; 0x26
    2eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	cb 01       	movw	r24, r22
    2eb8:	9a a3       	std	Y+34, r25	; 0x22
    2eba:	89 a3       	std	Y+33, r24	; 0x21
    2ebc:	89 a1       	ldd	r24, Y+33	; 0x21
    2ebe:	9a a1       	ldd	r25, Y+34	; 0x22
    2ec0:	9e 8f       	std	Y+30, r25	; 0x1e
    2ec2:	8d 8f       	std	Y+29, r24	; 0x1d
    2ec4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ec6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ec8:	01 97       	sbiw	r24, 0x01	; 1
    2eca:	f1 f7       	brne	.-4      	; 0x2ec8 <LCD_displayCharacter+0x61a>
    2ecc:	9e 8f       	std	Y+30, r25	; 0x1e
    2ece:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
    2ed0:	a8 e3       	ldi	r26, 0x38	; 56
    2ed2:	b0 e0       	ldi	r27, 0x00	; 0
    2ed4:	e8 e3       	ldi	r30, 0x38	; 56
    2ed6:	f0 e0       	ldi	r31, 0x00	; 0
    2ed8:	80 81       	ld	r24, Z
    2eda:	28 2f       	mov	r18, r24
    2edc:	2f 70       	andi	r18, 0x0F	; 15
    2ede:	fe 01       	movw	r30, r28
    2ee0:	ed 59       	subi	r30, 0x9D	; 157
    2ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee4:	80 81       	ld	r24, Z
    2ee6:	88 2f       	mov	r24, r24
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	82 95       	swap	r24
    2eec:	92 95       	swap	r25
    2eee:	90 7f       	andi	r25, 0xF0	; 240
    2ef0:	98 27       	eor	r25, r24
    2ef2:	80 7f       	andi	r24, 0xF0	; 240
    2ef4:	98 27       	eor	r25, r24
    2ef6:	82 2b       	or	r24, r18
    2ef8:	8c 93       	st	X, r24
    2efa:	80 e0       	ldi	r24, 0x00	; 0
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	a0 e8       	ldi	r26, 0x80	; 128
    2f00:	bf e3       	ldi	r27, 0x3F	; 63
    2f02:	89 8f       	std	Y+25, r24	; 0x19
    2f04:	9a 8f       	std	Y+26, r25	; 0x1a
    2f06:	ab 8f       	std	Y+27, r26	; 0x1b
    2f08:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f0a:	69 8d       	ldd	r22, Y+25	; 0x19
    2f0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f12:	20 e0       	ldi	r18, 0x00	; 0
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	4a ef       	ldi	r20, 0xFA	; 250
    2f18:	54 e4       	ldi	r21, 0x44	; 68
    2f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f1e:	dc 01       	movw	r26, r24
    2f20:	cb 01       	movw	r24, r22
    2f22:	8d 8b       	std	Y+21, r24	; 0x15
    2f24:	9e 8b       	std	Y+22, r25	; 0x16
    2f26:	af 8b       	std	Y+23, r26	; 0x17
    2f28:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f2a:	6d 89       	ldd	r22, Y+21	; 0x15
    2f2c:	7e 89       	ldd	r23, Y+22	; 0x16
    2f2e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f30:	98 8d       	ldd	r25, Y+24	; 0x18
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	40 e8       	ldi	r20, 0x80	; 128
    2f38:	5f e3       	ldi	r21, 0x3F	; 63
    2f3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f3e:	88 23       	and	r24, r24
    2f40:	2c f4       	brge	.+10     	; 0x2f4c <LCD_displayCharacter+0x69e>
		__ticks = 1;
    2f42:	81 e0       	ldi	r24, 0x01	; 1
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	9c 8b       	std	Y+20, r25	; 0x14
    2f48:	8b 8b       	std	Y+19, r24	; 0x13
    2f4a:	3f c0       	rjmp	.+126    	; 0x2fca <LCD_displayCharacter+0x71c>
	else if (__tmp > 65535)
    2f4c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f4e:	7e 89       	ldd	r23, Y+22	; 0x16
    2f50:	8f 89       	ldd	r24, Y+23	; 0x17
    2f52:	98 8d       	ldd	r25, Y+24	; 0x18
    2f54:	20 e0       	ldi	r18, 0x00	; 0
    2f56:	3f ef       	ldi	r19, 0xFF	; 255
    2f58:	4f e7       	ldi	r20, 0x7F	; 127
    2f5a:	57 e4       	ldi	r21, 0x47	; 71
    2f5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f60:	18 16       	cp	r1, r24
    2f62:	4c f5       	brge	.+82     	; 0x2fb6 <LCD_displayCharacter+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f64:	69 8d       	ldd	r22, Y+25	; 0x19
    2f66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	40 e2       	ldi	r20, 0x20	; 32
    2f72:	51 e4       	ldi	r21, 0x41	; 65
    2f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f78:	dc 01       	movw	r26, r24
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	bc 01       	movw	r22, r24
    2f7e:	cd 01       	movw	r24, r26
    2f80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f84:	dc 01       	movw	r26, r24
    2f86:	cb 01       	movw	r24, r22
    2f88:	9c 8b       	std	Y+20, r25	; 0x14
    2f8a:	8b 8b       	std	Y+19, r24	; 0x13
    2f8c:	0f c0       	rjmp	.+30     	; 0x2fac <LCD_displayCharacter+0x6fe>
    2f8e:	88 ec       	ldi	r24, 0xC8	; 200
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	9a 8b       	std	Y+18, r25	; 0x12
    2f94:	89 8b       	std	Y+17, r24	; 0x11
    2f96:	89 89       	ldd	r24, Y+17	; 0x11
    2f98:	9a 89       	ldd	r25, Y+18	; 0x12
    2f9a:	01 97       	sbiw	r24, 0x01	; 1
    2f9c:	f1 f7       	brne	.-4      	; 0x2f9a <LCD_displayCharacter+0x6ec>
    2f9e:	9a 8b       	std	Y+18, r25	; 0x12
    2fa0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fa2:	8b 89       	ldd	r24, Y+19	; 0x13
    2fa4:	9c 89       	ldd	r25, Y+20	; 0x14
    2fa6:	01 97       	sbiw	r24, 0x01	; 1
    2fa8:	9c 8b       	std	Y+20, r25	; 0x14
    2faa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fac:	8b 89       	ldd	r24, Y+19	; 0x13
    2fae:	9c 89       	ldd	r25, Y+20	; 0x14
    2fb0:	00 97       	sbiw	r24, 0x00	; 0
    2fb2:	69 f7       	brne	.-38     	; 0x2f8e <LCD_displayCharacter+0x6e0>
    2fb4:	14 c0       	rjmp	.+40     	; 0x2fde <LCD_displayCharacter+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fb6:	6d 89       	ldd	r22, Y+21	; 0x15
    2fb8:	7e 89       	ldd	r23, Y+22	; 0x16
    2fba:	8f 89       	ldd	r24, Y+23	; 0x17
    2fbc:	98 8d       	ldd	r25, Y+24	; 0x18
    2fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	9c 8b       	std	Y+20, r25	; 0x14
    2fc8:	8b 8b       	std	Y+19, r24	; 0x13
    2fca:	8b 89       	ldd	r24, Y+19	; 0x13
    2fcc:	9c 89       	ldd	r25, Y+20	; 0x14
    2fce:	98 8b       	std	Y+16, r25	; 0x10
    2fd0:	8f 87       	std	Y+15, r24	; 0x0f
    2fd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fd4:	98 89       	ldd	r25, Y+16	; 0x10
    2fd6:	01 97       	sbiw	r24, 0x01	; 1
    2fd8:	f1 f7       	brne	.-4      	; 0x2fd6 <LCD_displayCharacter+0x728>
    2fda:	98 8b       	std	Y+16, r25	; 0x10
    2fdc:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2fde:	a8 e3       	ldi	r26, 0x38	; 56
    2fe0:	b0 e0       	ldi	r27, 0x00	; 0
    2fe2:	e8 e3       	ldi	r30, 0x38	; 56
    2fe4:	f0 e0       	ldi	r31, 0x00	; 0
    2fe6:	80 81       	ld	r24, Z
    2fe8:	8b 7f       	andi	r24, 0xFB	; 251
    2fea:	8c 93       	st	X, r24
    2fec:	80 e0       	ldi	r24, 0x00	; 0
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	a0 e8       	ldi	r26, 0x80	; 128
    2ff2:	bf e3       	ldi	r27, 0x3F	; 63
    2ff4:	8b 87       	std	Y+11, r24	; 0x0b
    2ff6:	9c 87       	std	Y+12, r25	; 0x0c
    2ff8:	ad 87       	std	Y+13, r26	; 0x0d
    2ffa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ffc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ffe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3000:	8d 85       	ldd	r24, Y+13	; 0x0d
    3002:	9e 85       	ldd	r25, Y+14	; 0x0e
    3004:	20 e0       	ldi	r18, 0x00	; 0
    3006:	30 e0       	ldi	r19, 0x00	; 0
    3008:	4a ef       	ldi	r20, 0xFA	; 250
    300a:	54 e4       	ldi	r21, 0x44	; 68
    300c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3010:	dc 01       	movw	r26, r24
    3012:	cb 01       	movw	r24, r22
    3014:	8f 83       	std	Y+7, r24	; 0x07
    3016:	98 87       	std	Y+8, r25	; 0x08
    3018:	a9 87       	std	Y+9, r26	; 0x09
    301a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    301c:	6f 81       	ldd	r22, Y+7	; 0x07
    301e:	78 85       	ldd	r23, Y+8	; 0x08
    3020:	89 85       	ldd	r24, Y+9	; 0x09
    3022:	9a 85       	ldd	r25, Y+10	; 0x0a
    3024:	20 e0       	ldi	r18, 0x00	; 0
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	40 e8       	ldi	r20, 0x80	; 128
    302a:	5f e3       	ldi	r21, 0x3F	; 63
    302c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3030:	88 23       	and	r24, r24
    3032:	2c f4       	brge	.+10     	; 0x303e <LCD_displayCharacter+0x790>
		__ticks = 1;
    3034:	81 e0       	ldi	r24, 0x01	; 1
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	9e 83       	std	Y+6, r25	; 0x06
    303a:	8d 83       	std	Y+5, r24	; 0x05
    303c:	3f c0       	rjmp	.+126    	; 0x30bc <LCD_displayCharacter+0x80e>
	else if (__tmp > 65535)
    303e:	6f 81       	ldd	r22, Y+7	; 0x07
    3040:	78 85       	ldd	r23, Y+8	; 0x08
    3042:	89 85       	ldd	r24, Y+9	; 0x09
    3044:	9a 85       	ldd	r25, Y+10	; 0x0a
    3046:	20 e0       	ldi	r18, 0x00	; 0
    3048:	3f ef       	ldi	r19, 0xFF	; 255
    304a:	4f e7       	ldi	r20, 0x7F	; 127
    304c:	57 e4       	ldi	r21, 0x47	; 71
    304e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3052:	18 16       	cp	r1, r24
    3054:	4c f5       	brge	.+82     	; 0x30a8 <LCD_displayCharacter+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3056:	6b 85       	ldd	r22, Y+11	; 0x0b
    3058:	7c 85       	ldd	r23, Y+12	; 0x0c
    305a:	8d 85       	ldd	r24, Y+13	; 0x0d
    305c:	9e 85       	ldd	r25, Y+14	; 0x0e
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	40 e2       	ldi	r20, 0x20	; 32
    3064:	51 e4       	ldi	r21, 0x41	; 65
    3066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    306a:	dc 01       	movw	r26, r24
    306c:	cb 01       	movw	r24, r22
    306e:	bc 01       	movw	r22, r24
    3070:	cd 01       	movw	r24, r26
    3072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3076:	dc 01       	movw	r26, r24
    3078:	cb 01       	movw	r24, r22
    307a:	9e 83       	std	Y+6, r25	; 0x06
    307c:	8d 83       	std	Y+5, r24	; 0x05
    307e:	0f c0       	rjmp	.+30     	; 0x309e <LCD_displayCharacter+0x7f0>
    3080:	88 ec       	ldi	r24, 0xC8	; 200
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	9c 83       	std	Y+4, r25	; 0x04
    3086:	8b 83       	std	Y+3, r24	; 0x03
    3088:	8b 81       	ldd	r24, Y+3	; 0x03
    308a:	9c 81       	ldd	r25, Y+4	; 0x04
    308c:	01 97       	sbiw	r24, 0x01	; 1
    308e:	f1 f7       	brne	.-4      	; 0x308c <LCD_displayCharacter+0x7de>
    3090:	9c 83       	std	Y+4, r25	; 0x04
    3092:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3094:	8d 81       	ldd	r24, Y+5	; 0x05
    3096:	9e 81       	ldd	r25, Y+6	; 0x06
    3098:	01 97       	sbiw	r24, 0x01	; 1
    309a:	9e 83       	std	Y+6, r25	; 0x06
    309c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    309e:	8d 81       	ldd	r24, Y+5	; 0x05
    30a0:	9e 81       	ldd	r25, Y+6	; 0x06
    30a2:	00 97       	sbiw	r24, 0x00	; 0
    30a4:	69 f7       	brne	.-38     	; 0x3080 <LCD_displayCharacter+0x7d2>
    30a6:	14 c0       	rjmp	.+40     	; 0x30d0 <LCD_displayCharacter+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a8:	6f 81       	ldd	r22, Y+7	; 0x07
    30aa:	78 85       	ldd	r23, Y+8	; 0x08
    30ac:	89 85       	ldd	r24, Y+9	; 0x09
    30ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    30b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b4:	dc 01       	movw	r26, r24
    30b6:	cb 01       	movw	r24, r22
    30b8:	9e 83       	std	Y+6, r25	; 0x06
    30ba:	8d 83       	std	Y+5, r24	; 0x05
    30bc:	8d 81       	ldd	r24, Y+5	; 0x05
    30be:	9e 81       	ldd	r25, Y+6	; 0x06
    30c0:	9a 83       	std	Y+2, r25	; 0x02
    30c2:	89 83       	std	Y+1, r24	; 0x01
    30c4:	89 81       	ldd	r24, Y+1	; 0x01
    30c6:	9a 81       	ldd	r25, Y+2	; 0x02
    30c8:	01 97       	sbiw	r24, 0x01	; 1
    30ca:	f1 f7       	brne	.-4      	; 0x30c8 <LCD_displayCharacter+0x81a>
    30cc:	9a 83       	std	Y+2, r25	; 0x02
    30ce:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = data; /* out the required data to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    30d0:	cd 59       	subi	r28, 0x9D	; 157
    30d2:	df 4f       	sbci	r29, 0xFF	; 255
    30d4:	0f b6       	in	r0, 0x3f	; 63
    30d6:	f8 94       	cli
    30d8:	de bf       	out	0x3e, r29	; 62
    30da:	0f be       	out	0x3f, r0	; 63
    30dc:	cd bf       	out	0x3d, r28	; 61
    30de:	cf 91       	pop	r28
    30e0:	df 91       	pop	r29
    30e2:	1f 91       	pop	r17
    30e4:	0f 91       	pop	r16
    30e6:	08 95       	ret

000030e8 <LCD_displayString>:

void LCD_displayString(const uint8 *Str)
{
    30e8:	df 93       	push	r29
    30ea:	cf 93       	push	r28
    30ec:	00 d0       	rcall	.+0      	; 0x30ee <LCD_displayString+0x6>
    30ee:	0f 92       	push	r0
    30f0:	cd b7       	in	r28, 0x3d	; 61
    30f2:	de b7       	in	r29, 0x3e	; 62
    30f4:	9b 83       	std	Y+3, r25	; 0x03
    30f6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    30f8:	19 82       	std	Y+1, r1	; 0x01
    30fa:	0e c0       	rjmp	.+28     	; 0x3118 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    30fc:	89 81       	ldd	r24, Y+1	; 0x01
    30fe:	28 2f       	mov	r18, r24
    3100:	30 e0       	ldi	r19, 0x00	; 0
    3102:	8a 81       	ldd	r24, Y+2	; 0x02
    3104:	9b 81       	ldd	r25, Y+3	; 0x03
    3106:	fc 01       	movw	r30, r24
    3108:	e2 0f       	add	r30, r18
    310a:	f3 1f       	adc	r31, r19
    310c:	80 81       	ld	r24, Z
    310e:	0e 94 57 14 	call	0x28ae	; 0x28ae <LCD_displayCharacter>
		i++;
    3112:	89 81       	ldd	r24, Y+1	; 0x01
    3114:	8f 5f       	subi	r24, 0xFF	; 255
    3116:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3118:	89 81       	ldd	r24, Y+1	; 0x01
    311a:	28 2f       	mov	r18, r24
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	8a 81       	ldd	r24, Y+2	; 0x02
    3120:	9b 81       	ldd	r25, Y+3	; 0x03
    3122:	fc 01       	movw	r30, r24
    3124:	e2 0f       	add	r30, r18
    3126:	f3 1f       	adc	r31, r19
    3128:	80 81       	ld	r24, Z
    312a:	88 23       	and	r24, r24
    312c:	39 f7       	brne	.-50     	; 0x30fc <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    312e:	0f 90       	pop	r0
    3130:	0f 90       	pop	r0
    3132:	0f 90       	pop	r0
    3134:	cf 91       	pop	r28
    3136:	df 91       	pop	r29
    3138:	08 95       	ret

0000313a <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    313a:	df 93       	push	r29
    313c:	cf 93       	push	r28
    313e:	00 d0       	rcall	.+0      	; 0x3140 <LCD_goToRowColumn+0x6>
    3140:	00 d0       	rcall	.+0      	; 0x3142 <LCD_goToRowColumn+0x8>
    3142:	0f 92       	push	r0
    3144:	cd b7       	in	r28, 0x3d	; 61
    3146:	de b7       	in	r29, 0x3e	; 62
    3148:	8a 83       	std	Y+2, r24	; 0x02
    314a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    314c:	8a 81       	ldd	r24, Y+2	; 0x02
    314e:	28 2f       	mov	r18, r24
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	3d 83       	std	Y+5, r19	; 0x05
    3154:	2c 83       	std	Y+4, r18	; 0x04
    3156:	8c 81       	ldd	r24, Y+4	; 0x04
    3158:	9d 81       	ldd	r25, Y+5	; 0x05
    315a:	81 30       	cpi	r24, 0x01	; 1
    315c:	91 05       	cpc	r25, r1
    315e:	c1 f0       	breq	.+48     	; 0x3190 <LCD_goToRowColumn+0x56>
    3160:	2c 81       	ldd	r18, Y+4	; 0x04
    3162:	3d 81       	ldd	r19, Y+5	; 0x05
    3164:	22 30       	cpi	r18, 0x02	; 2
    3166:	31 05       	cpc	r19, r1
    3168:	2c f4       	brge	.+10     	; 0x3174 <LCD_goToRowColumn+0x3a>
    316a:	8c 81       	ldd	r24, Y+4	; 0x04
    316c:	9d 81       	ldd	r25, Y+5	; 0x05
    316e:	00 97       	sbiw	r24, 0x00	; 0
    3170:	61 f0       	breq	.+24     	; 0x318a <LCD_goToRowColumn+0x50>
    3172:	19 c0       	rjmp	.+50     	; 0x31a6 <LCD_goToRowColumn+0x6c>
    3174:	2c 81       	ldd	r18, Y+4	; 0x04
    3176:	3d 81       	ldd	r19, Y+5	; 0x05
    3178:	22 30       	cpi	r18, 0x02	; 2
    317a:	31 05       	cpc	r19, r1
    317c:	69 f0       	breq	.+26     	; 0x3198 <LCD_goToRowColumn+0x5e>
    317e:	8c 81       	ldd	r24, Y+4	; 0x04
    3180:	9d 81       	ldd	r25, Y+5	; 0x05
    3182:	83 30       	cpi	r24, 0x03	; 3
    3184:	91 05       	cpc	r25, r1
    3186:	61 f0       	breq	.+24     	; 0x31a0 <LCD_goToRowColumn+0x66>
    3188:	0e c0       	rjmp	.+28     	; 0x31a6 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    318a:	8b 81       	ldd	r24, Y+3	; 0x03
    318c:	89 83       	std	Y+1, r24	; 0x01
    318e:	0b c0       	rjmp	.+22     	; 0x31a6 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    3190:	8b 81       	ldd	r24, Y+3	; 0x03
    3192:	80 5c       	subi	r24, 0xC0	; 192
    3194:	89 83       	std	Y+1, r24	; 0x01
    3196:	07 c0       	rjmp	.+14     	; 0x31a6 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    3198:	8b 81       	ldd	r24, Y+3	; 0x03
    319a:	80 5f       	subi	r24, 0xF0	; 240
    319c:	89 83       	std	Y+1, r24	; 0x01
    319e:	03 c0       	rjmp	.+6      	; 0x31a6 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    31a0:	8b 81       	ldd	r24, Y+3	; 0x03
    31a2:	80 5b       	subi	r24, 0xB0	; 176
    31a4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    31a6:	89 81       	ldd	r24, Y+1	; 0x01
    31a8:	80 68       	ori	r24, 0x80	; 128
    31aa:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_sendCommand>
}
    31ae:	0f 90       	pop	r0
    31b0:	0f 90       	pop	r0
    31b2:	0f 90       	pop	r0
    31b4:	0f 90       	pop	r0
    31b6:	0f 90       	pop	r0
    31b8:	cf 91       	pop	r28
    31ba:	df 91       	pop	r29
    31bc:	08 95       	ret

000031be <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const uint8 *Str)
{
    31be:	df 93       	push	r29
    31c0:	cf 93       	push	r28
    31c2:	00 d0       	rcall	.+0      	; 0x31c4 <LCD_displayStringRowColumn+0x6>
    31c4:	00 d0       	rcall	.+0      	; 0x31c6 <LCD_displayStringRowColumn+0x8>
    31c6:	cd b7       	in	r28, 0x3d	; 61
    31c8:	de b7       	in	r29, 0x3e	; 62
    31ca:	89 83       	std	Y+1, r24	; 0x01
    31cc:	6a 83       	std	Y+2, r22	; 0x02
    31ce:	5c 83       	std	Y+4, r21	; 0x04
    31d0:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    31d2:	89 81       	ldd	r24, Y+1	; 0x01
    31d4:	6a 81       	ldd	r22, Y+2	; 0x02
    31d6:	0e 94 9d 18 	call	0x313a	; 0x313a <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    31da:	8b 81       	ldd	r24, Y+3	; 0x03
    31dc:	9c 81       	ldd	r25, Y+4	; 0x04
    31de:	0e 94 74 18 	call	0x30e8	; 0x30e8 <LCD_displayString>
}
    31e2:	0f 90       	pop	r0
    31e4:	0f 90       	pop	r0
    31e6:	0f 90       	pop	r0
    31e8:	0f 90       	pop	r0
    31ea:	cf 91       	pop	r28
    31ec:	df 91       	pop	r29
    31ee:	08 95       	ret

000031f0 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    31f0:	df 93       	push	r29
    31f2:	cf 93       	push	r28
    31f4:	cd b7       	in	r28, 0x3d	; 61
    31f6:	de b7       	in	r29, 0x3e	; 62
    31f8:	62 97       	sbiw	r28, 0x12	; 18
    31fa:	0f b6       	in	r0, 0x3f	; 63
    31fc:	f8 94       	cli
    31fe:	de bf       	out	0x3e, r29	; 62
    3200:	0f be       	out	0x3f, r0	; 63
    3202:	cd bf       	out	0x3d, r28	; 61
    3204:	9a 8b       	std	Y+18, r25	; 0x12
    3206:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
  itoa(data,buff,10); /* 10 for decimal */
    3208:	89 89       	ldd	r24, Y+17	; 0x11
    320a:	9a 89       	ldd	r25, Y+18	; 0x12
    320c:	9e 01       	movw	r18, r28
    320e:	2f 5f       	subi	r18, 0xFF	; 255
    3210:	3f 4f       	sbci	r19, 0xFF	; 255
    3212:	b9 01       	movw	r22, r18
    3214:	4a e0       	ldi	r20, 0x0A	; 10
    3216:	50 e0       	ldi	r21, 0x00	; 0
    3218:	0e 94 08 1a 	call	0x3410	; 0x3410 <itoa>
   LCD_displayString(buff);
    321c:	ce 01       	movw	r24, r28
    321e:	01 96       	adiw	r24, 0x01	; 1
    3220:	0e 94 74 18 	call	0x30e8	; 0x30e8 <LCD_displayString>
}
    3224:	62 96       	adiw	r28, 0x12	; 18
    3226:	0f b6       	in	r0, 0x3f	; 63
    3228:	f8 94       	cli
    322a:	de bf       	out	0x3e, r29	; 62
    322c:	0f be       	out	0x3f, r0	; 63
    322e:	cd bf       	out	0x3d, r28	; 61
    3230:	cf 91       	pop	r28
    3232:	df 91       	pop	r29
    3234:	08 95       	ret

00003236 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    3236:	df 93       	push	r29
    3238:	cf 93       	push	r28
    323a:	cd b7       	in	r28, 0x3d	; 61
    323c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    323e:	81 e0       	ldi	r24, 0x01	; 1
    3240:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_sendCommand>
}
    3244:	cf 91       	pop	r28
    3246:	df 91       	pop	r29
    3248:	08 95       	ret

0000324a <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    324a:	df 93       	push	r29
    324c:	cf 93       	push	r28
    324e:	cd b7       	in	r28, 0x3d	; 61
    3250:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3252:	eb e2       	ldi	r30, 0x2B	; 43
    3254:	f0 e0       	ldi	r31, 0x00	; 0
    3256:	82 e0       	ldi	r24, 0x02	; 2
    3258:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    325a:	ea e2       	ldi	r30, 0x2A	; 42
    325c:	f0 e0       	ldi	r31, 0x00	; 0
    325e:	88 e1       	ldi	r24, 0x18	; 24
    3260:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    3262:	e0 e4       	ldi	r30, 0x40	; 64
    3264:	f0 e0       	ldi	r31, 0x00	; 0
    3266:	86 e8       	ldi	r24, 0x86	; 134
    3268:	80 83       	st	Z, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    326a:	e0 e4       	ldi	r30, 0x40	; 64
    326c:	f0 e0       	ldi	r31, 0x00	; 0
    326e:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    3270:	e9 e2       	ldi	r30, 0x29	; 41
    3272:	f0 e0       	ldi	r31, 0x00	; 0
    3274:	87 e6       	ldi	r24, 0x67	; 103
    3276:	80 83       	st	Z, r24
}
    3278:	cf 91       	pop	r28
    327a:	df 91       	pop	r29
    327c:	08 95       	ret

0000327e <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    327e:	df 93       	push	r29
    3280:	cf 93       	push	r28
    3282:	0f 92       	push	r0
    3284:	cd b7       	in	r28, 0x3d	; 61
    3286:	de b7       	in	r29, 0x3e	; 62
    3288:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    328a:	eb e2       	ldi	r30, 0x2B	; 43
    328c:	f0 e0       	ldi	r31, 0x00	; 0
    328e:	80 81       	ld	r24, Z
    3290:	88 2f       	mov	r24, r24
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	80 72       	andi	r24, 0x20	; 32
    3296:	90 70       	andi	r25, 0x00	; 0
    3298:	00 97       	sbiw	r24, 0x00	; 0
    329a:	b9 f3       	breq	.-18     	; 0x328a <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    329c:	ec e2       	ldi	r30, 0x2C	; 44
    329e:	f0 e0       	ldi	r31, 0x00	; 0
    32a0:	89 81       	ldd	r24, Y+1	; 0x01
    32a2:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    32a4:	0f 90       	pop	r0
    32a6:	cf 91       	pop	r28
    32a8:	df 91       	pop	r29
    32aa:	08 95       	ret

000032ac <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    32ac:	df 93       	push	r29
    32ae:	cf 93       	push	r28
    32b0:	cd b7       	in	r28, 0x3d	; 61
    32b2:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    32b4:	eb e2       	ldi	r30, 0x2B	; 43
    32b6:	f0 e0       	ldi	r31, 0x00	; 0
    32b8:	80 81       	ld	r24, Z
    32ba:	88 23       	and	r24, r24
    32bc:	dc f7       	brge	.-10     	; 0x32b4 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    32be:	ec e2       	ldi	r30, 0x2C	; 44
    32c0:	f0 e0       	ldi	r31, 0x00	; 0
    32c2:	80 81       	ld	r24, Z
}
    32c4:	cf 91       	pop	r28
    32c6:	df 91       	pop	r29
    32c8:	08 95       	ret

000032ca <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    32ca:	df 93       	push	r29
    32cc:	cf 93       	push	r28
    32ce:	00 d0       	rcall	.+0      	; 0x32d0 <UART_sendString+0x6>
    32d0:	0f 92       	push	r0
    32d2:	cd b7       	in	r28, 0x3d	; 61
    32d4:	de b7       	in	r29, 0x3e	; 62
    32d6:	9b 83       	std	Y+3, r25	; 0x03
    32d8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    32da:	19 82       	std	Y+1, r1	; 0x01
    32dc:	0e c0       	rjmp	.+28     	; 0x32fa <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    32de:	89 81       	ldd	r24, Y+1	; 0x01
    32e0:	28 2f       	mov	r18, r24
    32e2:	30 e0       	ldi	r19, 0x00	; 0
    32e4:	8a 81       	ldd	r24, Y+2	; 0x02
    32e6:	9b 81       	ldd	r25, Y+3	; 0x03
    32e8:	fc 01       	movw	r30, r24
    32ea:	e2 0f       	add	r30, r18
    32ec:	f3 1f       	adc	r31, r19
    32ee:	80 81       	ld	r24, Z
    32f0:	0e 94 3f 19 	call	0x327e	; 0x327e <UART_sendByte>
		i++;
    32f4:	89 81       	ldd	r24, Y+1	; 0x01
    32f6:	8f 5f       	subi	r24, 0xFF	; 255
    32f8:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    32fa:	89 81       	ldd	r24, Y+1	; 0x01
    32fc:	28 2f       	mov	r18, r24
    32fe:	30 e0       	ldi	r19, 0x00	; 0
    3300:	8a 81       	ldd	r24, Y+2	; 0x02
    3302:	9b 81       	ldd	r25, Y+3	; 0x03
    3304:	fc 01       	movw	r30, r24
    3306:	e2 0f       	add	r30, r18
    3308:	f3 1f       	adc	r31, r19
    330a:	80 81       	ld	r24, Z
    330c:	88 23       	and	r24, r24
    330e:	39 f7       	brne	.-50     	; 0x32de <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3310:	0f 90       	pop	r0
    3312:	0f 90       	pop	r0
    3314:	0f 90       	pop	r0
    3316:	cf 91       	pop	r28
    3318:	df 91       	pop	r29
    331a:	08 95       	ret

0000331c <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    331c:	0f 93       	push	r16
    331e:	1f 93       	push	r17
    3320:	df 93       	push	r29
    3322:	cf 93       	push	r28
    3324:	00 d0       	rcall	.+0      	; 0x3326 <UART_receiveString+0xa>
    3326:	0f 92       	push	r0
    3328:	cd b7       	in	r28, 0x3d	; 61
    332a:	de b7       	in	r29, 0x3e	; 62
    332c:	9b 83       	std	Y+3, r25	; 0x03
    332e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3330:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    3332:	89 81       	ldd	r24, Y+1	; 0x01
    3334:	28 2f       	mov	r18, r24
    3336:	30 e0       	ldi	r19, 0x00	; 0
    3338:	8a 81       	ldd	r24, Y+2	; 0x02
    333a:	9b 81       	ldd	r25, Y+3	; 0x03
    333c:	8c 01       	movw	r16, r24
    333e:	02 0f       	add	r16, r18
    3340:	13 1f       	adc	r17, r19
    3342:	0e 94 56 19 	call	0x32ac	; 0x32ac <UART_recieveByte>
    3346:	f8 01       	movw	r30, r16
    3348:	80 83       	st	Z, r24
    334a:	0f c0       	rjmp	.+30     	; 0x336a <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    334c:	89 81       	ldd	r24, Y+1	; 0x01
    334e:	8f 5f       	subi	r24, 0xFF	; 255
    3350:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3352:	89 81       	ldd	r24, Y+1	; 0x01
    3354:	28 2f       	mov	r18, r24
    3356:	30 e0       	ldi	r19, 0x00	; 0
    3358:	8a 81       	ldd	r24, Y+2	; 0x02
    335a:	9b 81       	ldd	r25, Y+3	; 0x03
    335c:	8c 01       	movw	r16, r24
    335e:	02 0f       	add	r16, r18
    3360:	13 1f       	adc	r17, r19
    3362:	0e 94 56 19 	call	0x32ac	; 0x32ac <UART_recieveByte>
    3366:	f8 01       	movw	r30, r16
    3368:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    336a:	89 81       	ldd	r24, Y+1	; 0x01
    336c:	28 2f       	mov	r18, r24
    336e:	30 e0       	ldi	r19, 0x00	; 0
    3370:	8a 81       	ldd	r24, Y+2	; 0x02
    3372:	9b 81       	ldd	r25, Y+3	; 0x03
    3374:	fc 01       	movw	r30, r24
    3376:	e2 0f       	add	r30, r18
    3378:	f3 1f       	adc	r31, r19
    337a:	80 81       	ld	r24, Z
    337c:	83 32       	cpi	r24, 0x23	; 35
    337e:	31 f7       	brne	.-52     	; 0x334c <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    3380:	89 81       	ldd	r24, Y+1	; 0x01
    3382:	28 2f       	mov	r18, r24
    3384:	30 e0       	ldi	r19, 0x00	; 0
    3386:	8a 81       	ldd	r24, Y+2	; 0x02
    3388:	9b 81       	ldd	r25, Y+3	; 0x03
    338a:	fc 01       	movw	r30, r24
    338c:	e2 0f       	add	r30, r18
    338e:	f3 1f       	adc	r31, r19
    3390:	10 82       	st	Z, r1
}
    3392:	0f 90       	pop	r0
    3394:	0f 90       	pop	r0
    3396:	0f 90       	pop	r0
    3398:	cf 91       	pop	r28
    339a:	df 91       	pop	r29
    339c:	1f 91       	pop	r17
    339e:	0f 91       	pop	r16
    33a0:	08 95       	ret

000033a2 <__prologue_saves__>:
    33a2:	2f 92       	push	r2
    33a4:	3f 92       	push	r3
    33a6:	4f 92       	push	r4
    33a8:	5f 92       	push	r5
    33aa:	6f 92       	push	r6
    33ac:	7f 92       	push	r7
    33ae:	8f 92       	push	r8
    33b0:	9f 92       	push	r9
    33b2:	af 92       	push	r10
    33b4:	bf 92       	push	r11
    33b6:	cf 92       	push	r12
    33b8:	df 92       	push	r13
    33ba:	ef 92       	push	r14
    33bc:	ff 92       	push	r15
    33be:	0f 93       	push	r16
    33c0:	1f 93       	push	r17
    33c2:	cf 93       	push	r28
    33c4:	df 93       	push	r29
    33c6:	cd b7       	in	r28, 0x3d	; 61
    33c8:	de b7       	in	r29, 0x3e	; 62
    33ca:	ca 1b       	sub	r28, r26
    33cc:	db 0b       	sbc	r29, r27
    33ce:	0f b6       	in	r0, 0x3f	; 63
    33d0:	f8 94       	cli
    33d2:	de bf       	out	0x3e, r29	; 62
    33d4:	0f be       	out	0x3f, r0	; 63
    33d6:	cd bf       	out	0x3d, r28	; 61
    33d8:	09 94       	ijmp

000033da <__epilogue_restores__>:
    33da:	2a 88       	ldd	r2, Y+18	; 0x12
    33dc:	39 88       	ldd	r3, Y+17	; 0x11
    33de:	48 88       	ldd	r4, Y+16	; 0x10
    33e0:	5f 84       	ldd	r5, Y+15	; 0x0f
    33e2:	6e 84       	ldd	r6, Y+14	; 0x0e
    33e4:	7d 84       	ldd	r7, Y+13	; 0x0d
    33e6:	8c 84       	ldd	r8, Y+12	; 0x0c
    33e8:	9b 84       	ldd	r9, Y+11	; 0x0b
    33ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    33ec:	b9 84       	ldd	r11, Y+9	; 0x09
    33ee:	c8 84       	ldd	r12, Y+8	; 0x08
    33f0:	df 80       	ldd	r13, Y+7	; 0x07
    33f2:	ee 80       	ldd	r14, Y+6	; 0x06
    33f4:	fd 80       	ldd	r15, Y+5	; 0x05
    33f6:	0c 81       	ldd	r16, Y+4	; 0x04
    33f8:	1b 81       	ldd	r17, Y+3	; 0x03
    33fa:	aa 81       	ldd	r26, Y+2	; 0x02
    33fc:	b9 81       	ldd	r27, Y+1	; 0x01
    33fe:	ce 0f       	add	r28, r30
    3400:	d1 1d       	adc	r29, r1
    3402:	0f b6       	in	r0, 0x3f	; 63
    3404:	f8 94       	cli
    3406:	de bf       	out	0x3e, r29	; 62
    3408:	0f be       	out	0x3f, r0	; 63
    340a:	cd bf       	out	0x3d, r28	; 61
    340c:	ed 01       	movw	r28, r26
    340e:	08 95       	ret

00003410 <itoa>:
    3410:	fb 01       	movw	r30, r22
    3412:	9f 01       	movw	r18, r30
    3414:	e8 94       	clt
    3416:	42 30       	cpi	r20, 0x02	; 2
    3418:	c4 f0       	brlt	.+48     	; 0x344a <itoa+0x3a>
    341a:	45 32       	cpi	r20, 0x25	; 37
    341c:	b4 f4       	brge	.+44     	; 0x344a <itoa+0x3a>
    341e:	4a 30       	cpi	r20, 0x0A	; 10
    3420:	29 f4       	brne	.+10     	; 0x342c <itoa+0x1c>
    3422:	97 fb       	bst	r25, 7
    3424:	1e f4       	brtc	.+6      	; 0x342c <itoa+0x1c>
    3426:	90 95       	com	r25
    3428:	81 95       	neg	r24
    342a:	9f 4f       	sbci	r25, 0xFF	; 255
    342c:	64 2f       	mov	r22, r20
    342e:	77 27       	eor	r23, r23
    3430:	0e 94 39 1a 	call	0x3472	; 0x3472 <__udivmodhi4>
    3434:	80 5d       	subi	r24, 0xD0	; 208
    3436:	8a 33       	cpi	r24, 0x3A	; 58
    3438:	0c f0       	brlt	.+2      	; 0x343c <itoa+0x2c>
    343a:	89 5d       	subi	r24, 0xD9	; 217
    343c:	81 93       	st	Z+, r24
    343e:	cb 01       	movw	r24, r22
    3440:	00 97       	sbiw	r24, 0x00	; 0
    3442:	a1 f7       	brne	.-24     	; 0x342c <itoa+0x1c>
    3444:	16 f4       	brtc	.+4      	; 0x344a <itoa+0x3a>
    3446:	5d e2       	ldi	r21, 0x2D	; 45
    3448:	51 93       	st	Z+, r21
    344a:	10 82       	st	Z, r1
    344c:	c9 01       	movw	r24, r18
    344e:	0c 94 29 1a 	jmp	0x3452	; 0x3452 <strrev>

00003452 <strrev>:
    3452:	dc 01       	movw	r26, r24
    3454:	fc 01       	movw	r30, r24
    3456:	67 2f       	mov	r22, r23
    3458:	71 91       	ld	r23, Z+
    345a:	77 23       	and	r23, r23
    345c:	e1 f7       	brne	.-8      	; 0x3456 <strrev+0x4>
    345e:	32 97       	sbiw	r30, 0x02	; 2
    3460:	04 c0       	rjmp	.+8      	; 0x346a <strrev+0x18>
    3462:	7c 91       	ld	r23, X
    3464:	6d 93       	st	X+, r22
    3466:	70 83       	st	Z, r23
    3468:	62 91       	ld	r22, -Z
    346a:	ae 17       	cp	r26, r30
    346c:	bf 07       	cpc	r27, r31
    346e:	c8 f3       	brcs	.-14     	; 0x3462 <strrev+0x10>
    3470:	08 95       	ret

00003472 <__udivmodhi4>:
    3472:	aa 1b       	sub	r26, r26
    3474:	bb 1b       	sub	r27, r27
    3476:	51 e1       	ldi	r21, 0x11	; 17
    3478:	07 c0       	rjmp	.+14     	; 0x3488 <__udivmodhi4_ep>

0000347a <__udivmodhi4_loop>:
    347a:	aa 1f       	adc	r26, r26
    347c:	bb 1f       	adc	r27, r27
    347e:	a6 17       	cp	r26, r22
    3480:	b7 07       	cpc	r27, r23
    3482:	10 f0       	brcs	.+4      	; 0x3488 <__udivmodhi4_ep>
    3484:	a6 1b       	sub	r26, r22
    3486:	b7 0b       	sbc	r27, r23

00003488 <__udivmodhi4_ep>:
    3488:	88 1f       	adc	r24, r24
    348a:	99 1f       	adc	r25, r25
    348c:	5a 95       	dec	r21
    348e:	a9 f7       	brne	.-22     	; 0x347a <__udivmodhi4_loop>
    3490:	80 95       	com	r24
    3492:	90 95       	com	r25
    3494:	bc 01       	movw	r22, r24
    3496:	cd 01       	movw	r24, r26
    3498:	08 95       	ret

0000349a <_exit>:
    349a:	f8 94       	cli

0000349c <__stop_program>:
    349c:	ff cf       	rjmp	.-2      	; 0x349c <__stop_program>
